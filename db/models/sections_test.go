// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSections(t *testing.T) {
	t.Parallel()

	query := Sections()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSectionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Section{}
	if err = randomize.Struct(seed, o, sectionDBTypes, true, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Sections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSectionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Section{}
	if err = randomize.Struct(seed, o, sectionDBTypes, true, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Sections().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Sections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSectionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Section{}
	if err = randomize.Struct(seed, o, sectionDBTypes, true, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SectionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Sections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSectionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Section{}
	if err = randomize.Struct(seed, o, sectionDBTypes, true, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SectionExists(ctx, tx, o.SectionID)
	if err != nil {
		t.Errorf("Unable to check if Section exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SectionExists to return true, but got false.")
	}
}

func testSectionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Section{}
	if err = randomize.Struct(seed, o, sectionDBTypes, true, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	sectionFound, err := FindSection(ctx, tx, o.SectionID)
	if err != nil {
		t.Error(err)
	}

	if sectionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSectionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Section{}
	if err = randomize.Struct(seed, o, sectionDBTypes, true, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Sections().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSectionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Section{}
	if err = randomize.Struct(seed, o, sectionDBTypes, true, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Sections().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSectionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	sectionOne := &Section{}
	sectionTwo := &Section{}
	if err = randomize.Struct(seed, sectionOne, sectionDBTypes, false, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}
	if err = randomize.Struct(seed, sectionTwo, sectionDBTypes, false, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sectionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sectionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Sections().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSectionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	sectionOne := &Section{}
	sectionTwo := &Section{}
	if err = randomize.Struct(seed, sectionOne, sectionDBTypes, false, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}
	if err = randomize.Struct(seed, sectionTwo, sectionDBTypes, false, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sectionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sectionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func sectionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Section) error {
	*o = Section{}
	return nil
}

func sectionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Section) error {
	*o = Section{}
	return nil
}

func sectionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Section) error {
	*o = Section{}
	return nil
}

func sectionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Section) error {
	*o = Section{}
	return nil
}

func sectionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Section) error {
	*o = Section{}
	return nil
}

func sectionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Section) error {
	*o = Section{}
	return nil
}

func sectionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Section) error {
	*o = Section{}
	return nil
}

func sectionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Section) error {
	*o = Section{}
	return nil
}

func sectionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Section) error {
	*o = Section{}
	return nil
}

func testSectionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Section{}
	o := &Section{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, sectionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Section object: %s", err)
	}

	AddSectionHook(boil.BeforeInsertHook, sectionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	sectionBeforeInsertHooks = []SectionHook{}

	AddSectionHook(boil.AfterInsertHook, sectionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	sectionAfterInsertHooks = []SectionHook{}

	AddSectionHook(boil.AfterSelectHook, sectionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	sectionAfterSelectHooks = []SectionHook{}

	AddSectionHook(boil.BeforeUpdateHook, sectionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	sectionBeforeUpdateHooks = []SectionHook{}

	AddSectionHook(boil.AfterUpdateHook, sectionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	sectionAfterUpdateHooks = []SectionHook{}

	AddSectionHook(boil.BeforeDeleteHook, sectionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	sectionBeforeDeleteHooks = []SectionHook{}

	AddSectionHook(boil.AfterDeleteHook, sectionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	sectionAfterDeleteHooks = []SectionHook{}

	AddSectionHook(boil.BeforeUpsertHook, sectionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	sectionBeforeUpsertHooks = []SectionHook{}

	AddSectionHook(boil.AfterUpsertHook, sectionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	sectionAfterUpsertHooks = []SectionHook{}
}

func testSectionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Section{}
	if err = randomize.Struct(seed, o, sectionDBTypes, true, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSectionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Section{}
	if err = randomize.Struct(seed, o, sectionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(sectionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Sections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSectionOneToOneSectionTermUsingSectionTerm(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign SectionTerm
	var local Section

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, sectionTermDBTypes, true, sectionTermColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SectionTerm struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, sectionDBTypes, true, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.SectionID = local.SectionID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.SectionTerm().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.SectionID != foreign.SectionID {
		t.Errorf("want: %v, got %v", foreign.SectionID, check.SectionID)
	}

	ranAfterSelectHook := false
	AddSectionTermHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *SectionTerm) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := SectionSlice{&local}
	if err = local.L.LoadSectionTerm(ctx, tx, false, (*[]*Section)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SectionTerm == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SectionTerm = nil
	if err = local.L.LoadSectionTerm(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SectionTerm == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testSectionOneToOneSetOpSectionTermUsingSectionTerm(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Section
	var b, c SectionTerm

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sectionDBTypes, false, strmangle.SetComplement(sectionPrimaryKeyColumns, sectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, sectionTermDBTypes, false, strmangle.SetComplement(sectionTermPrimaryKeyColumns, sectionTermColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sectionTermDBTypes, false, strmangle.SetComplement(sectionTermPrimaryKeyColumns, sectionTermColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SectionTerm{&b, &c} {
		err = a.SetSectionTerm(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SectionTerm != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Section != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.SectionID != x.SectionID {
			t.Error("foreign key was wrong value", a.SectionID)
		}

		zero := reflect.Zero(reflect.TypeOf(x.SectionID))
		reflect.Indirect(reflect.ValueOf(&x.SectionID)).Set(zero)

		if err = x.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SectionID != x.SectionID {
			t.Error("foreign key was wrong value", a.SectionID, x.SectionID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testSectionToOneBubbleUsingBubble(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Section
	var foreign Bubble

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, sectionDBTypes, true, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, bubbleDBTypes, false, bubbleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bubble struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.BubbleID, foreign.BubbleID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Bubble().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.BubbleID, foreign.BubbleID) {
		t.Errorf("want: %v, got %v", foreign.BubbleID, check.BubbleID)
	}

	ranAfterSelectHook := false
	AddBubbleHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Bubble) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := SectionSlice{&local}
	if err = local.L.LoadBubble(ctx, tx, false, (*[]*Section)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Bubble == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Bubble = nil
	if err = local.L.LoadBubble(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Bubble == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testSectionToOneFontUsingFont(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Section
	var foreign Font

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, sectionDBTypes, true, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, fontDBTypes, false, fontColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Font struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.FontID, foreign.FontID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Font().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.FontID, foreign.FontID) {
		t.Errorf("want: %v, got %v", foreign.FontID, check.FontID)
	}

	ranAfterSelectHook := false
	AddFontHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Font) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := SectionSlice{&local}
	if err = local.L.LoadFont(ctx, tx, false, (*[]*Section)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Font == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Font = nil
	if err = local.L.LoadFont(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Font == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testSectionToOneImageUsingImage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Section
	var foreign Image

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, sectionDBTypes, true, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, imageDBTypes, false, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ImageID, foreign.ImageID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Image().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ImageID, foreign.ImageID) {
		t.Errorf("want: %v, got %v", foreign.ImageID, check.ImageID)
	}

	ranAfterSelectHook := false
	AddImageHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Image) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := SectionSlice{&local}
	if err = local.L.LoadImage(ctx, tx, false, (*[]*Section)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Image == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Image = nil
	if err = local.L.LoadImage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Image == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testSectionToOnePageUsingPage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Section
	var foreign Page

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, sectionDBTypes, false, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, pageDBTypes, false, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PageID = foreign.PageID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Page().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.PageID != foreign.PageID {
		t.Errorf("want: %v, got %v", foreign.PageID, check.PageID)
	}

	ranAfterSelectHook := false
	AddPageHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Page) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := SectionSlice{&local}
	if err = local.L.LoadPage(ctx, tx, false, (*[]*Section)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Page == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Page = nil
	if err = local.L.LoadPage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Page == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testSectionToOnePositionUsingPosition(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Section
	var foreign Position

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, sectionDBTypes, true, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, positionDBTypes, false, positionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Position struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.PositionID, foreign.PositionID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Position().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.PositionID, foreign.PositionID) {
		t.Errorf("want: %v, got %v", foreign.PositionID, check.PositionID)
	}

	ranAfterSelectHook := false
	AddPositionHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Position) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := SectionSlice{&local}
	if err = local.L.LoadPosition(ctx, tx, false, (*[]*Section)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Position == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Position = nil
	if err = local.L.LoadPosition(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Position == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testSectionToOneTypeUsingType(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Section
	var foreign Type

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, sectionDBTypes, true, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, typeDBTypes, false, typeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Type struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.TypeID, foreign.TypeID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Type().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.TypeID, foreign.TypeID) {
		t.Errorf("want: %v, got %v", foreign.TypeID, check.TypeID)
	}

	ranAfterSelectHook := false
	AddTypeHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Type) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := SectionSlice{&local}
	if err = local.L.LoadType(ctx, tx, false, (*[]*Section)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Type == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Type = nil
	if err = local.L.LoadType(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Type == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testSectionToOneSetOpBubbleUsingBubble(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Section
	var b, c Bubble

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sectionDBTypes, false, strmangle.SetComplement(sectionPrimaryKeyColumns, sectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, bubbleDBTypes, false, strmangle.SetComplement(bubblePrimaryKeyColumns, bubbleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, bubbleDBTypes, false, strmangle.SetComplement(bubblePrimaryKeyColumns, bubbleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Bubble{&b, &c} {
		err = a.SetBubble(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Bubble != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Sections[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.BubbleID, x.BubbleID) {
			t.Error("foreign key was wrong value", a.BubbleID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BubbleID))
		reflect.Indirect(reflect.ValueOf(&a.BubbleID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.BubbleID, x.BubbleID) {
			t.Error("foreign key was wrong value", a.BubbleID, x.BubbleID)
		}
	}
}

func testSectionToOneRemoveOpBubbleUsingBubble(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Section
	var b Bubble

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sectionDBTypes, false, strmangle.SetComplement(sectionPrimaryKeyColumns, sectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, bubbleDBTypes, false, strmangle.SetComplement(bubblePrimaryKeyColumns, bubbleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetBubble(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveBubble(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Bubble().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Bubble != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.BubbleID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Sections) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testSectionToOneSetOpFontUsingFont(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Section
	var b, c Font

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sectionDBTypes, false, strmangle.SetComplement(sectionPrimaryKeyColumns, sectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, fontDBTypes, false, strmangle.SetComplement(fontPrimaryKeyColumns, fontColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, fontDBTypes, false, strmangle.SetComplement(fontPrimaryKeyColumns, fontColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Font{&b, &c} {
		err = a.SetFont(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Font != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Sections[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.FontID, x.FontID) {
			t.Error("foreign key was wrong value", a.FontID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FontID))
		reflect.Indirect(reflect.ValueOf(&a.FontID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.FontID, x.FontID) {
			t.Error("foreign key was wrong value", a.FontID, x.FontID)
		}
	}
}

func testSectionToOneRemoveOpFontUsingFont(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Section
	var b Font

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sectionDBTypes, false, strmangle.SetComplement(sectionPrimaryKeyColumns, sectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, fontDBTypes, false, strmangle.SetComplement(fontPrimaryKeyColumns, fontColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetFont(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveFont(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Font().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Font != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.FontID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Sections) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testSectionToOneSetOpImageUsingImage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Section
	var b, c Image

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sectionDBTypes, false, strmangle.SetComplement(sectionPrimaryKeyColumns, sectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Image{&b, &c} {
		err = a.SetImage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Image != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Sections[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ImageID, x.ImageID) {
			t.Error("foreign key was wrong value", a.ImageID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ImageID))
		reflect.Indirect(reflect.ValueOf(&a.ImageID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ImageID, x.ImageID) {
			t.Error("foreign key was wrong value", a.ImageID, x.ImageID)
		}
	}
}

func testSectionToOneRemoveOpImageUsingImage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Section
	var b Image

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sectionDBTypes, false, strmangle.SetComplement(sectionPrimaryKeyColumns, sectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetImage(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveImage(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Image().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Image != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ImageID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Sections) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testSectionToOneSetOpPageUsingPage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Section
	var b, c Page

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sectionDBTypes, false, strmangle.SetComplement(sectionPrimaryKeyColumns, sectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Page{&b, &c} {
		err = a.SetPage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Page != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Sections[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PageID != x.PageID {
			t.Error("foreign key was wrong value", a.PageID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PageID))
		reflect.Indirect(reflect.ValueOf(&a.PageID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PageID != x.PageID {
			t.Error("foreign key was wrong value", a.PageID, x.PageID)
		}
	}
}
func testSectionToOneSetOpPositionUsingPosition(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Section
	var b, c Position

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sectionDBTypes, false, strmangle.SetComplement(sectionPrimaryKeyColumns, sectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, positionDBTypes, false, strmangle.SetComplement(positionPrimaryKeyColumns, positionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, positionDBTypes, false, strmangle.SetComplement(positionPrimaryKeyColumns, positionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Position{&b, &c} {
		err = a.SetPosition(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Position != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Sections[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.PositionID, x.PositionID) {
			t.Error("foreign key was wrong value", a.PositionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PositionID))
		reflect.Indirect(reflect.ValueOf(&a.PositionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.PositionID, x.PositionID) {
			t.Error("foreign key was wrong value", a.PositionID, x.PositionID)
		}
	}
}

func testSectionToOneRemoveOpPositionUsingPosition(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Section
	var b Position

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sectionDBTypes, false, strmangle.SetComplement(sectionPrimaryKeyColumns, sectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, positionDBTypes, false, strmangle.SetComplement(positionPrimaryKeyColumns, positionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetPosition(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemovePosition(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Position().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Position != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.PositionID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Sections) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testSectionToOneSetOpTypeUsingType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Section
	var b, c Type

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sectionDBTypes, false, strmangle.SetComplement(sectionPrimaryKeyColumns, sectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, typeDBTypes, false, strmangle.SetComplement(typePrimaryKeyColumns, typeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, typeDBTypes, false, strmangle.SetComplement(typePrimaryKeyColumns, typeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Type{&b, &c} {
		err = a.SetType(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Type != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Sections[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.TypeID, x.TypeID) {
			t.Error("foreign key was wrong value", a.TypeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TypeID))
		reflect.Indirect(reflect.ValueOf(&a.TypeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.TypeID, x.TypeID) {
			t.Error("foreign key was wrong value", a.TypeID, x.TypeID)
		}
	}
}

func testSectionToOneRemoveOpTypeUsingType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Section
	var b Type

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sectionDBTypes, false, strmangle.SetComplement(sectionPrimaryKeyColumns, sectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, typeDBTypes, false, strmangle.SetComplement(typePrimaryKeyColumns, typeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetType(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveType(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Type().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Type != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.TypeID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Sections) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testSectionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Section{}
	if err = randomize.Struct(seed, o, sectionDBTypes, true, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSectionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Section{}
	if err = randomize.Struct(seed, o, sectionDBTypes, true, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SectionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSectionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Section{}
	if err = randomize.Struct(seed, o, sectionDBTypes, true, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Sections().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	sectionDBTypes = map[string]string{`SectionID`: `integer`, `Order`: `integer`, `FrameColor`: `character varying`, `Text`: `text`, `TextColor`: `character varying`, `TextSize`: `integer`, `PageID`: `integer`, `TypeID`: `integer`, `PositionID`: `integer`, `BubbleID`: `integer`, `ImageID`: `integer`, `FontID`: `integer`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_              = bytes.MinRead
)

func testSectionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(sectionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(sectionAllColumns) == len(sectionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Section{}
	if err = randomize.Struct(seed, o, sectionDBTypes, true, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sectionDBTypes, true, sectionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSectionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(sectionAllColumns) == len(sectionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Section{}
	if err = randomize.Struct(seed, o, sectionDBTypes, true, sectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sectionDBTypes, true, sectionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(sectionAllColumns, sectionPrimaryKeyColumns) {
		fields = sectionAllColumns
	} else {
		fields = strmangle.SetComplement(
			sectionAllColumns,
			sectionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SectionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSectionsUpsert(t *testing.T) {
	t.Parallel()

	if len(sectionAllColumns) == len(sectionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Section{}
	if err = randomize.Struct(seed, &o, sectionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Section: %s", err)
	}

	count, err := Sections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, sectionDBTypes, false, sectionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Section struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Section: %s", err)
	}

	count, err = Sections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
