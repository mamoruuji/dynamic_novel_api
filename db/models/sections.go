// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Section is an object representing the database table.
type Section struct {
	SectionID    int32      `boil:"section_id" json:"section_id" toml:"section_id" yaml:"section_id"`
	Order        int32      `boil:"order" json:"order" toml:"order" yaml:"order"`
	Text         string     `boil:"text" json:"text" toml:"text" yaml:"text"`
	TextSize     int32      `boil:"text_size" json:"text_size" toml:"text_size" yaml:"text_size"`
	PageID       int32      `boil:"page_id" json:"page_id" toml:"page_id" yaml:"page_id"`
	TypeID       int32      `boil:"type_id" json:"type_id" toml:"type_id" yaml:"type_id"`
	ImageID      null.Int32 `boil:"image_id" json:"image_id,omitempty" toml:"image_id" yaml:"image_id,omitempty"`
	FontID       int32      `boil:"font_id" json:"font_id" toml:"font_id" yaml:"font_id"`
	CreatedAt    time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	FrameColorID int32      `boil:"frame_color_id" json:"frame_color_id" toml:"frame_color_id" yaml:"frame_color_id"`
	Name         string     `boil:"name" json:"name" toml:"name" yaml:"name"`
	TextColorID  int32      `boil:"text_color_id" json:"text_color_id" toml:"text_color_id" yaml:"text_color_id"`
	TermID       null.Int32 `boil:"term_id" json:"term_id,omitempty" toml:"term_id" yaml:"term_id,omitempty"`

	R *sectionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sectionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SectionColumns = struct {
	SectionID    string
	Order        string
	Text         string
	TextSize     string
	PageID       string
	TypeID       string
	ImageID      string
	FontID       string
	CreatedAt    string
	UpdatedAt    string
	FrameColorID string
	Name         string
	TextColorID  string
	TermID       string
}{
	SectionID:    "section_id",
	Order:        "order",
	Text:         "text",
	TextSize:     "text_size",
	PageID:       "page_id",
	TypeID:       "type_id",
	ImageID:      "image_id",
	FontID:       "font_id",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	FrameColorID: "frame_color_id",
	Name:         "name",
	TextColorID:  "text_color_id",
	TermID:       "term_id",
}

var SectionTableColumns = struct {
	SectionID    string
	Order        string
	Text         string
	TextSize     string
	PageID       string
	TypeID       string
	ImageID      string
	FontID       string
	CreatedAt    string
	UpdatedAt    string
	FrameColorID string
	Name         string
	TextColorID  string
	TermID       string
}{
	SectionID:    "sections.section_id",
	Order:        "sections.order",
	Text:         "sections.text",
	TextSize:     "sections.text_size",
	PageID:       "sections.page_id",
	TypeID:       "sections.type_id",
	ImageID:      "sections.image_id",
	FontID:       "sections.font_id",
	CreatedAt:    "sections.created_at",
	UpdatedAt:    "sections.updated_at",
	FrameColorID: "sections.frame_color_id",
	Name:         "sections.name",
	TextColorID:  "sections.text_color_id",
	TermID:       "sections.term_id",
}

// Generated where

var SectionWhere = struct {
	SectionID    whereHelperint32
	Order        whereHelperint32
	Text         whereHelperstring
	TextSize     whereHelperint32
	PageID       whereHelperint32
	TypeID       whereHelperint32
	ImageID      whereHelpernull_Int32
	FontID       whereHelperint32
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
	FrameColorID whereHelperint32
	Name         whereHelperstring
	TextColorID  whereHelperint32
	TermID       whereHelpernull_Int32
}{
	SectionID:    whereHelperint32{field: "\"sections\".\"section_id\""},
	Order:        whereHelperint32{field: "\"sections\".\"order\""},
	Text:         whereHelperstring{field: "\"sections\".\"text\""},
	TextSize:     whereHelperint32{field: "\"sections\".\"text_size\""},
	PageID:       whereHelperint32{field: "\"sections\".\"page_id\""},
	TypeID:       whereHelperint32{field: "\"sections\".\"type_id\""},
	ImageID:      whereHelpernull_Int32{field: "\"sections\".\"image_id\""},
	FontID:       whereHelperint32{field: "\"sections\".\"font_id\""},
	CreatedAt:    whereHelpertime_Time{field: "\"sections\".\"created_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"sections\".\"updated_at\""},
	FrameColorID: whereHelperint32{field: "\"sections\".\"frame_color_id\""},
	Name:         whereHelperstring{field: "\"sections\".\"name\""},
	TextColorID:  whereHelperint32{field: "\"sections\".\"text_color_id\""},
	TermID:       whereHelpernull_Int32{field: "\"sections\".\"term_id\""},
}

// SectionRels is where relationship names are stored.
var SectionRels = struct {
	Font       string
	FrameColor string
	Image      string
	Page       string
	TextColor  string
	Type       string
	Terms      string
}{
	Font:       "Font",
	FrameColor: "FrameColor",
	Image:      "Image",
	Page:       "Page",
	TextColor:  "TextColor",
	Type:       "Type",
	Terms:      "Terms",
}

// sectionR is where relationships are stored.
type sectionR struct {
	Font       *Font     `boil:"Font" json:"Font" toml:"Font" yaml:"Font"`
	FrameColor *Color    `boil:"FrameColor" json:"FrameColor" toml:"FrameColor" yaml:"FrameColor"`
	Image      *Image    `boil:"Image" json:"Image" toml:"Image" yaml:"Image"`
	Page       *Page     `boil:"Page" json:"Page" toml:"Page" yaml:"Page"`
	TextColor  *Color    `boil:"TextColor" json:"TextColor" toml:"TextColor" yaml:"TextColor"`
	Type       *Type     `boil:"Type" json:"Type" toml:"Type" yaml:"Type"`
	Terms      TermSlice `boil:"Terms" json:"Terms" toml:"Terms" yaml:"Terms"`
}

// NewStruct creates a new relationship struct
func (*sectionR) NewStruct() *sectionR {
	return &sectionR{}
}

func (r *sectionR) GetFont() *Font {
	if r == nil {
		return nil
	}
	return r.Font
}

func (r *sectionR) GetFrameColor() *Color {
	if r == nil {
		return nil
	}
	return r.FrameColor
}

func (r *sectionR) GetImage() *Image {
	if r == nil {
		return nil
	}
	return r.Image
}

func (r *sectionR) GetPage() *Page {
	if r == nil {
		return nil
	}
	return r.Page
}

func (r *sectionR) GetTextColor() *Color {
	if r == nil {
		return nil
	}
	return r.TextColor
}

func (r *sectionR) GetType() *Type {
	if r == nil {
		return nil
	}
	return r.Type
}

func (r *sectionR) GetTerms() TermSlice {
	if r == nil {
		return nil
	}
	return r.Terms
}

// sectionL is where Load methods for each relationship are stored.
type sectionL struct{}

var (
	sectionAllColumns            = []string{"section_id", "order", "text", "text_size", "page_id", "type_id", "image_id", "font_id", "created_at", "updated_at", "frame_color_id", "name", "text_color_id", "term_id"}
	sectionColumnsWithoutDefault = []string{"order", "page_id", "updated_at"}
	sectionColumnsWithDefault    = []string{"section_id", "text", "text_size", "type_id", "image_id", "font_id", "created_at", "frame_color_id", "name", "text_color_id", "term_id"}
	sectionPrimaryKeyColumns     = []string{"section_id"}
	sectionGeneratedColumns      = []string{}
)

type (
	// SectionSlice is an alias for a slice of pointers to Section.
	// This should almost always be used instead of []Section.
	SectionSlice []*Section
	// SectionHook is the signature for custom Section hook methods
	SectionHook func(context.Context, boil.ContextExecutor, *Section) error

	sectionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sectionType                 = reflect.TypeOf(&Section{})
	sectionMapping              = queries.MakeStructMapping(sectionType)
	sectionPrimaryKeyMapping, _ = queries.BindMapping(sectionType, sectionMapping, sectionPrimaryKeyColumns)
	sectionInsertCacheMut       sync.RWMutex
	sectionInsertCache          = make(map[string]insertCache)
	sectionUpdateCacheMut       sync.RWMutex
	sectionUpdateCache          = make(map[string]updateCache)
	sectionUpsertCacheMut       sync.RWMutex
	sectionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sectionAfterSelectHooks []SectionHook

var sectionBeforeInsertHooks []SectionHook
var sectionAfterInsertHooks []SectionHook

var sectionBeforeUpdateHooks []SectionHook
var sectionAfterUpdateHooks []SectionHook

var sectionBeforeDeleteHooks []SectionHook
var sectionAfterDeleteHooks []SectionHook

var sectionBeforeUpsertHooks []SectionHook
var sectionAfterUpsertHooks []SectionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Section) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sectionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Section) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sectionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Section) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sectionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Section) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sectionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Section) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sectionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Section) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sectionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Section) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sectionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Section) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sectionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Section) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sectionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSectionHook registers your hook function for all future operations.
func AddSectionHook(hookPoint boil.HookPoint, sectionHook SectionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sectionAfterSelectHooks = append(sectionAfterSelectHooks, sectionHook)
	case boil.BeforeInsertHook:
		sectionBeforeInsertHooks = append(sectionBeforeInsertHooks, sectionHook)
	case boil.AfterInsertHook:
		sectionAfterInsertHooks = append(sectionAfterInsertHooks, sectionHook)
	case boil.BeforeUpdateHook:
		sectionBeforeUpdateHooks = append(sectionBeforeUpdateHooks, sectionHook)
	case boil.AfterUpdateHook:
		sectionAfterUpdateHooks = append(sectionAfterUpdateHooks, sectionHook)
	case boil.BeforeDeleteHook:
		sectionBeforeDeleteHooks = append(sectionBeforeDeleteHooks, sectionHook)
	case boil.AfterDeleteHook:
		sectionAfterDeleteHooks = append(sectionAfterDeleteHooks, sectionHook)
	case boil.BeforeUpsertHook:
		sectionBeforeUpsertHooks = append(sectionBeforeUpsertHooks, sectionHook)
	case boil.AfterUpsertHook:
		sectionAfterUpsertHooks = append(sectionAfterUpsertHooks, sectionHook)
	}
}

// One returns a single section record from the query.
func (q sectionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Section, error) {
	o := &Section{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sections")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Section records from the query.
func (q sectionQuery) All(ctx context.Context, exec boil.ContextExecutor) (SectionSlice, error) {
	var o []*Section

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Section slice")
	}

	if len(sectionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Section records in the query.
func (q sectionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sections rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sectionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sections exists")
	}

	return count > 0, nil
}

// Font pointed to by the foreign key.
func (o *Section) Font(mods ...qm.QueryMod) fontQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"font_id\" = ?", o.FontID),
	}

	queryMods = append(queryMods, mods...)

	return Fonts(queryMods...)
}

// FrameColor pointed to by the foreign key.
func (o *Section) FrameColor(mods ...qm.QueryMod) colorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"color_id\" = ?", o.FrameColorID),
	}

	queryMods = append(queryMods, mods...)

	return Colors(queryMods...)
}

// Image pointed to by the foreign key.
func (o *Section) Image(mods ...qm.QueryMod) imageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"image_id\" = ?", o.ImageID),
	}

	queryMods = append(queryMods, mods...)

	return Images(queryMods...)
}

// Page pointed to by the foreign key.
func (o *Section) Page(mods ...qm.QueryMod) pageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"page_id\" = ?", o.PageID),
	}

	queryMods = append(queryMods, mods...)

	return Pages(queryMods...)
}

// TextColor pointed to by the foreign key.
func (o *Section) TextColor(mods ...qm.QueryMod) colorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"color_id\" = ?", o.TextColorID),
	}

	queryMods = append(queryMods, mods...)

	return Colors(queryMods...)
}

// Type pointed to by the foreign key.
func (o *Section) Type(mods ...qm.QueryMod) typeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"type_id\" = ?", o.TypeID),
	}

	queryMods = append(queryMods, mods...)

	return Types(queryMods...)
}

// Terms retrieves all the term's Terms with an executor.
func (o *Section) Terms(mods ...qm.QueryMod) termQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"terms\".\"section_id\"=?", o.SectionID),
	)

	return Terms(queryMods...)
}

// LoadFont allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sectionL) LoadFont(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSection interface{}, mods queries.Applicator) error {
	var slice []*Section
	var object *Section

	if singular {
		var ok bool
		object, ok = maybeSection.(*Section)
		if !ok {
			object = new(Section)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSection))
			}
		}
	} else {
		s, ok := maybeSection.(*[]*Section)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSection))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sectionR{}
		}
		args = append(args, object.FontID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sectionR{}
			}

			for _, a := range args {
				if a == obj.FontID {
					continue Outer
				}
			}

			args = append(args, obj.FontID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`fonts`),
		qm.WhereIn(`fonts.font_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Font")
	}

	var resultSlice []*Font
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Font")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for fonts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for fonts")
	}

	if len(fontAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Font = foreign
		if foreign.R == nil {
			foreign.R = &fontR{}
		}
		foreign.R.Sections = append(foreign.R.Sections, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FontID == foreign.FontID {
				local.R.Font = foreign
				if foreign.R == nil {
					foreign.R = &fontR{}
				}
				foreign.R.Sections = append(foreign.R.Sections, local)
				break
			}
		}
	}

	return nil
}

// LoadFrameColor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sectionL) LoadFrameColor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSection interface{}, mods queries.Applicator) error {
	var slice []*Section
	var object *Section

	if singular {
		var ok bool
		object, ok = maybeSection.(*Section)
		if !ok {
			object = new(Section)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSection))
			}
		}
	} else {
		s, ok := maybeSection.(*[]*Section)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSection))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sectionR{}
		}
		args = append(args, object.FrameColorID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sectionR{}
			}

			for _, a := range args {
				if a == obj.FrameColorID {
					continue Outer
				}
			}

			args = append(args, obj.FrameColorID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`colors`),
		qm.WhereIn(`colors.color_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Color")
	}

	var resultSlice []*Color
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Color")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for colors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for colors")
	}

	if len(colorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FrameColor = foreign
		if foreign.R == nil {
			foreign.R = &colorR{}
		}
		foreign.R.FrameColorSections = append(foreign.R.FrameColorSections, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FrameColorID == foreign.ColorID {
				local.R.FrameColor = foreign
				if foreign.R == nil {
					foreign.R = &colorR{}
				}
				foreign.R.FrameColorSections = append(foreign.R.FrameColorSections, local)
				break
			}
		}
	}

	return nil
}

// LoadImage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sectionL) LoadImage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSection interface{}, mods queries.Applicator) error {
	var slice []*Section
	var object *Section

	if singular {
		var ok bool
		object, ok = maybeSection.(*Section)
		if !ok {
			object = new(Section)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSection))
			}
		}
	} else {
		s, ok := maybeSection.(*[]*Section)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSection))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sectionR{}
		}
		if !queries.IsNil(object.ImageID) {
			args = append(args, object.ImageID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sectionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ImageID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ImageID) {
				args = append(args, obj.ImageID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`images`),
		qm.WhereIn(`images.image_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Image")
	}

	var resultSlice []*Image
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Image")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for images")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for images")
	}

	if len(imageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Image = foreign
		if foreign.R == nil {
			foreign.R = &imageR{}
		}
		foreign.R.Sections = append(foreign.R.Sections, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ImageID, foreign.ImageID) {
				local.R.Image = foreign
				if foreign.R == nil {
					foreign.R = &imageR{}
				}
				foreign.R.Sections = append(foreign.R.Sections, local)
				break
			}
		}
	}

	return nil
}

// LoadPage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sectionL) LoadPage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSection interface{}, mods queries.Applicator) error {
	var slice []*Section
	var object *Section

	if singular {
		var ok bool
		object, ok = maybeSection.(*Section)
		if !ok {
			object = new(Section)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSection))
			}
		}
	} else {
		s, ok := maybeSection.(*[]*Section)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSection))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sectionR{}
		}
		args = append(args, object.PageID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sectionR{}
			}

			for _, a := range args {
				if a == obj.PageID {
					continue Outer
				}
			}

			args = append(args, obj.PageID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`pages`),
		qm.WhereIn(`pages.page_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Page")
	}

	var resultSlice []*Page
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Page")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for pages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pages")
	}

	if len(pageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Page = foreign
		if foreign.R == nil {
			foreign.R = &pageR{}
		}
		foreign.R.Sections = append(foreign.R.Sections, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PageID == foreign.PageID {
				local.R.Page = foreign
				if foreign.R == nil {
					foreign.R = &pageR{}
				}
				foreign.R.Sections = append(foreign.R.Sections, local)
				break
			}
		}
	}

	return nil
}

// LoadTextColor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sectionL) LoadTextColor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSection interface{}, mods queries.Applicator) error {
	var slice []*Section
	var object *Section

	if singular {
		var ok bool
		object, ok = maybeSection.(*Section)
		if !ok {
			object = new(Section)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSection))
			}
		}
	} else {
		s, ok := maybeSection.(*[]*Section)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSection))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sectionR{}
		}
		args = append(args, object.TextColorID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sectionR{}
			}

			for _, a := range args {
				if a == obj.TextColorID {
					continue Outer
				}
			}

			args = append(args, obj.TextColorID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`colors`),
		qm.WhereIn(`colors.color_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Color")
	}

	var resultSlice []*Color
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Color")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for colors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for colors")
	}

	if len(colorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TextColor = foreign
		if foreign.R == nil {
			foreign.R = &colorR{}
		}
		foreign.R.TextColorSections = append(foreign.R.TextColorSections, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TextColorID == foreign.ColorID {
				local.R.TextColor = foreign
				if foreign.R == nil {
					foreign.R = &colorR{}
				}
				foreign.R.TextColorSections = append(foreign.R.TextColorSections, local)
				break
			}
		}
	}

	return nil
}

// LoadType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sectionL) LoadType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSection interface{}, mods queries.Applicator) error {
	var slice []*Section
	var object *Section

	if singular {
		var ok bool
		object, ok = maybeSection.(*Section)
		if !ok {
			object = new(Section)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSection))
			}
		}
	} else {
		s, ok := maybeSection.(*[]*Section)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSection))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sectionR{}
		}
		args = append(args, object.TypeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sectionR{}
			}

			for _, a := range args {
				if a == obj.TypeID {
					continue Outer
				}
			}

			args = append(args, obj.TypeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`types`),
		qm.WhereIn(`types.type_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Type")
	}

	var resultSlice []*Type
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Type")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for types")
	}

	if len(typeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Type = foreign
		if foreign.R == nil {
			foreign.R = &typeR{}
		}
		foreign.R.Sections = append(foreign.R.Sections, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TypeID == foreign.TypeID {
				local.R.Type = foreign
				if foreign.R == nil {
					foreign.R = &typeR{}
				}
				foreign.R.Sections = append(foreign.R.Sections, local)
				break
			}
		}
	}

	return nil
}

// LoadTerms allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sectionL) LoadTerms(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSection interface{}, mods queries.Applicator) error {
	var slice []*Section
	var object *Section

	if singular {
		var ok bool
		object, ok = maybeSection.(*Section)
		if !ok {
			object = new(Section)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSection))
			}
		}
	} else {
		s, ok := maybeSection.(*[]*Section)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSection))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sectionR{}
		}
		args = append(args, object.SectionID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sectionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SectionID) {
					continue Outer
				}
			}

			args = append(args, obj.SectionID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`terms`),
		qm.WhereIn(`terms.section_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load terms")
	}

	var resultSlice []*Term
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice terms")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on terms")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for terms")
	}

	if len(termAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Terms = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &termR{}
			}
			foreign.R.Section = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.SectionID, foreign.SectionID) {
				local.R.Terms = append(local.R.Terms, foreign)
				if foreign.R == nil {
					foreign.R = &termR{}
				}
				foreign.R.Section = local
				break
			}
		}
	}

	return nil
}

// SetFont of the section to the related item.
// Sets o.R.Font to related.
// Adds o to related.R.Sections.
func (o *Section) SetFont(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Font) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"font_id"}),
		strmangle.WhereClause("\"", "\"", 2, sectionPrimaryKeyColumns),
	)
	values := []interface{}{related.FontID, o.SectionID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FontID = related.FontID
	if o.R == nil {
		o.R = &sectionR{
			Font: related,
		}
	} else {
		o.R.Font = related
	}

	if related.R == nil {
		related.R = &fontR{
			Sections: SectionSlice{o},
		}
	} else {
		related.R.Sections = append(related.R.Sections, o)
	}

	return nil
}

// SetFrameColor of the section to the related item.
// Sets o.R.FrameColor to related.
// Adds o to related.R.FrameColorSections.
func (o *Section) SetFrameColor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Color) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"frame_color_id"}),
		strmangle.WhereClause("\"", "\"", 2, sectionPrimaryKeyColumns),
	)
	values := []interface{}{related.ColorID, o.SectionID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FrameColorID = related.ColorID
	if o.R == nil {
		o.R = &sectionR{
			FrameColor: related,
		}
	} else {
		o.R.FrameColor = related
	}

	if related.R == nil {
		related.R = &colorR{
			FrameColorSections: SectionSlice{o},
		}
	} else {
		related.R.FrameColorSections = append(related.R.FrameColorSections, o)
	}

	return nil
}

// SetImage of the section to the related item.
// Sets o.R.Image to related.
// Adds o to related.R.Sections.
func (o *Section) SetImage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Image) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"image_id"}),
		strmangle.WhereClause("\"", "\"", 2, sectionPrimaryKeyColumns),
	)
	values := []interface{}{related.ImageID, o.SectionID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ImageID, related.ImageID)
	if o.R == nil {
		o.R = &sectionR{
			Image: related,
		}
	} else {
		o.R.Image = related
	}

	if related.R == nil {
		related.R = &imageR{
			Sections: SectionSlice{o},
		}
	} else {
		related.R.Sections = append(related.R.Sections, o)
	}

	return nil
}

// RemoveImage relationship.
// Sets o.R.Image to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Section) RemoveImage(ctx context.Context, exec boil.ContextExecutor, related *Image) error {
	var err error

	queries.SetScanner(&o.ImageID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("image_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Image = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Sections {
		if queries.Equal(o.ImageID, ri.ImageID) {
			continue
		}

		ln := len(related.R.Sections)
		if ln > 1 && i < ln-1 {
			related.R.Sections[i] = related.R.Sections[ln-1]
		}
		related.R.Sections = related.R.Sections[:ln-1]
		break
	}
	return nil
}

// SetPage of the section to the related item.
// Sets o.R.Page to related.
// Adds o to related.R.Sections.
func (o *Section) SetPage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Page) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"page_id"}),
		strmangle.WhereClause("\"", "\"", 2, sectionPrimaryKeyColumns),
	)
	values := []interface{}{related.PageID, o.SectionID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PageID = related.PageID
	if o.R == nil {
		o.R = &sectionR{
			Page: related,
		}
	} else {
		o.R.Page = related
	}

	if related.R == nil {
		related.R = &pageR{
			Sections: SectionSlice{o},
		}
	} else {
		related.R.Sections = append(related.R.Sections, o)
	}

	return nil
}

// SetTextColor of the section to the related item.
// Sets o.R.TextColor to related.
// Adds o to related.R.TextColorSections.
func (o *Section) SetTextColor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Color) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"text_color_id"}),
		strmangle.WhereClause("\"", "\"", 2, sectionPrimaryKeyColumns),
	)
	values := []interface{}{related.ColorID, o.SectionID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TextColorID = related.ColorID
	if o.R == nil {
		o.R = &sectionR{
			TextColor: related,
		}
	} else {
		o.R.TextColor = related
	}

	if related.R == nil {
		related.R = &colorR{
			TextColorSections: SectionSlice{o},
		}
	} else {
		related.R.TextColorSections = append(related.R.TextColorSections, o)
	}

	return nil
}

// SetType of the section to the related item.
// Sets o.R.Type to related.
// Adds o to related.R.Sections.
func (o *Section) SetType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Type) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"type_id"}),
		strmangle.WhereClause("\"", "\"", 2, sectionPrimaryKeyColumns),
	)
	values := []interface{}{related.TypeID, o.SectionID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TypeID = related.TypeID
	if o.R == nil {
		o.R = &sectionR{
			Type: related,
		}
	} else {
		o.R.Type = related
	}

	if related.R == nil {
		related.R = &typeR{
			Sections: SectionSlice{o},
		}
	} else {
		related.R.Sections = append(related.R.Sections, o)
	}

	return nil
}

// AddTerms adds the given related objects to the existing relationships
// of the section, optionally inserting them as new records.
// Appends related to o.R.Terms.
// Sets related.R.Section appropriately.
func (o *Section) AddTerms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Term) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SectionID, o.SectionID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"terms\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"section_id"}),
				strmangle.WhereClause("\"", "\"", 2, termPrimaryKeyColumns),
			)
			values := []interface{}{o.SectionID, rel.TermID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SectionID, o.SectionID)
		}
	}

	if o.R == nil {
		o.R = &sectionR{
			Terms: related,
		}
	} else {
		o.R.Terms = append(o.R.Terms, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &termR{
				Section: o,
			}
		} else {
			rel.R.Section = o
		}
	}
	return nil
}

// SetTerms removes all previously related items of the
// section replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Section's Terms accordingly.
// Replaces o.R.Terms with related.
// Sets related.R.Section's Terms accordingly.
func (o *Section) SetTerms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Term) error {
	query := "update \"terms\" set \"section_id\" = null where \"section_id\" = $1"
	values := []interface{}{o.SectionID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Terms {
			queries.SetScanner(&rel.SectionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Section = nil
		}
		o.R.Terms = nil
	}

	return o.AddTerms(ctx, exec, insert, related...)
}

// RemoveTerms relationships from objects passed in.
// Removes related items from R.Terms (uses pointer comparison, removal does not keep order)
// Sets related.R.Section.
func (o *Section) RemoveTerms(ctx context.Context, exec boil.ContextExecutor, related ...*Term) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SectionID, nil)
		if rel.R != nil {
			rel.R.Section = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("section_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Terms {
			if rel != ri {
				continue
			}

			ln := len(o.R.Terms)
			if ln > 1 && i < ln-1 {
				o.R.Terms[i] = o.R.Terms[ln-1]
			}
			o.R.Terms = o.R.Terms[:ln-1]
			break
		}
	}

	return nil
}

// Sections retrieves all the records using an executor.
func Sections(mods ...qm.QueryMod) sectionQuery {
	mods = append(mods, qm.From("\"sections\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sections\".*"})
	}

	return sectionQuery{q}
}

// FindSection retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSection(ctx context.Context, exec boil.ContextExecutor, sectionID int32, selectCols ...string) (*Section, error) {
	sectionObj := &Section{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sections\" where \"section_id\"=$1", sel,
	)

	q := queries.Raw(query, sectionID)

	err := q.Bind(ctx, exec, sectionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sections")
	}

	if err = sectionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sectionObj, err
	}

	return sectionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Section) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sections provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sectionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sectionInsertCacheMut.RLock()
	cache, cached := sectionInsertCache[key]
	sectionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sectionAllColumns,
			sectionColumnsWithDefault,
			sectionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sectionType, sectionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sectionType, sectionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sections\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sections\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sections")
	}

	if !cached {
		sectionInsertCacheMut.Lock()
		sectionInsertCache[key] = cache
		sectionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Section.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Section) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sectionUpdateCacheMut.RLock()
	cache, cached := sectionUpdateCache[key]
	sectionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sectionAllColumns,
			sectionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sections, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sections\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, sectionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sectionType, sectionMapping, append(wl, sectionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sections row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sections")
	}

	if !cached {
		sectionUpdateCacheMut.Lock()
		sectionUpdateCache[key] = cache
		sectionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sectionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sections")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SectionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, sectionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in section slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all section")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Section) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sections provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sectionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sectionUpsertCacheMut.RLock()
	cache, cached := sectionUpsertCache[key]
	sectionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sectionAllColumns,
			sectionColumnsWithDefault,
			sectionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sectionAllColumns,
			sectionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert sections, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(sectionPrimaryKeyColumns))
			copy(conflict, sectionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sections\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(sectionType, sectionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sectionType, sectionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert sections")
	}

	if !cached {
		sectionUpsertCacheMut.Lock()
		sectionUpsertCache[key] = cache
		sectionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Section record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Section) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Section provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sectionPrimaryKeyMapping)
	sql := "DELETE FROM \"sections\" WHERE \"section_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sections")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sectionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sectionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sections")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SectionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sectionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sections\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sectionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from section slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sections")
	}

	if len(sectionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Section) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSection(ctx, exec, o.SectionID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SectionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SectionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sections\".* FROM \"sections\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sectionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SectionSlice")
	}

	*o = slice

	return nil
}

// SectionExists checks if the Section row exists.
func SectionExists(ctx context.Context, exec boil.ContextExecutor, sectionID int32) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sections\" where \"section_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, sectionID)
	}
	row := exec.QueryRowContext(ctx, sql, sectionID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sections exists")
	}

	return exists, nil
}

// Exists checks if the Section row exists.
func (o *Section) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SectionExists(ctx, exec, o.SectionID)
}
