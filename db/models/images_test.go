// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testImages(t *testing.T) {
	t.Parallel()

	query := Images()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testImagesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Image{}
	if err = randomize.Struct(seed, o, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Images().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testImagesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Image{}
	if err = randomize.Struct(seed, o, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Images().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Images().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testImagesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Image{}
	if err = randomize.Struct(seed, o, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ImageSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Images().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testImagesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Image{}
	if err = randomize.Struct(seed, o, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ImageExists(ctx, tx, o.ImageID)
	if err != nil {
		t.Errorf("Unable to check if Image exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ImageExists to return true, but got false.")
	}
}

func testImagesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Image{}
	if err = randomize.Struct(seed, o, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	imageFound, err := FindImage(ctx, tx, o.ImageID)
	if err != nil {
		t.Error(err)
	}

	if imageFound == nil {
		t.Error("want a record, got nil")
	}
}

func testImagesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Image{}
	if err = randomize.Struct(seed, o, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Images().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testImagesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Image{}
	if err = randomize.Struct(seed, o, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Images().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testImagesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	imageOne := &Image{}
	imageTwo := &Image{}
	if err = randomize.Struct(seed, imageOne, imageDBTypes, false, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}
	if err = randomize.Struct(seed, imageTwo, imageDBTypes, false, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = imageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = imageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Images().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testImagesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	imageOne := &Image{}
	imageTwo := &Image{}
	if err = randomize.Struct(seed, imageOne, imageDBTypes, false, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}
	if err = randomize.Struct(seed, imageTwo, imageDBTypes, false, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = imageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = imageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Images().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func imageBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Image) error {
	*o = Image{}
	return nil
}

func imageAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Image) error {
	*o = Image{}
	return nil
}

func imageAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Image) error {
	*o = Image{}
	return nil
}

func imageBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Image) error {
	*o = Image{}
	return nil
}

func imageAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Image) error {
	*o = Image{}
	return nil
}

func imageBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Image) error {
	*o = Image{}
	return nil
}

func imageAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Image) error {
	*o = Image{}
	return nil
}

func imageBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Image) error {
	*o = Image{}
	return nil
}

func imageAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Image) error {
	*o = Image{}
	return nil
}

func testImagesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Image{}
	o := &Image{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, imageDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Image object: %s", err)
	}

	AddImageHook(boil.BeforeInsertHook, imageBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	imageBeforeInsertHooks = []ImageHook{}

	AddImageHook(boil.AfterInsertHook, imageAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	imageAfterInsertHooks = []ImageHook{}

	AddImageHook(boil.AfterSelectHook, imageAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	imageAfterSelectHooks = []ImageHook{}

	AddImageHook(boil.BeforeUpdateHook, imageBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	imageBeforeUpdateHooks = []ImageHook{}

	AddImageHook(boil.AfterUpdateHook, imageAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	imageAfterUpdateHooks = []ImageHook{}

	AddImageHook(boil.BeforeDeleteHook, imageBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	imageBeforeDeleteHooks = []ImageHook{}

	AddImageHook(boil.AfterDeleteHook, imageAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	imageAfterDeleteHooks = []ImageHook{}

	AddImageHook(boil.BeforeUpsertHook, imageBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	imageBeforeUpsertHooks = []ImageHook{}

	AddImageHook(boil.AfterUpsertHook, imageAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	imageAfterUpsertHooks = []ImageHook{}
}

func testImagesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Image{}
	if err = randomize.Struct(seed, o, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Images().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testImagesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Image{}
	if err = randomize.Struct(seed, o, imageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(imageColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Images().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testImageToManyChapterTerms(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Image
	var b, c ChapterTerm

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, chapterTermDBTypes, false, chapterTermColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, chapterTermDBTypes, false, chapterTermColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ImageID, a.ImageID)
	queries.Assign(&c.ImageID, a.ImageID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ChapterTerms().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ImageID, b.ImageID) {
			bFound = true
		}
		if queries.Equal(v.ImageID, c.ImageID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ImageSlice{&a}
	if err = a.L.LoadChapterTerms(ctx, tx, false, (*[]*Image)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ChapterTerms); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ChapterTerms = nil
	if err = a.L.LoadChapterTerms(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ChapterTerms); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testImageToManyDynamicTerms(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Image
	var b, c DynamicTerm

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dynamicTermDBTypes, false, dynamicTermColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dynamicTermDBTypes, false, dynamicTermColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ImageID, a.ImageID)
	queries.Assign(&c.ImageID, a.ImageID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DynamicTerms().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ImageID, b.ImageID) {
			bFound = true
		}
		if queries.Equal(v.ImageID, c.ImageID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ImageSlice{&a}
	if err = a.L.LoadDynamicTerms(ctx, tx, false, (*[]*Image)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DynamicTerms); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DynamicTerms = nil
	if err = a.L.LoadDynamicTerms(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DynamicTerms); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testImageToManyPageTerms(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Image
	var b, c PageTerm

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, pageTermDBTypes, false, pageTermColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pageTermDBTypes, false, pageTermColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ImageID, a.ImageID)
	queries.Assign(&c.ImageID, a.ImageID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PageTerms().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ImageID, b.ImageID) {
			bFound = true
		}
		if queries.Equal(v.ImageID, c.ImageID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ImageSlice{&a}
	if err = a.L.LoadPageTerms(ctx, tx, false, (*[]*Image)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PageTerms); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PageTerms = nil
	if err = a.L.LoadPageTerms(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PageTerms); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testImageToManySectionTerms(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Image
	var b, c SectionTerm

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, sectionTermDBTypes, false, sectionTermColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sectionTermDBTypes, false, sectionTermColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ImageID, a.ImageID)
	queries.Assign(&c.ImageID, a.ImageID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SectionTerms().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ImageID, b.ImageID) {
			bFound = true
		}
		if queries.Equal(v.ImageID, c.ImageID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ImageSlice{&a}
	if err = a.L.LoadSectionTerms(ctx, tx, false, (*[]*Image)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SectionTerms); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SectionTerms = nil
	if err = a.L.LoadSectionTerms(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SectionTerms); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testImageToManySections(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Image
	var b, c Section

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, sectionDBTypes, false, sectionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sectionDBTypes, false, sectionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ImageID, a.ImageID)
	queries.Assign(&c.ImageID, a.ImageID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Sections().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ImageID, b.ImageID) {
			bFound = true
		}
		if queries.Equal(v.ImageID, c.ImageID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ImageSlice{&a}
	if err = a.L.LoadSections(ctx, tx, false, (*[]*Image)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Sections); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Sections = nil
	if err = a.L.LoadSections(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Sections); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testImageToManyAddOpChapterTerms(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Image
	var b, c, d, e ChapterTerm

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ChapterTerm{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, chapterTermDBTypes, false, strmangle.SetComplement(chapterTermPrimaryKeyColumns, chapterTermColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ChapterTerm{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddChapterTerms(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ImageID, first.ImageID) {
			t.Error("foreign key was wrong value", a.ImageID, first.ImageID)
		}
		if !queries.Equal(a.ImageID, second.ImageID) {
			t.Error("foreign key was wrong value", a.ImageID, second.ImageID)
		}

		if first.R.Image != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Image != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ChapterTerms[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ChapterTerms[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ChapterTerms().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testImageToManySetOpChapterTerms(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Image
	var b, c, d, e ChapterTerm

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ChapterTerm{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, chapterTermDBTypes, false, strmangle.SetComplement(chapterTermPrimaryKeyColumns, chapterTermColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetChapterTerms(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ChapterTerms().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetChapterTerms(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ChapterTerms().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ImageID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ImageID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ImageID, d.ImageID) {
		t.Error("foreign key was wrong value", a.ImageID, d.ImageID)
	}
	if !queries.Equal(a.ImageID, e.ImageID) {
		t.Error("foreign key was wrong value", a.ImageID, e.ImageID)
	}

	if b.R.Image != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Image != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Image != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Image != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ChapterTerms[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ChapterTerms[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testImageToManyRemoveOpChapterTerms(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Image
	var b, c, d, e ChapterTerm

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ChapterTerm{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, chapterTermDBTypes, false, strmangle.SetComplement(chapterTermPrimaryKeyColumns, chapterTermColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddChapterTerms(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ChapterTerms().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveChapterTerms(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ChapterTerms().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ImageID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ImageID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Image != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Image != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Image != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Image != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ChapterTerms) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ChapterTerms[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ChapterTerms[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testImageToManyAddOpDynamicTerms(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Image
	var b, c, d, e DynamicTerm

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DynamicTerm{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dynamicTermDBTypes, false, strmangle.SetComplement(dynamicTermPrimaryKeyColumns, dynamicTermColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DynamicTerm{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDynamicTerms(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ImageID, first.ImageID) {
			t.Error("foreign key was wrong value", a.ImageID, first.ImageID)
		}
		if !queries.Equal(a.ImageID, second.ImageID) {
			t.Error("foreign key was wrong value", a.ImageID, second.ImageID)
		}

		if first.R.Image != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Image != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DynamicTerms[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DynamicTerms[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DynamicTerms().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testImageToManySetOpDynamicTerms(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Image
	var b, c, d, e DynamicTerm

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DynamicTerm{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dynamicTermDBTypes, false, strmangle.SetComplement(dynamicTermPrimaryKeyColumns, dynamicTermColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetDynamicTerms(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DynamicTerms().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetDynamicTerms(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DynamicTerms().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ImageID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ImageID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ImageID, d.ImageID) {
		t.Error("foreign key was wrong value", a.ImageID, d.ImageID)
	}
	if !queries.Equal(a.ImageID, e.ImageID) {
		t.Error("foreign key was wrong value", a.ImageID, e.ImageID)
	}

	if b.R.Image != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Image != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Image != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Image != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.DynamicTerms[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.DynamicTerms[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testImageToManyRemoveOpDynamicTerms(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Image
	var b, c, d, e DynamicTerm

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DynamicTerm{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dynamicTermDBTypes, false, strmangle.SetComplement(dynamicTermPrimaryKeyColumns, dynamicTermColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddDynamicTerms(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DynamicTerms().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveDynamicTerms(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DynamicTerms().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ImageID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ImageID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Image != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Image != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Image != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Image != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.DynamicTerms) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.DynamicTerms[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.DynamicTerms[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testImageToManyAddOpPageTerms(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Image
	var b, c, d, e PageTerm

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PageTerm{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pageTermDBTypes, false, strmangle.SetComplement(pageTermPrimaryKeyColumns, pageTermColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PageTerm{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPageTerms(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ImageID, first.ImageID) {
			t.Error("foreign key was wrong value", a.ImageID, first.ImageID)
		}
		if !queries.Equal(a.ImageID, second.ImageID) {
			t.Error("foreign key was wrong value", a.ImageID, second.ImageID)
		}

		if first.R.Image != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Image != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PageTerms[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PageTerms[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PageTerms().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testImageToManySetOpPageTerms(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Image
	var b, c, d, e PageTerm

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PageTerm{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pageTermDBTypes, false, strmangle.SetComplement(pageTermPrimaryKeyColumns, pageTermColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetPageTerms(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PageTerms().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPageTerms(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PageTerms().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ImageID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ImageID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ImageID, d.ImageID) {
		t.Error("foreign key was wrong value", a.ImageID, d.ImageID)
	}
	if !queries.Equal(a.ImageID, e.ImageID) {
		t.Error("foreign key was wrong value", a.ImageID, e.ImageID)
	}

	if b.R.Image != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Image != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Image != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Image != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.PageTerms[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.PageTerms[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testImageToManyRemoveOpPageTerms(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Image
	var b, c, d, e PageTerm

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PageTerm{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pageTermDBTypes, false, strmangle.SetComplement(pageTermPrimaryKeyColumns, pageTermColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddPageTerms(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PageTerms().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePageTerms(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PageTerms().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ImageID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ImageID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Image != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Image != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Image != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Image != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.PageTerms) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.PageTerms[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.PageTerms[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testImageToManyAddOpSectionTerms(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Image
	var b, c, d, e SectionTerm

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SectionTerm{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sectionTermDBTypes, false, strmangle.SetComplement(sectionTermPrimaryKeyColumns, sectionTermColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SectionTerm{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSectionTerms(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ImageID, first.ImageID) {
			t.Error("foreign key was wrong value", a.ImageID, first.ImageID)
		}
		if !queries.Equal(a.ImageID, second.ImageID) {
			t.Error("foreign key was wrong value", a.ImageID, second.ImageID)
		}

		if first.R.Image != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Image != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SectionTerms[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SectionTerms[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SectionTerms().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testImageToManySetOpSectionTerms(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Image
	var b, c, d, e SectionTerm

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SectionTerm{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sectionTermDBTypes, false, strmangle.SetComplement(sectionTermPrimaryKeyColumns, sectionTermColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetSectionTerms(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SectionTerms().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetSectionTerms(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SectionTerms().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ImageID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ImageID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ImageID, d.ImageID) {
		t.Error("foreign key was wrong value", a.ImageID, d.ImageID)
	}
	if !queries.Equal(a.ImageID, e.ImageID) {
		t.Error("foreign key was wrong value", a.ImageID, e.ImageID)
	}

	if b.R.Image != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Image != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Image != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Image != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.SectionTerms[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.SectionTerms[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testImageToManyRemoveOpSectionTerms(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Image
	var b, c, d, e SectionTerm

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SectionTerm{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sectionTermDBTypes, false, strmangle.SetComplement(sectionTermPrimaryKeyColumns, sectionTermColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddSectionTerms(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SectionTerms().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveSectionTerms(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SectionTerms().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ImageID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ImageID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Image != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Image != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Image != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Image != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.SectionTerms) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.SectionTerms[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.SectionTerms[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testImageToManyAddOpSections(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Image
	var b, c, d, e Section

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Section{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sectionDBTypes, false, strmangle.SetComplement(sectionPrimaryKeyColumns, sectionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Section{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSections(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ImageID, first.ImageID) {
			t.Error("foreign key was wrong value", a.ImageID, first.ImageID)
		}
		if !queries.Equal(a.ImageID, second.ImageID) {
			t.Error("foreign key was wrong value", a.ImageID, second.ImageID)
		}

		if first.R.Image != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Image != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Sections[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Sections[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Sections().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testImageToManySetOpSections(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Image
	var b, c, d, e Section

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Section{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sectionDBTypes, false, strmangle.SetComplement(sectionPrimaryKeyColumns, sectionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetSections(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Sections().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetSections(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Sections().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ImageID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ImageID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ImageID, d.ImageID) {
		t.Error("foreign key was wrong value", a.ImageID, d.ImageID)
	}
	if !queries.Equal(a.ImageID, e.ImageID) {
		t.Error("foreign key was wrong value", a.ImageID, e.ImageID)
	}

	if b.R.Image != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Image != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Image != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Image != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Sections[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Sections[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testImageToManyRemoveOpSections(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Image
	var b, c, d, e Section

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Section{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sectionDBTypes, false, strmangle.SetComplement(sectionPrimaryKeyColumns, sectionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddSections(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Sections().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveSections(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Sections().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ImageID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ImageID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Image != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Image != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Image != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Image != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Sections) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Sections[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Sections[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testImageToOneFolderUsingFolder(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Image
	var foreign Folder

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, folderDBTypes, false, folderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Folder struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.FolderID, foreign.FolderID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Folder().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.FolderID, foreign.FolderID) {
		t.Errorf("want: %v, got %v", foreign.FolderID, check.FolderID)
	}

	ranAfterSelectHook := false
	AddFolderHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Folder) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ImageSlice{&local}
	if err = local.L.LoadFolder(ctx, tx, false, (*[]*Image)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Folder == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Folder = nil
	if err = local.L.LoadFolder(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Folder == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testImageToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Image
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, imageDBTypes, false, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.UserID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.UserID != foreign.UserID {
		t.Errorf("want: %v, got %v", foreign.UserID, check.UserID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ImageSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*Image)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testImageToOneSetOpFolderUsingFolder(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Image
	var b, c Folder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, folderDBTypes, false, strmangle.SetComplement(folderPrimaryKeyColumns, folderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, folderDBTypes, false, strmangle.SetComplement(folderPrimaryKeyColumns, folderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Folder{&b, &c} {
		err = a.SetFolder(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Folder != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Images[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.FolderID, x.FolderID) {
			t.Error("foreign key was wrong value", a.FolderID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FolderID))
		reflect.Indirect(reflect.ValueOf(&a.FolderID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.FolderID, x.FolderID) {
			t.Error("foreign key was wrong value", a.FolderID, x.FolderID)
		}
	}
}

func testImageToOneRemoveOpFolderUsingFolder(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Image
	var b Folder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, folderDBTypes, false, strmangle.SetComplement(folderPrimaryKeyColumns, folderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetFolder(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveFolder(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Folder().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Folder != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.FolderID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Images) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testImageToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Image
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Images[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.UserID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.UserID {
			t.Error("foreign key was wrong value", a.UserID, x.UserID)
		}
	}
}

func testImagesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Image{}
	if err = randomize.Struct(seed, o, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testImagesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Image{}
	if err = randomize.Struct(seed, o, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ImageSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testImagesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Image{}
	if err = randomize.Struct(seed, o, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Images().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	imageDBTypes = map[string]string{`ImageID`: `integer`, `Name`: `character varying`, `UserID`: `text`, `FolderID`: `integer`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_            = bytes.MinRead
)

func testImagesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(imagePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(imageAllColumns) == len(imagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Image{}
	if err = randomize.Struct(seed, o, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Images().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, imageDBTypes, true, imagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testImagesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(imageAllColumns) == len(imagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Image{}
	if err = randomize.Struct(seed, o, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Images().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, imageDBTypes, true, imagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(imageAllColumns, imagePrimaryKeyColumns) {
		fields = imageAllColumns
	} else {
		fields = strmangle.SetComplement(
			imageAllColumns,
			imagePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ImageSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testImagesUpsert(t *testing.T) {
	t.Parallel()

	if len(imageAllColumns) == len(imagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Image{}
	if err = randomize.Struct(seed, &o, imageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Image: %s", err)
	}

	count, err := Images().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, imageDBTypes, false, imagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Image: %s", err)
	}

	count, err = Images().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
