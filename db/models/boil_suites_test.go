// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrations)
	t.Run("Chapters", testChapters)
	t.Run("Colors", testColors)
	t.Run("Dynamics", testDynamics)
	t.Run("DynamicsOnTags", testDynamicsOnTags)
	t.Run("Folders", testFolders)
	t.Run("Fonts", testFonts)
	t.Run("ImageOfCovers", testImageOfCovers)
	t.Run("Images", testImages)
	t.Run("Impressions", testImpressions)
	t.Run("Marks", testMarks)
	t.Run("Pages", testPages)
	t.Run("Sections", testSections)
	t.Run("Sorts", testSorts)
	t.Run("Tags", testTags)
	t.Run("Terms", testTerms)
	t.Run("Types", testTypes)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrationsDelete)
	t.Run("Chapters", testChaptersDelete)
	t.Run("Colors", testColorsDelete)
	t.Run("Dynamics", testDynamicsDelete)
	t.Run("DynamicsOnTags", testDynamicsOnTagsDelete)
	t.Run("Folders", testFoldersDelete)
	t.Run("Fonts", testFontsDelete)
	t.Run("ImageOfCovers", testImageOfCoversDelete)
	t.Run("Images", testImagesDelete)
	t.Run("Impressions", testImpressionsDelete)
	t.Run("Marks", testMarksDelete)
	t.Run("Pages", testPagesDelete)
	t.Run("Sections", testSectionsDelete)
	t.Run("Sorts", testSortsDelete)
	t.Run("Tags", testTagsDelete)
	t.Run("Terms", testTermsDelete)
	t.Run("Types", testTypesDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrationsQueryDeleteAll)
	t.Run("Chapters", testChaptersQueryDeleteAll)
	t.Run("Colors", testColorsQueryDeleteAll)
	t.Run("Dynamics", testDynamicsQueryDeleteAll)
	t.Run("DynamicsOnTags", testDynamicsOnTagsQueryDeleteAll)
	t.Run("Folders", testFoldersQueryDeleteAll)
	t.Run("Fonts", testFontsQueryDeleteAll)
	t.Run("ImageOfCovers", testImageOfCoversQueryDeleteAll)
	t.Run("Images", testImagesQueryDeleteAll)
	t.Run("Impressions", testImpressionsQueryDeleteAll)
	t.Run("Marks", testMarksQueryDeleteAll)
	t.Run("Pages", testPagesQueryDeleteAll)
	t.Run("Sections", testSectionsQueryDeleteAll)
	t.Run("Sorts", testSortsQueryDeleteAll)
	t.Run("Tags", testTagsQueryDeleteAll)
	t.Run("Terms", testTermsQueryDeleteAll)
	t.Run("Types", testTypesQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrationsSliceDeleteAll)
	t.Run("Chapters", testChaptersSliceDeleteAll)
	t.Run("Colors", testColorsSliceDeleteAll)
	t.Run("Dynamics", testDynamicsSliceDeleteAll)
	t.Run("DynamicsOnTags", testDynamicsOnTagsSliceDeleteAll)
	t.Run("Folders", testFoldersSliceDeleteAll)
	t.Run("Fonts", testFontsSliceDeleteAll)
	t.Run("ImageOfCovers", testImageOfCoversSliceDeleteAll)
	t.Run("Images", testImagesSliceDeleteAll)
	t.Run("Impressions", testImpressionsSliceDeleteAll)
	t.Run("Marks", testMarksSliceDeleteAll)
	t.Run("Pages", testPagesSliceDeleteAll)
	t.Run("Sections", testSectionsSliceDeleteAll)
	t.Run("Sorts", testSortsSliceDeleteAll)
	t.Run("Tags", testTagsSliceDeleteAll)
	t.Run("Terms", testTermsSliceDeleteAll)
	t.Run("Types", testTypesSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrationsExists)
	t.Run("Chapters", testChaptersExists)
	t.Run("Colors", testColorsExists)
	t.Run("Dynamics", testDynamicsExists)
	t.Run("DynamicsOnTags", testDynamicsOnTagsExists)
	t.Run("Folders", testFoldersExists)
	t.Run("Fonts", testFontsExists)
	t.Run("ImageOfCovers", testImageOfCoversExists)
	t.Run("Images", testImagesExists)
	t.Run("Impressions", testImpressionsExists)
	t.Run("Marks", testMarksExists)
	t.Run("Pages", testPagesExists)
	t.Run("Sections", testSectionsExists)
	t.Run("Sorts", testSortsExists)
	t.Run("Tags", testTagsExists)
	t.Run("Terms", testTermsExists)
	t.Run("Types", testTypesExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrationsFind)
	t.Run("Chapters", testChaptersFind)
	t.Run("Colors", testColorsFind)
	t.Run("Dynamics", testDynamicsFind)
	t.Run("DynamicsOnTags", testDynamicsOnTagsFind)
	t.Run("Folders", testFoldersFind)
	t.Run("Fonts", testFontsFind)
	t.Run("ImageOfCovers", testImageOfCoversFind)
	t.Run("Images", testImagesFind)
	t.Run("Impressions", testImpressionsFind)
	t.Run("Marks", testMarksFind)
	t.Run("Pages", testPagesFind)
	t.Run("Sections", testSectionsFind)
	t.Run("Sorts", testSortsFind)
	t.Run("Tags", testTagsFind)
	t.Run("Terms", testTermsFind)
	t.Run("Types", testTypesFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrationsBind)
	t.Run("Chapters", testChaptersBind)
	t.Run("Colors", testColorsBind)
	t.Run("Dynamics", testDynamicsBind)
	t.Run("DynamicsOnTags", testDynamicsOnTagsBind)
	t.Run("Folders", testFoldersBind)
	t.Run("Fonts", testFontsBind)
	t.Run("ImageOfCovers", testImageOfCoversBind)
	t.Run("Images", testImagesBind)
	t.Run("Impressions", testImpressionsBind)
	t.Run("Marks", testMarksBind)
	t.Run("Pages", testPagesBind)
	t.Run("Sections", testSectionsBind)
	t.Run("Sorts", testSortsBind)
	t.Run("Tags", testTagsBind)
	t.Run("Terms", testTermsBind)
	t.Run("Types", testTypesBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrationsOne)
	t.Run("Chapters", testChaptersOne)
	t.Run("Colors", testColorsOne)
	t.Run("Dynamics", testDynamicsOne)
	t.Run("DynamicsOnTags", testDynamicsOnTagsOne)
	t.Run("Folders", testFoldersOne)
	t.Run("Fonts", testFontsOne)
	t.Run("ImageOfCovers", testImageOfCoversOne)
	t.Run("Images", testImagesOne)
	t.Run("Impressions", testImpressionsOne)
	t.Run("Marks", testMarksOne)
	t.Run("Pages", testPagesOne)
	t.Run("Sections", testSectionsOne)
	t.Run("Sorts", testSortsOne)
	t.Run("Tags", testTagsOne)
	t.Run("Terms", testTermsOne)
	t.Run("Types", testTypesOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrationsAll)
	t.Run("Chapters", testChaptersAll)
	t.Run("Colors", testColorsAll)
	t.Run("Dynamics", testDynamicsAll)
	t.Run("DynamicsOnTags", testDynamicsOnTagsAll)
	t.Run("Folders", testFoldersAll)
	t.Run("Fonts", testFontsAll)
	t.Run("ImageOfCovers", testImageOfCoversAll)
	t.Run("Images", testImagesAll)
	t.Run("Impressions", testImpressionsAll)
	t.Run("Marks", testMarksAll)
	t.Run("Pages", testPagesAll)
	t.Run("Sections", testSectionsAll)
	t.Run("Sorts", testSortsAll)
	t.Run("Tags", testTagsAll)
	t.Run("Terms", testTermsAll)
	t.Run("Types", testTypesAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrationsCount)
	t.Run("Chapters", testChaptersCount)
	t.Run("Colors", testColorsCount)
	t.Run("Dynamics", testDynamicsCount)
	t.Run("DynamicsOnTags", testDynamicsOnTagsCount)
	t.Run("Folders", testFoldersCount)
	t.Run("Fonts", testFontsCount)
	t.Run("ImageOfCovers", testImageOfCoversCount)
	t.Run("Images", testImagesCount)
	t.Run("Impressions", testImpressionsCount)
	t.Run("Marks", testMarksCount)
	t.Run("Pages", testPagesCount)
	t.Run("Sections", testSectionsCount)
	t.Run("Sorts", testSortsCount)
	t.Run("Tags", testTagsCount)
	t.Run("Terms", testTermsCount)
	t.Run("Types", testTypesCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrationsHooks)
	t.Run("Chapters", testChaptersHooks)
	t.Run("Colors", testColorsHooks)
	t.Run("Dynamics", testDynamicsHooks)
	t.Run("DynamicsOnTags", testDynamicsOnTagsHooks)
	t.Run("Folders", testFoldersHooks)
	t.Run("Fonts", testFontsHooks)
	t.Run("ImageOfCovers", testImageOfCoversHooks)
	t.Run("Images", testImagesHooks)
	t.Run("Impressions", testImpressionsHooks)
	t.Run("Marks", testMarksHooks)
	t.Run("Pages", testPagesHooks)
	t.Run("Sections", testSectionsHooks)
	t.Run("Sorts", testSortsHooks)
	t.Run("Tags", testTagsHooks)
	t.Run("Terms", testTermsHooks)
	t.Run("Types", testTypesHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrationsInsert)
	t.Run("PrismaMigrations", testPrismaMigrationsInsertWhitelist)
	t.Run("Chapters", testChaptersInsert)
	t.Run("Chapters", testChaptersInsertWhitelist)
	t.Run("Colors", testColorsInsert)
	t.Run("Colors", testColorsInsertWhitelist)
	t.Run("Dynamics", testDynamicsInsert)
	t.Run("Dynamics", testDynamicsInsertWhitelist)
	t.Run("DynamicsOnTags", testDynamicsOnTagsInsert)
	t.Run("DynamicsOnTags", testDynamicsOnTagsInsertWhitelist)
	t.Run("Folders", testFoldersInsert)
	t.Run("Folders", testFoldersInsertWhitelist)
	t.Run("Fonts", testFontsInsert)
	t.Run("Fonts", testFontsInsertWhitelist)
	t.Run("ImageOfCovers", testImageOfCoversInsert)
	t.Run("ImageOfCovers", testImageOfCoversInsertWhitelist)
	t.Run("Images", testImagesInsert)
	t.Run("Images", testImagesInsertWhitelist)
	t.Run("Impressions", testImpressionsInsert)
	t.Run("Impressions", testImpressionsInsertWhitelist)
	t.Run("Marks", testMarksInsert)
	t.Run("Marks", testMarksInsertWhitelist)
	t.Run("Pages", testPagesInsert)
	t.Run("Pages", testPagesInsertWhitelist)
	t.Run("Sections", testSectionsInsert)
	t.Run("Sections", testSectionsInsertWhitelist)
	t.Run("Sorts", testSortsInsert)
	t.Run("Sorts", testSortsInsertWhitelist)
	t.Run("Tags", testTagsInsert)
	t.Run("Tags", testTagsInsertWhitelist)
	t.Run("Terms", testTermsInsert)
	t.Run("Terms", testTermsInsertWhitelist)
	t.Run("Types", testTypesInsert)
	t.Run("Types", testTypesInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("ChapterToDynamicUsingDynamic", testChapterToOneDynamicUsingDynamic)
	t.Run("DynamicToUserUsingUser", testDynamicToOneUserUsingUser)
	t.Run("DynamicsOnTagToDynamicUsingDynamic", testDynamicsOnTagToOneDynamicUsingDynamic)
	t.Run("DynamicsOnTagToTagUsingTag", testDynamicsOnTagToOneTagUsingTag)
	t.Run("FolderToFolderUsingParent", testFolderToOneFolderUsingParent)
	t.Run("FolderToUserUsingUser", testFolderToOneUserUsingUser)
	t.Run("ImageOfCoverToDynamicUsingDynamic", testImageOfCoverToOneDynamicUsingDynamic)
	t.Run("ImageOfCoverToUserUsingUser", testImageOfCoverToOneUserUsingUser)
	t.Run("ImageToFolderUsingFolder", testImageToOneFolderUsingFolder)
	t.Run("ImageToUserUsingUser", testImageToOneUserUsingUser)
	t.Run("ImpressionToDynamicUsingDynamic", testImpressionToOneDynamicUsingDynamic)
	t.Run("ImpressionToUserUsingUser", testImpressionToOneUserUsingUser)
	t.Run("MarkToDynamicUsingDynamic", testMarkToOneDynamicUsingDynamic)
	t.Run("MarkToUserUsingUser", testMarkToOneUserUsingUser)
	t.Run("PageToChapterUsingChapter", testPageToOneChapterUsingChapter)
	t.Run("SectionToFontUsingFont", testSectionToOneFontUsingFont)
	t.Run("SectionToColorUsingFrameColor", testSectionToOneColorUsingFrameColor)
	t.Run("SectionToImageUsingImage", testSectionToOneImageUsingImage)
	t.Run("SectionToPageUsingPage", testSectionToOnePageUsingPage)
	t.Run("SectionToColorUsingTextColor", testSectionToOneColorUsingTextColor)
	t.Run("SectionToTypeUsingType", testSectionToOneTypeUsingType)
	t.Run("TermToChapterUsingChapter", testTermToOneChapterUsingChapter)
	t.Run("TermToDynamicUsingDynamic", testTermToOneDynamicUsingDynamic)
	t.Run("TermToImageUsingImage", testTermToOneImageUsingImage)
	t.Run("TermToPageUsingPage", testTermToOnePageUsingPage)
	t.Run("TermToSectionUsingSection", testTermToOneSectionUsingSection)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {
	t.Run("DynamicToImageOfCoverUsingImageOfCover", testDynamicOneToOneImageOfCoverUsingImageOfCover)
}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("ChapterToPages", testChapterToManyPages)
	t.Run("ChapterToTerms", testChapterToManyTerms)
	t.Run("ColorToFrameColorSections", testColorToManyFrameColorSections)
	t.Run("ColorToTextColorSections", testColorToManyTextColorSections)
	t.Run("DynamicToChapters", testDynamicToManyChapters)
	t.Run("DynamicToDynamicsOnTags", testDynamicToManyDynamicsOnTags)
	t.Run("DynamicToImpressions", testDynamicToManyImpressions)
	t.Run("DynamicToMarks", testDynamicToManyMarks)
	t.Run("DynamicToTerms", testDynamicToManyTerms)
	t.Run("FolderToParentFolders", testFolderToManyParentFolders)
	t.Run("FolderToImages", testFolderToManyImages)
	t.Run("FontToSections", testFontToManySections)
	t.Run("ImageToSections", testImageToManySections)
	t.Run("ImageToTerms", testImageToManyTerms)
	t.Run("PageToSections", testPageToManySections)
	t.Run("PageToTerms", testPageToManyTerms)
	t.Run("SectionToTerms", testSectionToManyTerms)
	t.Run("TagToDynamicsOnTags", testTagToManyDynamicsOnTags)
	t.Run("TypeToSections", testTypeToManySections)
	t.Run("UserToDynamics", testUserToManyDynamics)
	t.Run("UserToFolders", testUserToManyFolders)
	t.Run("UserToImageOfCovers", testUserToManyImageOfCovers)
	t.Run("UserToImages", testUserToManyImages)
	t.Run("UserToImpressions", testUserToManyImpressions)
	t.Run("UserToMarks", testUserToManyMarks)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("ChapterToDynamicUsingChapters", testChapterToOneSetOpDynamicUsingDynamic)
	t.Run("DynamicToUserUsingDynamics", testDynamicToOneSetOpUserUsingUser)
	t.Run("DynamicsOnTagToDynamicUsingDynamicsOnTags", testDynamicsOnTagToOneSetOpDynamicUsingDynamic)
	t.Run("DynamicsOnTagToTagUsingDynamicsOnTags", testDynamicsOnTagToOneSetOpTagUsingTag)
	t.Run("FolderToFolderUsingParentFolders", testFolderToOneSetOpFolderUsingParent)
	t.Run("FolderToUserUsingFolders", testFolderToOneSetOpUserUsingUser)
	t.Run("ImageOfCoverToDynamicUsingImageOfCover", testImageOfCoverToOneSetOpDynamicUsingDynamic)
	t.Run("ImageOfCoverToUserUsingImageOfCovers", testImageOfCoverToOneSetOpUserUsingUser)
	t.Run("ImageToFolderUsingImages", testImageToOneSetOpFolderUsingFolder)
	t.Run("ImageToUserUsingImages", testImageToOneSetOpUserUsingUser)
	t.Run("ImpressionToDynamicUsingImpressions", testImpressionToOneSetOpDynamicUsingDynamic)
	t.Run("ImpressionToUserUsingImpressions", testImpressionToOneSetOpUserUsingUser)
	t.Run("MarkToDynamicUsingMarks", testMarkToOneSetOpDynamicUsingDynamic)
	t.Run("MarkToUserUsingMarks", testMarkToOneSetOpUserUsingUser)
	t.Run("PageToChapterUsingPages", testPageToOneSetOpChapterUsingChapter)
	t.Run("SectionToFontUsingSections", testSectionToOneSetOpFontUsingFont)
	t.Run("SectionToColorUsingFrameColorSections", testSectionToOneSetOpColorUsingFrameColor)
	t.Run("SectionToImageUsingSections", testSectionToOneSetOpImageUsingImage)
	t.Run("SectionToPageUsingSections", testSectionToOneSetOpPageUsingPage)
	t.Run("SectionToColorUsingTextColorSections", testSectionToOneSetOpColorUsingTextColor)
	t.Run("SectionToTypeUsingSections", testSectionToOneSetOpTypeUsingType)
	t.Run("TermToChapterUsingTerms", testTermToOneSetOpChapterUsingChapter)
	t.Run("TermToDynamicUsingTerms", testTermToOneSetOpDynamicUsingDynamic)
	t.Run("TermToImageUsingTerms", testTermToOneSetOpImageUsingImage)
	t.Run("TermToPageUsingTerms", testTermToOneSetOpPageUsingPage)
	t.Run("TermToSectionUsingTerms", testTermToOneSetOpSectionUsingSection)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("FolderToFolderUsingParentFolders", testFolderToOneRemoveOpFolderUsingParent)
	t.Run("ImageToFolderUsingImages", testImageToOneRemoveOpFolderUsingFolder)
	t.Run("SectionToImageUsingSections", testSectionToOneRemoveOpImageUsingImage)
	t.Run("TermToChapterUsingTerms", testTermToOneRemoveOpChapterUsingChapter)
	t.Run("TermToDynamicUsingTerms", testTermToOneRemoveOpDynamicUsingDynamic)
	t.Run("TermToImageUsingTerms", testTermToOneRemoveOpImageUsingImage)
	t.Run("TermToPageUsingTerms", testTermToOneRemoveOpPageUsingPage)
	t.Run("TermToSectionUsingTerms", testTermToOneRemoveOpSectionUsingSection)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {
	t.Run("DynamicToImageOfCoverUsingImageOfCover", testDynamicOneToOneSetOpImageOfCoverUsingImageOfCover)
}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("ChapterToPages", testChapterToManyAddOpPages)
	t.Run("ChapterToTerms", testChapterToManyAddOpTerms)
	t.Run("ColorToFrameColorSections", testColorToManyAddOpFrameColorSections)
	t.Run("ColorToTextColorSections", testColorToManyAddOpTextColorSections)
	t.Run("DynamicToChapters", testDynamicToManyAddOpChapters)
	t.Run("DynamicToDynamicsOnTags", testDynamicToManyAddOpDynamicsOnTags)
	t.Run("DynamicToImpressions", testDynamicToManyAddOpImpressions)
	t.Run("DynamicToMarks", testDynamicToManyAddOpMarks)
	t.Run("DynamicToTerms", testDynamicToManyAddOpTerms)
	t.Run("FolderToParentFolders", testFolderToManyAddOpParentFolders)
	t.Run("FolderToImages", testFolderToManyAddOpImages)
	t.Run("FontToSections", testFontToManyAddOpSections)
	t.Run("ImageToSections", testImageToManyAddOpSections)
	t.Run("ImageToTerms", testImageToManyAddOpTerms)
	t.Run("PageToSections", testPageToManyAddOpSections)
	t.Run("PageToTerms", testPageToManyAddOpTerms)
	t.Run("SectionToTerms", testSectionToManyAddOpTerms)
	t.Run("TagToDynamicsOnTags", testTagToManyAddOpDynamicsOnTags)
	t.Run("TypeToSections", testTypeToManyAddOpSections)
	t.Run("UserToDynamics", testUserToManyAddOpDynamics)
	t.Run("UserToFolders", testUserToManyAddOpFolders)
	t.Run("UserToImageOfCovers", testUserToManyAddOpImageOfCovers)
	t.Run("UserToImages", testUserToManyAddOpImages)
	t.Run("UserToImpressions", testUserToManyAddOpImpressions)
	t.Run("UserToMarks", testUserToManyAddOpMarks)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("ChapterToTerms", testChapterToManySetOpTerms)
	t.Run("DynamicToTerms", testDynamicToManySetOpTerms)
	t.Run("FolderToParentFolders", testFolderToManySetOpParentFolders)
	t.Run("FolderToImages", testFolderToManySetOpImages)
	t.Run("ImageToSections", testImageToManySetOpSections)
	t.Run("ImageToTerms", testImageToManySetOpTerms)
	t.Run("PageToTerms", testPageToManySetOpTerms)
	t.Run("SectionToTerms", testSectionToManySetOpTerms)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("ChapterToTerms", testChapterToManyRemoveOpTerms)
	t.Run("DynamicToTerms", testDynamicToManyRemoveOpTerms)
	t.Run("FolderToParentFolders", testFolderToManyRemoveOpParentFolders)
	t.Run("FolderToImages", testFolderToManyRemoveOpImages)
	t.Run("ImageToSections", testImageToManyRemoveOpSections)
	t.Run("ImageToTerms", testImageToManyRemoveOpTerms)
	t.Run("PageToTerms", testPageToManyRemoveOpTerms)
	t.Run("SectionToTerms", testSectionToManyRemoveOpTerms)
}

func TestReload(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrationsReload)
	t.Run("Chapters", testChaptersReload)
	t.Run("Colors", testColorsReload)
	t.Run("Dynamics", testDynamicsReload)
	t.Run("DynamicsOnTags", testDynamicsOnTagsReload)
	t.Run("Folders", testFoldersReload)
	t.Run("Fonts", testFontsReload)
	t.Run("ImageOfCovers", testImageOfCoversReload)
	t.Run("Images", testImagesReload)
	t.Run("Impressions", testImpressionsReload)
	t.Run("Marks", testMarksReload)
	t.Run("Pages", testPagesReload)
	t.Run("Sections", testSectionsReload)
	t.Run("Sorts", testSortsReload)
	t.Run("Tags", testTagsReload)
	t.Run("Terms", testTermsReload)
	t.Run("Types", testTypesReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrationsReloadAll)
	t.Run("Chapters", testChaptersReloadAll)
	t.Run("Colors", testColorsReloadAll)
	t.Run("Dynamics", testDynamicsReloadAll)
	t.Run("DynamicsOnTags", testDynamicsOnTagsReloadAll)
	t.Run("Folders", testFoldersReloadAll)
	t.Run("Fonts", testFontsReloadAll)
	t.Run("ImageOfCovers", testImageOfCoversReloadAll)
	t.Run("Images", testImagesReloadAll)
	t.Run("Impressions", testImpressionsReloadAll)
	t.Run("Marks", testMarksReloadAll)
	t.Run("Pages", testPagesReloadAll)
	t.Run("Sections", testSectionsReloadAll)
	t.Run("Sorts", testSortsReloadAll)
	t.Run("Tags", testTagsReloadAll)
	t.Run("Terms", testTermsReloadAll)
	t.Run("Types", testTypesReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrationsSelect)
	t.Run("Chapters", testChaptersSelect)
	t.Run("Colors", testColorsSelect)
	t.Run("Dynamics", testDynamicsSelect)
	t.Run("DynamicsOnTags", testDynamicsOnTagsSelect)
	t.Run("Folders", testFoldersSelect)
	t.Run("Fonts", testFontsSelect)
	t.Run("ImageOfCovers", testImageOfCoversSelect)
	t.Run("Images", testImagesSelect)
	t.Run("Impressions", testImpressionsSelect)
	t.Run("Marks", testMarksSelect)
	t.Run("Pages", testPagesSelect)
	t.Run("Sections", testSectionsSelect)
	t.Run("Sorts", testSortsSelect)
	t.Run("Tags", testTagsSelect)
	t.Run("Terms", testTermsSelect)
	t.Run("Types", testTypesSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrationsUpdate)
	t.Run("Chapters", testChaptersUpdate)
	t.Run("Colors", testColorsUpdate)
	t.Run("Dynamics", testDynamicsUpdate)
	t.Run("DynamicsOnTags", testDynamicsOnTagsUpdate)
	t.Run("Folders", testFoldersUpdate)
	t.Run("Fonts", testFontsUpdate)
	t.Run("ImageOfCovers", testImageOfCoversUpdate)
	t.Run("Images", testImagesUpdate)
	t.Run("Impressions", testImpressionsUpdate)
	t.Run("Marks", testMarksUpdate)
	t.Run("Pages", testPagesUpdate)
	t.Run("Sections", testSectionsUpdate)
	t.Run("Sorts", testSortsUpdate)
	t.Run("Tags", testTagsUpdate)
	t.Run("Terms", testTermsUpdate)
	t.Run("Types", testTypesUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("PrismaMigrations", testPrismaMigrationsSliceUpdateAll)
	t.Run("Chapters", testChaptersSliceUpdateAll)
	t.Run("Colors", testColorsSliceUpdateAll)
	t.Run("Dynamics", testDynamicsSliceUpdateAll)
	t.Run("DynamicsOnTags", testDynamicsOnTagsSliceUpdateAll)
	t.Run("Folders", testFoldersSliceUpdateAll)
	t.Run("Fonts", testFontsSliceUpdateAll)
	t.Run("ImageOfCovers", testImageOfCoversSliceUpdateAll)
	t.Run("Images", testImagesSliceUpdateAll)
	t.Run("Impressions", testImpressionsSliceUpdateAll)
	t.Run("Marks", testMarksSliceUpdateAll)
	t.Run("Pages", testPagesSliceUpdateAll)
	t.Run("Sections", testSectionsSliceUpdateAll)
	t.Run("Sorts", testSortsSliceUpdateAll)
	t.Run("Tags", testTagsSliceUpdateAll)
	t.Run("Terms", testTermsSliceUpdateAll)
	t.Run("Types", testTypesSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
