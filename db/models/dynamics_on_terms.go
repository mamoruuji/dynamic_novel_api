// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DynamicsOnTerm is an object representing the database table.
type DynamicsOnTerm struct {
	DynamicsOnTermsID int       `boil:"dynamics_on_terms_id" json:"dynamics_on_terms_id" toml:"dynamics_on_terms_id" yaml:"dynamics_on_terms_id"`
	DynamicID         int       `boil:"dynamic_id" json:"dynamic_id" toml:"dynamic_id" yaml:"dynamic_id"`
	TermID            int       `boil:"term_id" json:"term_id" toml:"term_id" yaml:"term_id"`
	CreatedAt         time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt         time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *dynamicsOnTermR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dynamicsOnTermL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DynamicsOnTermColumns = struct {
	DynamicsOnTermsID string
	DynamicID         string
	TermID            string
	CreatedAt         string
	UpdatedAt         string
}{
	DynamicsOnTermsID: "dynamics_on_terms_id",
	DynamicID:         "dynamic_id",
	TermID:            "term_id",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
}

var DynamicsOnTermTableColumns = struct {
	DynamicsOnTermsID string
	DynamicID         string
	TermID            string
	CreatedAt         string
	UpdatedAt         string
}{
	DynamicsOnTermsID: "dynamics_on_terms.dynamics_on_terms_id",
	DynamicID:         "dynamics_on_terms.dynamic_id",
	TermID:            "dynamics_on_terms.term_id",
	CreatedAt:         "dynamics_on_terms.created_at",
	UpdatedAt:         "dynamics_on_terms.updated_at",
}

// Generated where

var DynamicsOnTermWhere = struct {
	DynamicsOnTermsID whereHelperint
	DynamicID         whereHelperint
	TermID            whereHelperint
	CreatedAt         whereHelpertime_Time
	UpdatedAt         whereHelpertime_Time
}{
	DynamicsOnTermsID: whereHelperint{field: "\"dynamics_on_terms\".\"dynamics_on_terms_id\""},
	DynamicID:         whereHelperint{field: "\"dynamics_on_terms\".\"dynamic_id\""},
	TermID:            whereHelperint{field: "\"dynamics_on_terms\".\"term_id\""},
	CreatedAt:         whereHelpertime_Time{field: "\"dynamics_on_terms\".\"created_at\""},
	UpdatedAt:         whereHelpertime_Time{field: "\"dynamics_on_terms\".\"updated_at\""},
}

// DynamicsOnTermRels is where relationship names are stored.
var DynamicsOnTermRels = struct {
	Dynamic string
	Term    string
}{
	Dynamic: "Dynamic",
	Term:    "Term",
}

// dynamicsOnTermR is where relationships are stored.
type dynamicsOnTermR struct {
	Dynamic *Dynamic `boil:"Dynamic" json:"Dynamic" toml:"Dynamic" yaml:"Dynamic"`
	Term    *Term    `boil:"Term" json:"Term" toml:"Term" yaml:"Term"`
}

// NewStruct creates a new relationship struct
func (*dynamicsOnTermR) NewStruct() *dynamicsOnTermR {
	return &dynamicsOnTermR{}
}

func (r *dynamicsOnTermR) GetDynamic() *Dynamic {
	if r == nil {
		return nil
	}
	return r.Dynamic
}

func (r *dynamicsOnTermR) GetTerm() *Term {
	if r == nil {
		return nil
	}
	return r.Term
}

// dynamicsOnTermL is where Load methods for each relationship are stored.
type dynamicsOnTermL struct{}

var (
	dynamicsOnTermAllColumns            = []string{"dynamics_on_terms_id", "dynamic_id", "term_id", "created_at", "updated_at"}
	dynamicsOnTermColumnsWithoutDefault = []string{"dynamic_id", "term_id", "updated_at"}
	dynamicsOnTermColumnsWithDefault    = []string{"dynamics_on_terms_id", "created_at"}
	dynamicsOnTermPrimaryKeyColumns     = []string{"dynamics_on_terms_id"}
	dynamicsOnTermGeneratedColumns      = []string{}
)

type (
	// DynamicsOnTermSlice is an alias for a slice of pointers to DynamicsOnTerm.
	// This should almost always be used instead of []DynamicsOnTerm.
	DynamicsOnTermSlice []*DynamicsOnTerm
	// DynamicsOnTermHook is the signature for custom DynamicsOnTerm hook methods
	DynamicsOnTermHook func(context.Context, boil.ContextExecutor, *DynamicsOnTerm) error

	dynamicsOnTermQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dynamicsOnTermType                 = reflect.TypeOf(&DynamicsOnTerm{})
	dynamicsOnTermMapping              = queries.MakeStructMapping(dynamicsOnTermType)
	dynamicsOnTermPrimaryKeyMapping, _ = queries.BindMapping(dynamicsOnTermType, dynamicsOnTermMapping, dynamicsOnTermPrimaryKeyColumns)
	dynamicsOnTermInsertCacheMut       sync.RWMutex
	dynamicsOnTermInsertCache          = make(map[string]insertCache)
	dynamicsOnTermUpdateCacheMut       sync.RWMutex
	dynamicsOnTermUpdateCache          = make(map[string]updateCache)
	dynamicsOnTermUpsertCacheMut       sync.RWMutex
	dynamicsOnTermUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dynamicsOnTermAfterSelectHooks []DynamicsOnTermHook

var dynamicsOnTermBeforeInsertHooks []DynamicsOnTermHook
var dynamicsOnTermAfterInsertHooks []DynamicsOnTermHook

var dynamicsOnTermBeforeUpdateHooks []DynamicsOnTermHook
var dynamicsOnTermAfterUpdateHooks []DynamicsOnTermHook

var dynamicsOnTermBeforeDeleteHooks []DynamicsOnTermHook
var dynamicsOnTermAfterDeleteHooks []DynamicsOnTermHook

var dynamicsOnTermBeforeUpsertHooks []DynamicsOnTermHook
var dynamicsOnTermAfterUpsertHooks []DynamicsOnTermHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DynamicsOnTerm) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicsOnTermAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DynamicsOnTerm) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicsOnTermBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DynamicsOnTerm) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicsOnTermAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DynamicsOnTerm) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicsOnTermBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DynamicsOnTerm) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicsOnTermAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DynamicsOnTerm) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicsOnTermBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DynamicsOnTerm) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicsOnTermAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DynamicsOnTerm) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicsOnTermBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DynamicsOnTerm) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicsOnTermAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDynamicsOnTermHook registers your hook function for all future operations.
func AddDynamicsOnTermHook(hookPoint boil.HookPoint, dynamicsOnTermHook DynamicsOnTermHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dynamicsOnTermAfterSelectHooks = append(dynamicsOnTermAfterSelectHooks, dynamicsOnTermHook)
	case boil.BeforeInsertHook:
		dynamicsOnTermBeforeInsertHooks = append(dynamicsOnTermBeforeInsertHooks, dynamicsOnTermHook)
	case boil.AfterInsertHook:
		dynamicsOnTermAfterInsertHooks = append(dynamicsOnTermAfterInsertHooks, dynamicsOnTermHook)
	case boil.BeforeUpdateHook:
		dynamicsOnTermBeforeUpdateHooks = append(dynamicsOnTermBeforeUpdateHooks, dynamicsOnTermHook)
	case boil.AfterUpdateHook:
		dynamicsOnTermAfterUpdateHooks = append(dynamicsOnTermAfterUpdateHooks, dynamicsOnTermHook)
	case boil.BeforeDeleteHook:
		dynamicsOnTermBeforeDeleteHooks = append(dynamicsOnTermBeforeDeleteHooks, dynamicsOnTermHook)
	case boil.AfterDeleteHook:
		dynamicsOnTermAfterDeleteHooks = append(dynamicsOnTermAfterDeleteHooks, dynamicsOnTermHook)
	case boil.BeforeUpsertHook:
		dynamicsOnTermBeforeUpsertHooks = append(dynamicsOnTermBeforeUpsertHooks, dynamicsOnTermHook)
	case boil.AfterUpsertHook:
		dynamicsOnTermAfterUpsertHooks = append(dynamicsOnTermAfterUpsertHooks, dynamicsOnTermHook)
	}
}

// One returns a single dynamicsOnTerm record from the query.
func (q dynamicsOnTermQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DynamicsOnTerm, error) {
	o := &DynamicsOnTerm{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for dynamics_on_terms")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DynamicsOnTerm records from the query.
func (q dynamicsOnTermQuery) All(ctx context.Context, exec boil.ContextExecutor) (DynamicsOnTermSlice, error) {
	var o []*DynamicsOnTerm

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DynamicsOnTerm slice")
	}

	if len(dynamicsOnTermAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DynamicsOnTerm records in the query.
func (q dynamicsOnTermQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count dynamics_on_terms rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dynamicsOnTermQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if dynamics_on_terms exists")
	}

	return count > 0, nil
}

// Dynamic pointed to by the foreign key.
func (o *DynamicsOnTerm) Dynamic(mods ...qm.QueryMod) dynamicQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"dynamic_id\" = ?", o.DynamicID),
	}

	queryMods = append(queryMods, mods...)

	return Dynamics(queryMods...)
}

// Term pointed to by the foreign key.
func (o *DynamicsOnTerm) Term(mods ...qm.QueryMod) termQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"term_id\" = ?", o.TermID),
	}

	queryMods = append(queryMods, mods...)

	return Terms(queryMods...)
}

// LoadDynamic allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dynamicsOnTermL) LoadDynamic(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDynamicsOnTerm interface{}, mods queries.Applicator) error {
	var slice []*DynamicsOnTerm
	var object *DynamicsOnTerm

	if singular {
		var ok bool
		object, ok = maybeDynamicsOnTerm.(*DynamicsOnTerm)
		if !ok {
			object = new(DynamicsOnTerm)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDynamicsOnTerm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDynamicsOnTerm))
			}
		}
	} else {
		s, ok := maybeDynamicsOnTerm.(*[]*DynamicsOnTerm)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDynamicsOnTerm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDynamicsOnTerm))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dynamicsOnTermR{}
		}
		args = append(args, object.DynamicID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dynamicsOnTermR{}
			}

			for _, a := range args {
				if a == obj.DynamicID {
					continue Outer
				}
			}

			args = append(args, obj.DynamicID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dynamics`),
		qm.WhereIn(`dynamics.dynamic_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Dynamic")
	}

	var resultSlice []*Dynamic
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Dynamic")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dynamics")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dynamics")
	}

	if len(dynamicAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Dynamic = foreign
		if foreign.R == nil {
			foreign.R = &dynamicR{}
		}
		foreign.R.DynamicsOnTerms = append(foreign.R.DynamicsOnTerms, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DynamicID == foreign.DynamicID {
				local.R.Dynamic = foreign
				if foreign.R == nil {
					foreign.R = &dynamicR{}
				}
				foreign.R.DynamicsOnTerms = append(foreign.R.DynamicsOnTerms, local)
				break
			}
		}
	}

	return nil
}

// LoadTerm allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dynamicsOnTermL) LoadTerm(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDynamicsOnTerm interface{}, mods queries.Applicator) error {
	var slice []*DynamicsOnTerm
	var object *DynamicsOnTerm

	if singular {
		var ok bool
		object, ok = maybeDynamicsOnTerm.(*DynamicsOnTerm)
		if !ok {
			object = new(DynamicsOnTerm)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDynamicsOnTerm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDynamicsOnTerm))
			}
		}
	} else {
		s, ok := maybeDynamicsOnTerm.(*[]*DynamicsOnTerm)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDynamicsOnTerm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDynamicsOnTerm))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dynamicsOnTermR{}
		}
		args = append(args, object.TermID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dynamicsOnTermR{}
			}

			for _, a := range args {
				if a == obj.TermID {
					continue Outer
				}
			}

			args = append(args, obj.TermID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`terms`),
		qm.WhereIn(`terms.term_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Term")
	}

	var resultSlice []*Term
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Term")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for terms")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for terms")
	}

	if len(termAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Term = foreign
		if foreign.R == nil {
			foreign.R = &termR{}
		}
		foreign.R.DynamicsOnTerms = append(foreign.R.DynamicsOnTerms, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TermID == foreign.TermID {
				local.R.Term = foreign
				if foreign.R == nil {
					foreign.R = &termR{}
				}
				foreign.R.DynamicsOnTerms = append(foreign.R.DynamicsOnTerms, local)
				break
			}
		}
	}

	return nil
}

// SetDynamic of the dynamicsOnTerm to the related item.
// Sets o.R.Dynamic to related.
// Adds o to related.R.DynamicsOnTerms.
func (o *DynamicsOnTerm) SetDynamic(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Dynamic) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"dynamics_on_terms\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"dynamic_id"}),
		strmangle.WhereClause("\"", "\"", 2, dynamicsOnTermPrimaryKeyColumns),
	)
	values := []interface{}{related.DynamicID, o.DynamicsOnTermsID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DynamicID = related.DynamicID
	if o.R == nil {
		o.R = &dynamicsOnTermR{
			Dynamic: related,
		}
	} else {
		o.R.Dynamic = related
	}

	if related.R == nil {
		related.R = &dynamicR{
			DynamicsOnTerms: DynamicsOnTermSlice{o},
		}
	} else {
		related.R.DynamicsOnTerms = append(related.R.DynamicsOnTerms, o)
	}

	return nil
}

// SetTerm of the dynamicsOnTerm to the related item.
// Sets o.R.Term to related.
// Adds o to related.R.DynamicsOnTerms.
func (o *DynamicsOnTerm) SetTerm(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Term) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"dynamics_on_terms\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"term_id"}),
		strmangle.WhereClause("\"", "\"", 2, dynamicsOnTermPrimaryKeyColumns),
	)
	values := []interface{}{related.TermID, o.DynamicsOnTermsID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TermID = related.TermID
	if o.R == nil {
		o.R = &dynamicsOnTermR{
			Term: related,
		}
	} else {
		o.R.Term = related
	}

	if related.R == nil {
		related.R = &termR{
			DynamicsOnTerms: DynamicsOnTermSlice{o},
		}
	} else {
		related.R.DynamicsOnTerms = append(related.R.DynamicsOnTerms, o)
	}

	return nil
}

// DynamicsOnTerms retrieves all the records using an executor.
func DynamicsOnTerms(mods ...qm.QueryMod) dynamicsOnTermQuery {
	mods = append(mods, qm.From("\"dynamics_on_terms\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"dynamics_on_terms\".*"})
	}

	return dynamicsOnTermQuery{q}
}

// FindDynamicsOnTerm retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDynamicsOnTerm(ctx context.Context, exec boil.ContextExecutor, dynamicsOnTermsID int, selectCols ...string) (*DynamicsOnTerm, error) {
	dynamicsOnTermObj := &DynamicsOnTerm{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"dynamics_on_terms\" where \"dynamics_on_terms_id\"=$1", sel,
	)

	q := queries.Raw(query, dynamicsOnTermsID)

	err := q.Bind(ctx, exec, dynamicsOnTermObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from dynamics_on_terms")
	}

	if err = dynamicsOnTermObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dynamicsOnTermObj, err
	}

	return dynamicsOnTermObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DynamicsOnTerm) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dynamics_on_terms provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dynamicsOnTermColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dynamicsOnTermInsertCacheMut.RLock()
	cache, cached := dynamicsOnTermInsertCache[key]
	dynamicsOnTermInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dynamicsOnTermAllColumns,
			dynamicsOnTermColumnsWithDefault,
			dynamicsOnTermColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dynamicsOnTermType, dynamicsOnTermMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dynamicsOnTermType, dynamicsOnTermMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"dynamics_on_terms\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"dynamics_on_terms\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into dynamics_on_terms")
	}

	if !cached {
		dynamicsOnTermInsertCacheMut.Lock()
		dynamicsOnTermInsertCache[key] = cache
		dynamicsOnTermInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DynamicsOnTerm.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DynamicsOnTerm) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dynamicsOnTermUpdateCacheMut.RLock()
	cache, cached := dynamicsOnTermUpdateCache[key]
	dynamicsOnTermUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dynamicsOnTermAllColumns,
			dynamicsOnTermPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update dynamics_on_terms, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"dynamics_on_terms\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, dynamicsOnTermPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dynamicsOnTermType, dynamicsOnTermMapping, append(wl, dynamicsOnTermPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update dynamics_on_terms row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for dynamics_on_terms")
	}

	if !cached {
		dynamicsOnTermUpdateCacheMut.Lock()
		dynamicsOnTermUpdateCache[key] = cache
		dynamicsOnTermUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dynamicsOnTermQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for dynamics_on_terms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for dynamics_on_terms")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DynamicsOnTermSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dynamicsOnTermPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"dynamics_on_terms\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, dynamicsOnTermPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dynamicsOnTerm slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dynamicsOnTerm")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DynamicsOnTerm) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dynamics_on_terms provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dynamicsOnTermColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dynamicsOnTermUpsertCacheMut.RLock()
	cache, cached := dynamicsOnTermUpsertCache[key]
	dynamicsOnTermUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dynamicsOnTermAllColumns,
			dynamicsOnTermColumnsWithDefault,
			dynamicsOnTermColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dynamicsOnTermAllColumns,
			dynamicsOnTermPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert dynamics_on_terms, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(dynamicsOnTermPrimaryKeyColumns))
			copy(conflict, dynamicsOnTermPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"dynamics_on_terms\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(dynamicsOnTermType, dynamicsOnTermMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dynamicsOnTermType, dynamicsOnTermMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert dynamics_on_terms")
	}

	if !cached {
		dynamicsOnTermUpsertCacheMut.Lock()
		dynamicsOnTermUpsertCache[key] = cache
		dynamicsOnTermUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DynamicsOnTerm record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DynamicsOnTerm) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DynamicsOnTerm provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dynamicsOnTermPrimaryKeyMapping)
	sql := "DELETE FROM \"dynamics_on_terms\" WHERE \"dynamics_on_terms_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from dynamics_on_terms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for dynamics_on_terms")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dynamicsOnTermQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dynamicsOnTermQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dynamics_on_terms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dynamics_on_terms")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DynamicsOnTermSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dynamicsOnTermBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dynamicsOnTermPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"dynamics_on_terms\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dynamicsOnTermPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dynamicsOnTerm slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dynamics_on_terms")
	}

	if len(dynamicsOnTermAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DynamicsOnTerm) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDynamicsOnTerm(ctx, exec, o.DynamicsOnTermsID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DynamicsOnTermSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DynamicsOnTermSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dynamicsOnTermPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"dynamics_on_terms\".* FROM \"dynamics_on_terms\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dynamicsOnTermPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DynamicsOnTermSlice")
	}

	*o = slice

	return nil
}

// DynamicsOnTermExists checks if the DynamicsOnTerm row exists.
func DynamicsOnTermExists(ctx context.Context, exec boil.ContextExecutor, dynamicsOnTermsID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"dynamics_on_terms\" where \"dynamics_on_terms_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, dynamicsOnTermsID)
	}
	row := exec.QueryRowContext(ctx, sql, dynamicsOnTermsID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if dynamics_on_terms exists")
	}

	return exists, nil
}

// Exists checks if the DynamicsOnTerm row exists.
func (o *DynamicsOnTerm) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DynamicsOnTermExists(ctx, exec, o.DynamicsOnTermsID)
}
