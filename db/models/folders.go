// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Folder is an object representing the database table.
type Folder struct {
	Name      string     `boil:"name" json:"name" toml:"name" yaml:"name"`
	UserID    string     `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	CreatedAt time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	FolderID  int32      `boil:"folder_id" json:"folder_id" toml:"folder_id" yaml:"folder_id"`
	ParentID  null.Int32 `boil:"parent_id" json:"parent_id,omitempty" toml:"parent_id" yaml:"parent_id,omitempty"`

	R *folderR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L folderL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FolderColumns = struct {
	Name      string
	UserID    string
	CreatedAt string
	UpdatedAt string
	FolderID  string
	ParentID  string
}{
	Name:      "name",
	UserID:    "user_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	FolderID:  "folder_id",
	ParentID:  "parent_id",
}

var FolderTableColumns = struct {
	Name      string
	UserID    string
	CreatedAt string
	UpdatedAt string
	FolderID  string
	ParentID  string
}{
	Name:      "folders.name",
	UserID:    "folders.user_id",
	CreatedAt: "folders.created_at",
	UpdatedAt: "folders.updated_at",
	FolderID:  "folders.folder_id",
	ParentID:  "folders.parent_id",
}

// Generated where

type whereHelpernull_Int32 struct{ field string }

func (w whereHelpernull_Int32) EQ(x null.Int32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int32) NEQ(x null.Int32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int32) LT(x null.Int32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int32) LTE(x null.Int32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int32) GT(x null.Int32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int32) GTE(x null.Int32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int32) IN(slice []int32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int32) NIN(slice []int32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int32) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int32) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var FolderWhere = struct {
	Name      whereHelperstring
	UserID    whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	FolderID  whereHelperint32
	ParentID  whereHelpernull_Int32
}{
	Name:      whereHelperstring{field: "\"folders\".\"name\""},
	UserID:    whereHelperstring{field: "\"folders\".\"user_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"folders\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"folders\".\"updated_at\""},
	FolderID:  whereHelperint32{field: "\"folders\".\"folder_id\""},
	ParentID:  whereHelpernull_Int32{field: "\"folders\".\"parent_id\""},
}

// FolderRels is where relationship names are stored.
var FolderRels = struct {
	Parent        string
	User          string
	ParentFolders string
	Images        string
}{
	Parent:        "Parent",
	User:          "User",
	ParentFolders: "ParentFolders",
	Images:        "Images",
}

// folderR is where relationships are stored.
type folderR struct {
	Parent        *Folder     `boil:"Parent" json:"Parent" toml:"Parent" yaml:"Parent"`
	User          *User       `boil:"User" json:"User" toml:"User" yaml:"User"`
	ParentFolders FolderSlice `boil:"ParentFolders" json:"ParentFolders" toml:"ParentFolders" yaml:"ParentFolders"`
	Images        ImageSlice  `boil:"Images" json:"Images" toml:"Images" yaml:"Images"`
}

// NewStruct creates a new relationship struct
func (*folderR) NewStruct() *folderR {
	return &folderR{}
}

func (r *folderR) GetParent() *Folder {
	if r == nil {
		return nil
	}
	return r.Parent
}

func (r *folderR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *folderR) GetParentFolders() FolderSlice {
	if r == nil {
		return nil
	}
	return r.ParentFolders
}

func (r *folderR) GetImages() ImageSlice {
	if r == nil {
		return nil
	}
	return r.Images
}

// folderL is where Load methods for each relationship are stored.
type folderL struct{}

var (
	folderAllColumns            = []string{"name", "user_id", "created_at", "updated_at", "folder_id", "parent_id"}
	folderColumnsWithoutDefault = []string{"name", "user_id", "updated_at"}
	folderColumnsWithDefault    = []string{"created_at", "folder_id", "parent_id"}
	folderPrimaryKeyColumns     = []string{"folder_id"}
	folderGeneratedColumns      = []string{}
)

type (
	// FolderSlice is an alias for a slice of pointers to Folder.
	// This should almost always be used instead of []Folder.
	FolderSlice []*Folder
	// FolderHook is the signature for custom Folder hook methods
	FolderHook func(context.Context, boil.ContextExecutor, *Folder) error

	folderQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	folderType                 = reflect.TypeOf(&Folder{})
	folderMapping              = queries.MakeStructMapping(folderType)
	folderPrimaryKeyMapping, _ = queries.BindMapping(folderType, folderMapping, folderPrimaryKeyColumns)
	folderInsertCacheMut       sync.RWMutex
	folderInsertCache          = make(map[string]insertCache)
	folderUpdateCacheMut       sync.RWMutex
	folderUpdateCache          = make(map[string]updateCache)
	folderUpsertCacheMut       sync.RWMutex
	folderUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var folderAfterSelectHooks []FolderHook

var folderBeforeInsertHooks []FolderHook
var folderAfterInsertHooks []FolderHook

var folderBeforeUpdateHooks []FolderHook
var folderAfterUpdateHooks []FolderHook

var folderBeforeDeleteHooks []FolderHook
var folderAfterDeleteHooks []FolderHook

var folderBeforeUpsertHooks []FolderHook
var folderAfterUpsertHooks []FolderHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Folder) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range folderAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Folder) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range folderBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Folder) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range folderAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Folder) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range folderBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Folder) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range folderAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Folder) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range folderBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Folder) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range folderAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Folder) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range folderBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Folder) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range folderAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFolderHook registers your hook function for all future operations.
func AddFolderHook(hookPoint boil.HookPoint, folderHook FolderHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		folderAfterSelectHooks = append(folderAfterSelectHooks, folderHook)
	case boil.BeforeInsertHook:
		folderBeforeInsertHooks = append(folderBeforeInsertHooks, folderHook)
	case boil.AfterInsertHook:
		folderAfterInsertHooks = append(folderAfterInsertHooks, folderHook)
	case boil.BeforeUpdateHook:
		folderBeforeUpdateHooks = append(folderBeforeUpdateHooks, folderHook)
	case boil.AfterUpdateHook:
		folderAfterUpdateHooks = append(folderAfterUpdateHooks, folderHook)
	case boil.BeforeDeleteHook:
		folderBeforeDeleteHooks = append(folderBeforeDeleteHooks, folderHook)
	case boil.AfterDeleteHook:
		folderAfterDeleteHooks = append(folderAfterDeleteHooks, folderHook)
	case boil.BeforeUpsertHook:
		folderBeforeUpsertHooks = append(folderBeforeUpsertHooks, folderHook)
	case boil.AfterUpsertHook:
		folderAfterUpsertHooks = append(folderAfterUpsertHooks, folderHook)
	}
}

// One returns a single folder record from the query.
func (q folderQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Folder, error) {
	o := &Folder{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for folders")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Folder records from the query.
func (q folderQuery) All(ctx context.Context, exec boil.ContextExecutor) (FolderSlice, error) {
	var o []*Folder

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Folder slice")
	}

	if len(folderAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Folder records in the query.
func (q folderQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count folders rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q folderQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if folders exists")
	}

	return count > 0, nil
}

// Parent pointed to by the foreign key.
func (o *Folder) Parent(mods ...qm.QueryMod) folderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"folder_id\" = ?", o.ParentID),
	}

	queryMods = append(queryMods, mods...)

	return Folders(queryMods...)
}

// User pointed to by the foreign key.
func (o *Folder) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"user_id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// ParentFolders retrieves all the folder's Folders with an executor via parent_id column.
func (o *Folder) ParentFolders(mods ...qm.QueryMod) folderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"folders\".\"parent_id\"=?", o.FolderID),
	)

	return Folders(queryMods...)
}

// Images retrieves all the image's Images with an executor.
func (o *Folder) Images(mods ...qm.QueryMod) imageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"images\".\"folder_id\"=?", o.FolderID),
	)

	return Images(queryMods...)
}

// LoadParent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (folderL) LoadParent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFolder interface{}, mods queries.Applicator) error {
	var slice []*Folder
	var object *Folder

	if singular {
		var ok bool
		object, ok = maybeFolder.(*Folder)
		if !ok {
			object = new(Folder)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFolder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFolder))
			}
		}
	} else {
		s, ok := maybeFolder.(*[]*Folder)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFolder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFolder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &folderR{}
		}
		if !queries.IsNil(object.ParentID) {
			args = append(args, object.ParentID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &folderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ParentID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ParentID) {
				args = append(args, obj.ParentID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`folders`),
		qm.WhereIn(`folders.folder_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Folder")
	}

	var resultSlice []*Folder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Folder")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for folders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for folders")
	}

	if len(folderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Parent = foreign
		if foreign.R == nil {
			foreign.R = &folderR{}
		}
		foreign.R.ParentFolders = append(foreign.R.ParentFolders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ParentID, foreign.FolderID) {
				local.R.Parent = foreign
				if foreign.R == nil {
					foreign.R = &folderR{}
				}
				foreign.R.ParentFolders = append(foreign.R.ParentFolders, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (folderL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFolder interface{}, mods queries.Applicator) error {
	var slice []*Folder
	var object *Folder

	if singular {
		var ok bool
		object, ok = maybeFolder.(*Folder)
		if !ok {
			object = new(Folder)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFolder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFolder))
			}
		}
	} else {
		s, ok := maybeFolder.(*[]*Folder)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFolder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFolder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &folderR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &folderR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Folders = append(foreign.R.Folders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.UserID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Folders = append(foreign.R.Folders, local)
				break
			}
		}
	}

	return nil
}

// LoadParentFolders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (folderL) LoadParentFolders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFolder interface{}, mods queries.Applicator) error {
	var slice []*Folder
	var object *Folder

	if singular {
		var ok bool
		object, ok = maybeFolder.(*Folder)
		if !ok {
			object = new(Folder)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFolder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFolder))
			}
		}
	} else {
		s, ok := maybeFolder.(*[]*Folder)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFolder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFolder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &folderR{}
		}
		args = append(args, object.FolderID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &folderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.FolderID) {
					continue Outer
				}
			}

			args = append(args, obj.FolderID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`folders`),
		qm.WhereIn(`folders.parent_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load folders")
	}

	var resultSlice []*Folder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice folders")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on folders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for folders")
	}

	if len(folderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ParentFolders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &folderR{}
			}
			foreign.R.Parent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.FolderID, foreign.ParentID) {
				local.R.ParentFolders = append(local.R.ParentFolders, foreign)
				if foreign.R == nil {
					foreign.R = &folderR{}
				}
				foreign.R.Parent = local
				break
			}
		}
	}

	return nil
}

// LoadImages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (folderL) LoadImages(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFolder interface{}, mods queries.Applicator) error {
	var slice []*Folder
	var object *Folder

	if singular {
		var ok bool
		object, ok = maybeFolder.(*Folder)
		if !ok {
			object = new(Folder)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFolder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFolder))
			}
		}
	} else {
		s, ok := maybeFolder.(*[]*Folder)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFolder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFolder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &folderR{}
		}
		args = append(args, object.FolderID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &folderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.FolderID) {
					continue Outer
				}
			}

			args = append(args, obj.FolderID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`images`),
		qm.WhereIn(`images.folder_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load images")
	}

	var resultSlice []*Image
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice images")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on images")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for images")
	}

	if len(imageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Images = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &imageR{}
			}
			foreign.R.Folder = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.FolderID, foreign.FolderID) {
				local.R.Images = append(local.R.Images, foreign)
				if foreign.R == nil {
					foreign.R = &imageR{}
				}
				foreign.R.Folder = local
				break
			}
		}
	}

	return nil
}

// SetParent of the folder to the related item.
// Sets o.R.Parent to related.
// Adds o to related.R.ParentFolders.
func (o *Folder) SetParent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Folder) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"folders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"parent_id"}),
		strmangle.WhereClause("\"", "\"", 2, folderPrimaryKeyColumns),
	)
	values := []interface{}{related.FolderID, o.FolderID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ParentID, related.FolderID)
	if o.R == nil {
		o.R = &folderR{
			Parent: related,
		}
	} else {
		o.R.Parent = related
	}

	if related.R == nil {
		related.R = &folderR{
			ParentFolders: FolderSlice{o},
		}
	} else {
		related.R.ParentFolders = append(related.R.ParentFolders, o)
	}

	return nil
}

// RemoveParent relationship.
// Sets o.R.Parent to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Folder) RemoveParent(ctx context.Context, exec boil.ContextExecutor, related *Folder) error {
	var err error

	queries.SetScanner(&o.ParentID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("parent_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Parent = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ParentFolders {
		if queries.Equal(o.ParentID, ri.ParentID) {
			continue
		}

		ln := len(related.R.ParentFolders)
		if ln > 1 && i < ln-1 {
			related.R.ParentFolders[i] = related.R.ParentFolders[ln-1]
		}
		related.R.ParentFolders = related.R.ParentFolders[:ln-1]
		break
	}
	return nil
}

// SetUser of the folder to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Folders.
func (o *Folder) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"folders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, folderPrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.FolderID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.UserID
	if o.R == nil {
		o.R = &folderR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Folders: FolderSlice{o},
		}
	} else {
		related.R.Folders = append(related.R.Folders, o)
	}

	return nil
}

// AddParentFolders adds the given related objects to the existing relationships
// of the folder, optionally inserting them as new records.
// Appends related to o.R.ParentFolders.
// Sets related.R.Parent appropriately.
func (o *Folder) AddParentFolders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Folder) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ParentID, o.FolderID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"folders\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"parent_id"}),
				strmangle.WhereClause("\"", "\"", 2, folderPrimaryKeyColumns),
			)
			values := []interface{}{o.FolderID, rel.FolderID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ParentID, o.FolderID)
		}
	}

	if o.R == nil {
		o.R = &folderR{
			ParentFolders: related,
		}
	} else {
		o.R.ParentFolders = append(o.R.ParentFolders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &folderR{
				Parent: o,
			}
		} else {
			rel.R.Parent = o
		}
	}
	return nil
}

// SetParentFolders removes all previously related items of the
// folder replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Parent's ParentFolders accordingly.
// Replaces o.R.ParentFolders with related.
// Sets related.R.Parent's ParentFolders accordingly.
func (o *Folder) SetParentFolders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Folder) error {
	query := "update \"folders\" set \"parent_id\" = null where \"parent_id\" = $1"
	values := []interface{}{o.FolderID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ParentFolders {
			queries.SetScanner(&rel.ParentID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Parent = nil
		}
		o.R.ParentFolders = nil
	}

	return o.AddParentFolders(ctx, exec, insert, related...)
}

// RemoveParentFolders relationships from objects passed in.
// Removes related items from R.ParentFolders (uses pointer comparison, removal does not keep order)
// Sets related.R.Parent.
func (o *Folder) RemoveParentFolders(ctx context.Context, exec boil.ContextExecutor, related ...*Folder) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ParentID, nil)
		if rel.R != nil {
			rel.R.Parent = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("parent_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ParentFolders {
			if rel != ri {
				continue
			}

			ln := len(o.R.ParentFolders)
			if ln > 1 && i < ln-1 {
				o.R.ParentFolders[i] = o.R.ParentFolders[ln-1]
			}
			o.R.ParentFolders = o.R.ParentFolders[:ln-1]
			break
		}
	}

	return nil
}

// AddImages adds the given related objects to the existing relationships
// of the folder, optionally inserting them as new records.
// Appends related to o.R.Images.
// Sets related.R.Folder appropriately.
func (o *Folder) AddImages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Image) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.FolderID, o.FolderID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"images\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"folder_id"}),
				strmangle.WhereClause("\"", "\"", 2, imagePrimaryKeyColumns),
			)
			values := []interface{}{o.FolderID, rel.ImageID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.FolderID, o.FolderID)
		}
	}

	if o.R == nil {
		o.R = &folderR{
			Images: related,
		}
	} else {
		o.R.Images = append(o.R.Images, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &imageR{
				Folder: o,
			}
		} else {
			rel.R.Folder = o
		}
	}
	return nil
}

// SetImages removes all previously related items of the
// folder replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Folder's Images accordingly.
// Replaces o.R.Images with related.
// Sets related.R.Folder's Images accordingly.
func (o *Folder) SetImages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Image) error {
	query := "update \"images\" set \"folder_id\" = null where \"folder_id\" = $1"
	values := []interface{}{o.FolderID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Images {
			queries.SetScanner(&rel.FolderID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Folder = nil
		}
		o.R.Images = nil
	}

	return o.AddImages(ctx, exec, insert, related...)
}

// RemoveImages relationships from objects passed in.
// Removes related items from R.Images (uses pointer comparison, removal does not keep order)
// Sets related.R.Folder.
func (o *Folder) RemoveImages(ctx context.Context, exec boil.ContextExecutor, related ...*Image) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.FolderID, nil)
		if rel.R != nil {
			rel.R.Folder = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("folder_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Images {
			if rel != ri {
				continue
			}

			ln := len(o.R.Images)
			if ln > 1 && i < ln-1 {
				o.R.Images[i] = o.R.Images[ln-1]
			}
			o.R.Images = o.R.Images[:ln-1]
			break
		}
	}

	return nil
}

// Folders retrieves all the records using an executor.
func Folders(mods ...qm.QueryMod) folderQuery {
	mods = append(mods, qm.From("\"folders\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"folders\".*"})
	}

	return folderQuery{q}
}

// FindFolder retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFolder(ctx context.Context, exec boil.ContextExecutor, folderID int32, selectCols ...string) (*Folder, error) {
	folderObj := &Folder{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"folders\" where \"folder_id\"=$1", sel,
	)

	q := queries.Raw(query, folderID)

	err := q.Bind(ctx, exec, folderObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from folders")
	}

	if err = folderObj.doAfterSelectHooks(ctx, exec); err != nil {
		return folderObj, err
	}

	return folderObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Folder) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no folders provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(folderColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	folderInsertCacheMut.RLock()
	cache, cached := folderInsertCache[key]
	folderInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			folderAllColumns,
			folderColumnsWithDefault,
			folderColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(folderType, folderMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(folderType, folderMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"folders\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"folders\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into folders")
	}

	if !cached {
		folderInsertCacheMut.Lock()
		folderInsertCache[key] = cache
		folderInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Folder.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Folder) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	folderUpdateCacheMut.RLock()
	cache, cached := folderUpdateCache[key]
	folderUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			folderAllColumns,
			folderPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update folders, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"folders\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, folderPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(folderType, folderMapping, append(wl, folderPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update folders row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for folders")
	}

	if !cached {
		folderUpdateCacheMut.Lock()
		folderUpdateCache[key] = cache
		folderUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q folderQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for folders")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for folders")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FolderSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), folderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"folders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, folderPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in folder slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all folder")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Folder) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no folders provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(folderColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	folderUpsertCacheMut.RLock()
	cache, cached := folderUpsertCache[key]
	folderUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			folderAllColumns,
			folderColumnsWithDefault,
			folderColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			folderAllColumns,
			folderPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert folders, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(folderPrimaryKeyColumns))
			copy(conflict, folderPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"folders\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(folderType, folderMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(folderType, folderMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert folders")
	}

	if !cached {
		folderUpsertCacheMut.Lock()
		folderUpsertCache[key] = cache
		folderUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Folder record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Folder) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Folder provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), folderPrimaryKeyMapping)
	sql := "DELETE FROM \"folders\" WHERE \"folder_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from folders")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for folders")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q folderQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no folderQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from folders")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for folders")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FolderSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(folderBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), folderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"folders\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, folderPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from folder slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for folders")
	}

	if len(folderAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Folder) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFolder(ctx, exec, o.FolderID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FolderSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FolderSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), folderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"folders\".* FROM \"folders\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, folderPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FolderSlice")
	}

	*o = slice

	return nil
}

// FolderExists checks if the Folder row exists.
func FolderExists(ctx context.Context, exec boil.ContextExecutor, folderID int32) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"folders\" where \"folder_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, folderID)
	}
	row := exec.QueryRowContext(ctx, sql, folderID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if folders exists")
	}

	return exists, nil
}

// Exists checks if the Folder row exists.
func (o *Folder) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return FolderExists(ctx, exec, o.FolderID)
}
