// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Mark is an object representing the database table.
type Mark struct {
	MarkID    int       `boil:"mark_id" json:"mark_id" toml:"mark_id" yaml:"mark_id"`
	UserID    string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	DynamicID int       `boil:"dynamic_id" json:"dynamic_id" toml:"dynamic_id" yaml:"dynamic_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *markR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L markL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MarkColumns = struct {
	MarkID    string
	UserID    string
	DynamicID string
	CreatedAt string
	UpdatedAt string
}{
	MarkID:    "mark_id",
	UserID:    "user_id",
	DynamicID: "dynamic_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var MarkTableColumns = struct {
	MarkID    string
	UserID    string
	DynamicID string
	CreatedAt string
	UpdatedAt string
}{
	MarkID:    "marks.mark_id",
	UserID:    "marks.user_id",
	DynamicID: "marks.dynamic_id",
	CreatedAt: "marks.created_at",
	UpdatedAt: "marks.updated_at",
}

// Generated where

var MarkWhere = struct {
	MarkID    whereHelperint
	UserID    whereHelperstring
	DynamicID whereHelperint
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	MarkID:    whereHelperint{field: "\"marks\".\"mark_id\""},
	UserID:    whereHelperstring{field: "\"marks\".\"user_id\""},
	DynamicID: whereHelperint{field: "\"marks\".\"dynamic_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"marks\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"marks\".\"updated_at\""},
}

// MarkRels is where relationship names are stored.
var MarkRels = struct {
	Dynamic string
	User    string
}{
	Dynamic: "Dynamic",
	User:    "User",
}

// markR is where relationships are stored.
type markR struct {
	Dynamic *Dynamic `boil:"Dynamic" json:"Dynamic" toml:"Dynamic" yaml:"Dynamic"`
	User    *User    `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*markR) NewStruct() *markR {
	return &markR{}
}

func (r *markR) GetDynamic() *Dynamic {
	if r == nil {
		return nil
	}
	return r.Dynamic
}

func (r *markR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// markL is where Load methods for each relationship are stored.
type markL struct{}

var (
	markAllColumns            = []string{"mark_id", "user_id", "dynamic_id", "created_at", "updated_at"}
	markColumnsWithoutDefault = []string{"user_id", "dynamic_id", "updated_at"}
	markColumnsWithDefault    = []string{"mark_id", "created_at"}
	markPrimaryKeyColumns     = []string{"mark_id"}
	markGeneratedColumns      = []string{}
)

type (
	// MarkSlice is an alias for a slice of pointers to Mark.
	// This should almost always be used instead of []Mark.
	MarkSlice []*Mark
	// MarkHook is the signature for custom Mark hook methods
	MarkHook func(context.Context, boil.ContextExecutor, *Mark) error

	markQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	markType                 = reflect.TypeOf(&Mark{})
	markMapping              = queries.MakeStructMapping(markType)
	markPrimaryKeyMapping, _ = queries.BindMapping(markType, markMapping, markPrimaryKeyColumns)
	markInsertCacheMut       sync.RWMutex
	markInsertCache          = make(map[string]insertCache)
	markUpdateCacheMut       sync.RWMutex
	markUpdateCache          = make(map[string]updateCache)
	markUpsertCacheMut       sync.RWMutex
	markUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var markAfterSelectHooks []MarkHook

var markBeforeInsertHooks []MarkHook
var markAfterInsertHooks []MarkHook

var markBeforeUpdateHooks []MarkHook
var markAfterUpdateHooks []MarkHook

var markBeforeDeleteHooks []MarkHook
var markAfterDeleteHooks []MarkHook

var markBeforeUpsertHooks []MarkHook
var markAfterUpsertHooks []MarkHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Mark) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range markAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Mark) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range markBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Mark) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range markAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Mark) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range markBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Mark) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range markAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Mark) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range markBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Mark) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range markAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Mark) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range markBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Mark) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range markAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMarkHook registers your hook function for all future operations.
func AddMarkHook(hookPoint boil.HookPoint, markHook MarkHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		markAfterSelectHooks = append(markAfterSelectHooks, markHook)
	case boil.BeforeInsertHook:
		markBeforeInsertHooks = append(markBeforeInsertHooks, markHook)
	case boil.AfterInsertHook:
		markAfterInsertHooks = append(markAfterInsertHooks, markHook)
	case boil.BeforeUpdateHook:
		markBeforeUpdateHooks = append(markBeforeUpdateHooks, markHook)
	case boil.AfterUpdateHook:
		markAfterUpdateHooks = append(markAfterUpdateHooks, markHook)
	case boil.BeforeDeleteHook:
		markBeforeDeleteHooks = append(markBeforeDeleteHooks, markHook)
	case boil.AfterDeleteHook:
		markAfterDeleteHooks = append(markAfterDeleteHooks, markHook)
	case boil.BeforeUpsertHook:
		markBeforeUpsertHooks = append(markBeforeUpsertHooks, markHook)
	case boil.AfterUpsertHook:
		markAfterUpsertHooks = append(markAfterUpsertHooks, markHook)
	}
}

// One returns a single mark record from the query.
func (q markQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Mark, error) {
	o := &Mark{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for marks")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Mark records from the query.
func (q markQuery) All(ctx context.Context, exec boil.ContextExecutor) (MarkSlice, error) {
	var o []*Mark

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Mark slice")
	}

	if len(markAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Mark records in the query.
func (q markQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count marks rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q markQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if marks exists")
	}

	return count > 0, nil
}

// Dynamic pointed to by the foreign key.
func (o *Mark) Dynamic(mods ...qm.QueryMod) dynamicQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"dynamic_id\" = ?", o.DynamicID),
	}

	queryMods = append(queryMods, mods...)

	return Dynamics(queryMods...)
}

// User pointed to by the foreign key.
func (o *Mark) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"user_id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadDynamic allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (markL) LoadDynamic(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMark interface{}, mods queries.Applicator) error {
	var slice []*Mark
	var object *Mark

	if singular {
		var ok bool
		object, ok = maybeMark.(*Mark)
		if !ok {
			object = new(Mark)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMark)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMark))
			}
		}
	} else {
		s, ok := maybeMark.(*[]*Mark)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMark)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMark))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &markR{}
		}
		args = append(args, object.DynamicID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &markR{}
			}

			for _, a := range args {
				if a == obj.DynamicID {
					continue Outer
				}
			}

			args = append(args, obj.DynamicID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dynamics`),
		qm.WhereIn(`dynamics.dynamic_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Dynamic")
	}

	var resultSlice []*Dynamic
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Dynamic")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dynamics")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dynamics")
	}

	if len(dynamicAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Dynamic = foreign
		if foreign.R == nil {
			foreign.R = &dynamicR{}
		}
		foreign.R.Marks = append(foreign.R.Marks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DynamicID == foreign.DynamicID {
				local.R.Dynamic = foreign
				if foreign.R == nil {
					foreign.R = &dynamicR{}
				}
				foreign.R.Marks = append(foreign.R.Marks, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (markL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMark interface{}, mods queries.Applicator) error {
	var slice []*Mark
	var object *Mark

	if singular {
		var ok bool
		object, ok = maybeMark.(*Mark)
		if !ok {
			object = new(Mark)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMark)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMark))
			}
		}
	} else {
		s, ok := maybeMark.(*[]*Mark)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMark)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMark))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &markR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &markR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Marks = append(foreign.R.Marks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.UserID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Marks = append(foreign.R.Marks, local)
				break
			}
		}
	}

	return nil
}

// SetDynamic of the mark to the related item.
// Sets o.R.Dynamic to related.
// Adds o to related.R.Marks.
func (o *Mark) SetDynamic(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Dynamic) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"marks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"dynamic_id"}),
		strmangle.WhereClause("\"", "\"", 2, markPrimaryKeyColumns),
	)
	values := []interface{}{related.DynamicID, o.MarkID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DynamicID = related.DynamicID
	if o.R == nil {
		o.R = &markR{
			Dynamic: related,
		}
	} else {
		o.R.Dynamic = related
	}

	if related.R == nil {
		related.R = &dynamicR{
			Marks: MarkSlice{o},
		}
	} else {
		related.R.Marks = append(related.R.Marks, o)
	}

	return nil
}

// SetUser of the mark to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Marks.
func (o *Mark) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"marks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, markPrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.MarkID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.UserID
	if o.R == nil {
		o.R = &markR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Marks: MarkSlice{o},
		}
	} else {
		related.R.Marks = append(related.R.Marks, o)
	}

	return nil
}

// Marks retrieves all the records using an executor.
func Marks(mods ...qm.QueryMod) markQuery {
	mods = append(mods, qm.From("\"marks\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"marks\".*"})
	}

	return markQuery{q}
}

// FindMark retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMark(ctx context.Context, exec boil.ContextExecutor, markID int, selectCols ...string) (*Mark, error) {
	markObj := &Mark{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"marks\" where \"mark_id\"=$1", sel,
	)

	q := queries.Raw(query, markID)

	err := q.Bind(ctx, exec, markObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from marks")
	}

	if err = markObj.doAfterSelectHooks(ctx, exec); err != nil {
		return markObj, err
	}

	return markObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Mark) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no marks provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(markColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	markInsertCacheMut.RLock()
	cache, cached := markInsertCache[key]
	markInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			markAllColumns,
			markColumnsWithDefault,
			markColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(markType, markMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(markType, markMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"marks\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"marks\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into marks")
	}

	if !cached {
		markInsertCacheMut.Lock()
		markInsertCache[key] = cache
		markInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Mark.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Mark) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	markUpdateCacheMut.RLock()
	cache, cached := markUpdateCache[key]
	markUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			markAllColumns,
			markPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update marks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"marks\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, markPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(markType, markMapping, append(wl, markPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update marks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for marks")
	}

	if !cached {
		markUpdateCacheMut.Lock()
		markUpdateCache[key] = cache
		markUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q markQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for marks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for marks")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MarkSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), markPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"marks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, markPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in mark slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all mark")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Mark) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no marks provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(markColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	markUpsertCacheMut.RLock()
	cache, cached := markUpsertCache[key]
	markUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			markAllColumns,
			markColumnsWithDefault,
			markColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			markAllColumns,
			markPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert marks, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(markPrimaryKeyColumns))
			copy(conflict, markPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"marks\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(markType, markMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(markType, markMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert marks")
	}

	if !cached {
		markUpsertCacheMut.Lock()
		markUpsertCache[key] = cache
		markUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Mark record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Mark) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Mark provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), markPrimaryKeyMapping)
	sql := "DELETE FROM \"marks\" WHERE \"mark_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from marks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for marks")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q markQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no markQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from marks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for marks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MarkSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(markBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), markPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"marks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, markPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mark slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for marks")
	}

	if len(markAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Mark) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMark(ctx, exec, o.MarkID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MarkSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MarkSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), markPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"marks\".* FROM \"marks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, markPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MarkSlice")
	}

	*o = slice

	return nil
}

// MarkExists checks if the Mark row exists.
func MarkExists(ctx context.Context, exec boil.ContextExecutor, markID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"marks\" where \"mark_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, markID)
	}
	row := exec.QueryRowContext(ctx, sql, markID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if marks exists")
	}

	return exists, nil
}

// Exists checks if the Mark row exists.
func (o *Mark) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MarkExists(ctx, exec, o.MarkID)
}
