// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Bubble is an object representing the database table.
type Bubble struct {
	BubbleID  int       `boil:"bubble_id" json:"bubble_id" toml:"bubble_id" yaml:"bubble_id"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *bubbleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bubbleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BubbleColumns = struct {
	BubbleID  string
	Name      string
	CreatedAt string
	UpdatedAt string
}{
	BubbleID:  "bubble_id",
	Name:      "name",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var BubbleTableColumns = struct {
	BubbleID  string
	Name      string
	CreatedAt string
	UpdatedAt string
}{
	BubbleID:  "bubbles.bubble_id",
	Name:      "bubbles.name",
	CreatedAt: "bubbles.created_at",
	UpdatedAt: "bubbles.updated_at",
}

// Generated where

var BubbleWhere = struct {
	BubbleID  whereHelperint
	Name      whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	BubbleID:  whereHelperint{field: "\"bubbles\".\"bubble_id\""},
	Name:      whereHelperstring{field: "\"bubbles\".\"name\""},
	CreatedAt: whereHelpertime_Time{field: "\"bubbles\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"bubbles\".\"updated_at\""},
}

// BubbleRels is where relationship names are stored.
var BubbleRels = struct {
	Sections string
}{
	Sections: "Sections",
}

// bubbleR is where relationships are stored.
type bubbleR struct {
	Sections SectionSlice `boil:"Sections" json:"Sections" toml:"Sections" yaml:"Sections"`
}

// NewStruct creates a new relationship struct
func (*bubbleR) NewStruct() *bubbleR {
	return &bubbleR{}
}

func (r *bubbleR) GetSections() SectionSlice {
	if r == nil {
		return nil
	}
	return r.Sections
}

// bubbleL is where Load methods for each relationship are stored.
type bubbleL struct{}

var (
	bubbleAllColumns            = []string{"bubble_id", "name", "created_at", "updated_at"}
	bubbleColumnsWithoutDefault = []string{"name", "updated_at"}
	bubbleColumnsWithDefault    = []string{"bubble_id", "created_at"}
	bubblePrimaryKeyColumns     = []string{"bubble_id"}
	bubbleGeneratedColumns      = []string{}
)

type (
	// BubbleSlice is an alias for a slice of pointers to Bubble.
	// This should almost always be used instead of []Bubble.
	BubbleSlice []*Bubble
	// BubbleHook is the signature for custom Bubble hook methods
	BubbleHook func(context.Context, boil.ContextExecutor, *Bubble) error

	bubbleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bubbleType                 = reflect.TypeOf(&Bubble{})
	bubbleMapping              = queries.MakeStructMapping(bubbleType)
	bubblePrimaryKeyMapping, _ = queries.BindMapping(bubbleType, bubbleMapping, bubblePrimaryKeyColumns)
	bubbleInsertCacheMut       sync.RWMutex
	bubbleInsertCache          = make(map[string]insertCache)
	bubbleUpdateCacheMut       sync.RWMutex
	bubbleUpdateCache          = make(map[string]updateCache)
	bubbleUpsertCacheMut       sync.RWMutex
	bubbleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bubbleAfterSelectHooks []BubbleHook

var bubbleBeforeInsertHooks []BubbleHook
var bubbleAfterInsertHooks []BubbleHook

var bubbleBeforeUpdateHooks []BubbleHook
var bubbleAfterUpdateHooks []BubbleHook

var bubbleBeforeDeleteHooks []BubbleHook
var bubbleAfterDeleteHooks []BubbleHook

var bubbleBeforeUpsertHooks []BubbleHook
var bubbleAfterUpsertHooks []BubbleHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Bubble) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bubbleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Bubble) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bubbleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Bubble) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bubbleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Bubble) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bubbleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Bubble) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bubbleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Bubble) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bubbleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Bubble) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bubbleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Bubble) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bubbleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Bubble) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bubbleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBubbleHook registers your hook function for all future operations.
func AddBubbleHook(hookPoint boil.HookPoint, bubbleHook BubbleHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		bubbleAfterSelectHooks = append(bubbleAfterSelectHooks, bubbleHook)
	case boil.BeforeInsertHook:
		bubbleBeforeInsertHooks = append(bubbleBeforeInsertHooks, bubbleHook)
	case boil.AfterInsertHook:
		bubbleAfterInsertHooks = append(bubbleAfterInsertHooks, bubbleHook)
	case boil.BeforeUpdateHook:
		bubbleBeforeUpdateHooks = append(bubbleBeforeUpdateHooks, bubbleHook)
	case boil.AfterUpdateHook:
		bubbleAfterUpdateHooks = append(bubbleAfterUpdateHooks, bubbleHook)
	case boil.BeforeDeleteHook:
		bubbleBeforeDeleteHooks = append(bubbleBeforeDeleteHooks, bubbleHook)
	case boil.AfterDeleteHook:
		bubbleAfterDeleteHooks = append(bubbleAfterDeleteHooks, bubbleHook)
	case boil.BeforeUpsertHook:
		bubbleBeforeUpsertHooks = append(bubbleBeforeUpsertHooks, bubbleHook)
	case boil.AfterUpsertHook:
		bubbleAfterUpsertHooks = append(bubbleAfterUpsertHooks, bubbleHook)
	}
}

// One returns a single bubble record from the query.
func (q bubbleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Bubble, error) {
	o := &Bubble{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bubbles")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Bubble records from the query.
func (q bubbleQuery) All(ctx context.Context, exec boil.ContextExecutor) (BubbleSlice, error) {
	var o []*Bubble

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Bubble slice")
	}

	if len(bubbleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Bubble records in the query.
func (q bubbleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bubbles rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bubbleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bubbles exists")
	}

	return count > 0, nil
}

// Sections retrieves all the section's Sections with an executor.
func (o *Bubble) Sections(mods ...qm.QueryMod) sectionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"sections\".\"bubble_id\"=?", o.BubbleID),
	)

	return Sections(queryMods...)
}

// LoadSections allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (bubbleL) LoadSections(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBubble interface{}, mods queries.Applicator) error {
	var slice []*Bubble
	var object *Bubble

	if singular {
		var ok bool
		object, ok = maybeBubble.(*Bubble)
		if !ok {
			object = new(Bubble)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBubble)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBubble))
			}
		}
	} else {
		s, ok := maybeBubble.(*[]*Bubble)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBubble)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBubble))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bubbleR{}
		}
		args = append(args, object.BubbleID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bubbleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BubbleID) {
					continue Outer
				}
			}

			args = append(args, obj.BubbleID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sections`),
		qm.WhereIn(`sections.bubble_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sections")
	}

	var resultSlice []*Section
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sections")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sections")
	}

	if len(sectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Sections = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sectionR{}
			}
			foreign.R.Bubble = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BubbleID, foreign.BubbleID) {
				local.R.Sections = append(local.R.Sections, foreign)
				if foreign.R == nil {
					foreign.R = &sectionR{}
				}
				foreign.R.Bubble = local
				break
			}
		}
	}

	return nil
}

// AddSections adds the given related objects to the existing relationships
// of the bubble, optionally inserting them as new records.
// Appends related to o.R.Sections.
// Sets related.R.Bubble appropriately.
func (o *Bubble) AddSections(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Section) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BubbleID, o.BubbleID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"sections\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"bubble_id"}),
				strmangle.WhereClause("\"", "\"", 2, sectionPrimaryKeyColumns),
			)
			values := []interface{}{o.BubbleID, rel.SectionID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BubbleID, o.BubbleID)
		}
	}

	if o.R == nil {
		o.R = &bubbleR{
			Sections: related,
		}
	} else {
		o.R.Sections = append(o.R.Sections, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sectionR{
				Bubble: o,
			}
		} else {
			rel.R.Bubble = o
		}
	}
	return nil
}

// SetSections removes all previously related items of the
// bubble replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Bubble's Sections accordingly.
// Replaces o.R.Sections with related.
// Sets related.R.Bubble's Sections accordingly.
func (o *Bubble) SetSections(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Section) error {
	query := "update \"sections\" set \"bubble_id\" = null where \"bubble_id\" = $1"
	values := []interface{}{o.BubbleID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Sections {
			queries.SetScanner(&rel.BubbleID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Bubble = nil
		}
		o.R.Sections = nil
	}

	return o.AddSections(ctx, exec, insert, related...)
}

// RemoveSections relationships from objects passed in.
// Removes related items from R.Sections (uses pointer comparison, removal does not keep order)
// Sets related.R.Bubble.
func (o *Bubble) RemoveSections(ctx context.Context, exec boil.ContextExecutor, related ...*Section) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BubbleID, nil)
		if rel.R != nil {
			rel.R.Bubble = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("bubble_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Sections {
			if rel != ri {
				continue
			}

			ln := len(o.R.Sections)
			if ln > 1 && i < ln-1 {
				o.R.Sections[i] = o.R.Sections[ln-1]
			}
			o.R.Sections = o.R.Sections[:ln-1]
			break
		}
	}

	return nil
}

// Bubbles retrieves all the records using an executor.
func Bubbles(mods ...qm.QueryMod) bubbleQuery {
	mods = append(mods, qm.From("\"bubbles\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"bubbles\".*"})
	}

	return bubbleQuery{q}
}

// FindBubble retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBubble(ctx context.Context, exec boil.ContextExecutor, bubbleID int, selectCols ...string) (*Bubble, error) {
	bubbleObj := &Bubble{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"bubbles\" where \"bubble_id\"=$1", sel,
	)

	q := queries.Raw(query, bubbleID)

	err := q.Bind(ctx, exec, bubbleObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bubbles")
	}

	if err = bubbleObj.doAfterSelectHooks(ctx, exec); err != nil {
		return bubbleObj, err
	}

	return bubbleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Bubble) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bubbles provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bubbleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bubbleInsertCacheMut.RLock()
	cache, cached := bubbleInsertCache[key]
	bubbleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bubbleAllColumns,
			bubbleColumnsWithDefault,
			bubbleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bubbleType, bubbleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bubbleType, bubbleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"bubbles\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"bubbles\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bubbles")
	}

	if !cached {
		bubbleInsertCacheMut.Lock()
		bubbleInsertCache[key] = cache
		bubbleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Bubble.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Bubble) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bubbleUpdateCacheMut.RLock()
	cache, cached := bubbleUpdateCache[key]
	bubbleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bubbleAllColumns,
			bubblePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update bubbles, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"bubbles\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, bubblePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bubbleType, bubbleMapping, append(wl, bubblePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update bubbles row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for bubbles")
	}

	if !cached {
		bubbleUpdateCacheMut.Lock()
		bubbleUpdateCache[key] = cache
		bubbleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q bubbleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for bubbles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for bubbles")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BubbleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bubblePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"bubbles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, bubblePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in bubble slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all bubble")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Bubble) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bubbles provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bubbleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bubbleUpsertCacheMut.RLock()
	cache, cached := bubbleUpsertCache[key]
	bubbleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			bubbleAllColumns,
			bubbleColumnsWithDefault,
			bubbleColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			bubbleAllColumns,
			bubblePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert bubbles, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(bubblePrimaryKeyColumns))
			copy(conflict, bubblePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"bubbles\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(bubbleType, bubbleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bubbleType, bubbleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert bubbles")
	}

	if !cached {
		bubbleUpsertCacheMut.Lock()
		bubbleUpsertCache[key] = cache
		bubbleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Bubble record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Bubble) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Bubble provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bubblePrimaryKeyMapping)
	sql := "DELETE FROM \"bubbles\" WHERE \"bubble_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from bubbles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for bubbles")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bubbleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no bubbleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bubbles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bubbles")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BubbleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bubbleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bubblePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"bubbles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bubblePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bubble slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bubbles")
	}

	if len(bubbleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Bubble) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBubble(ctx, exec, o.BubbleID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BubbleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BubbleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bubblePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"bubbles\".* FROM \"bubbles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bubblePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BubbleSlice")
	}

	*o = slice

	return nil
}

// BubbleExists checks if the Bubble row exists.
func BubbleExists(ctx context.Context, exec boil.ContextExecutor, bubbleID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"bubbles\" where \"bubble_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, bubbleID)
	}
	row := exec.QueryRowContext(ctx, sql, bubbleID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bubbles exists")
	}

	return exists, nil
}

// Exists checks if the Bubble row exists.
func (o *Bubble) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BubbleExists(ctx, exec, o.BubbleID)
}
