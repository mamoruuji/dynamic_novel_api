// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Chapter is an object representing the database table.
type Chapter struct {
	ChapterID int       `boil:"chapter_id" json:"chapter_id" toml:"chapter_id" yaml:"chapter_id"`
	Title     string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	Order     int       `boil:"order" json:"order" toml:"order" yaml:"order"`
	DynamicID int       `boil:"dynamic_id" json:"dynamic_id" toml:"dynamic_id" yaml:"dynamic_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *chapterR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L chapterL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChapterColumns = struct {
	ChapterID string
	Title     string
	Order     string
	DynamicID string
	CreatedAt string
	UpdatedAt string
}{
	ChapterID: "chapter_id",
	Title:     "title",
	Order:     "order",
	DynamicID: "dynamic_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var ChapterTableColumns = struct {
	ChapterID string
	Title     string
	Order     string
	DynamicID string
	CreatedAt string
	UpdatedAt string
}{
	ChapterID: "chapters.chapter_id",
	Title:     "chapters.title",
	Order:     "chapters.order",
	DynamicID: "chapters.dynamic_id",
	CreatedAt: "chapters.created_at",
	UpdatedAt: "chapters.updated_at",
}

// Generated where

var ChapterWhere = struct {
	ChapterID whereHelperint
	Title     whereHelperstring
	Order     whereHelperint
	DynamicID whereHelperint
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ChapterID: whereHelperint{field: "\"chapters\".\"chapter_id\""},
	Title:     whereHelperstring{field: "\"chapters\".\"title\""},
	Order:     whereHelperint{field: "\"chapters\".\"order\""},
	DynamicID: whereHelperint{field: "\"chapters\".\"dynamic_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"chapters\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"chapters\".\"updated_at\""},
}

// ChapterRels is where relationship names are stored.
var ChapterRels = struct {
	Dynamic              string
	ChaperChapersOnTerms string
	Pages                string
}{
	Dynamic:              "Dynamic",
	ChaperChapersOnTerms: "ChaperChapersOnTerms",
	Pages:                "Pages",
}

// chapterR is where relationships are stored.
type chapterR struct {
	Dynamic              *Dynamic           `boil:"Dynamic" json:"Dynamic" toml:"Dynamic" yaml:"Dynamic"`
	ChaperChapersOnTerms ChapersOnTermSlice `boil:"ChaperChapersOnTerms" json:"ChaperChapersOnTerms" toml:"ChaperChapersOnTerms" yaml:"ChaperChapersOnTerms"`
	Pages                PageSlice          `boil:"Pages" json:"Pages" toml:"Pages" yaml:"Pages"`
}

// NewStruct creates a new relationship struct
func (*chapterR) NewStruct() *chapterR {
	return &chapterR{}
}

func (r *chapterR) GetDynamic() *Dynamic {
	if r == nil {
		return nil
	}
	return r.Dynamic
}

func (r *chapterR) GetChaperChapersOnTerms() ChapersOnTermSlice {
	if r == nil {
		return nil
	}
	return r.ChaperChapersOnTerms
}

func (r *chapterR) GetPages() PageSlice {
	if r == nil {
		return nil
	}
	return r.Pages
}

// chapterL is where Load methods for each relationship are stored.
type chapterL struct{}

var (
	chapterAllColumns            = []string{"chapter_id", "title", "order", "dynamic_id", "created_at", "updated_at"}
	chapterColumnsWithoutDefault = []string{"title", "order", "dynamic_id", "updated_at"}
	chapterColumnsWithDefault    = []string{"chapter_id", "created_at"}
	chapterPrimaryKeyColumns     = []string{"chapter_id"}
	chapterGeneratedColumns      = []string{}
)

type (
	// ChapterSlice is an alias for a slice of pointers to Chapter.
	// This should almost always be used instead of []Chapter.
	ChapterSlice []*Chapter
	// ChapterHook is the signature for custom Chapter hook methods
	ChapterHook func(context.Context, boil.ContextExecutor, *Chapter) error

	chapterQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	chapterType                 = reflect.TypeOf(&Chapter{})
	chapterMapping              = queries.MakeStructMapping(chapterType)
	chapterPrimaryKeyMapping, _ = queries.BindMapping(chapterType, chapterMapping, chapterPrimaryKeyColumns)
	chapterInsertCacheMut       sync.RWMutex
	chapterInsertCache          = make(map[string]insertCache)
	chapterUpdateCacheMut       sync.RWMutex
	chapterUpdateCache          = make(map[string]updateCache)
	chapterUpsertCacheMut       sync.RWMutex
	chapterUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var chapterAfterSelectHooks []ChapterHook

var chapterBeforeInsertHooks []ChapterHook
var chapterAfterInsertHooks []ChapterHook

var chapterBeforeUpdateHooks []ChapterHook
var chapterAfterUpdateHooks []ChapterHook

var chapterBeforeDeleteHooks []ChapterHook
var chapterAfterDeleteHooks []ChapterHook

var chapterBeforeUpsertHooks []ChapterHook
var chapterAfterUpsertHooks []ChapterHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Chapter) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapterAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Chapter) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapterBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Chapter) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapterAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Chapter) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapterBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Chapter) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapterAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Chapter) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapterBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Chapter) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapterAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Chapter) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapterBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Chapter) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapterAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChapterHook registers your hook function for all future operations.
func AddChapterHook(hookPoint boil.HookPoint, chapterHook ChapterHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		chapterAfterSelectHooks = append(chapterAfterSelectHooks, chapterHook)
	case boil.BeforeInsertHook:
		chapterBeforeInsertHooks = append(chapterBeforeInsertHooks, chapterHook)
	case boil.AfterInsertHook:
		chapterAfterInsertHooks = append(chapterAfterInsertHooks, chapterHook)
	case boil.BeforeUpdateHook:
		chapterBeforeUpdateHooks = append(chapterBeforeUpdateHooks, chapterHook)
	case boil.AfterUpdateHook:
		chapterAfterUpdateHooks = append(chapterAfterUpdateHooks, chapterHook)
	case boil.BeforeDeleteHook:
		chapterBeforeDeleteHooks = append(chapterBeforeDeleteHooks, chapterHook)
	case boil.AfterDeleteHook:
		chapterAfterDeleteHooks = append(chapterAfterDeleteHooks, chapterHook)
	case boil.BeforeUpsertHook:
		chapterBeforeUpsertHooks = append(chapterBeforeUpsertHooks, chapterHook)
	case boil.AfterUpsertHook:
		chapterAfterUpsertHooks = append(chapterAfterUpsertHooks, chapterHook)
	}
}

// One returns a single chapter record from the query.
func (q chapterQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Chapter, error) {
	o := &Chapter{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for chapters")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Chapter records from the query.
func (q chapterQuery) All(ctx context.Context, exec boil.ContextExecutor) (ChapterSlice, error) {
	var o []*Chapter

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Chapter slice")
	}

	if len(chapterAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Chapter records in the query.
func (q chapterQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count chapters rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q chapterQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if chapters exists")
	}

	return count > 0, nil
}

// Dynamic pointed to by the foreign key.
func (o *Chapter) Dynamic(mods ...qm.QueryMod) dynamicQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"dynamic_id\" = ?", o.DynamicID),
	}

	queryMods = append(queryMods, mods...)

	return Dynamics(queryMods...)
}

// ChaperChapersOnTerms retrieves all the chapers_on_term's ChapersOnTerms with an executor via chapers_id column.
func (o *Chapter) ChaperChapersOnTerms(mods ...qm.QueryMod) chapersOnTermQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"chapers_on_terms\".\"chapers_id\"=?", o.ChapterID),
	)

	return ChapersOnTerms(queryMods...)
}

// Pages retrieves all the page's Pages with an executor.
func (o *Chapter) Pages(mods ...qm.QueryMod) pageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"pages\".\"chapter_id\"=?", o.ChapterID),
	)

	return Pages(queryMods...)
}

// LoadDynamic allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chapterL) LoadDynamic(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChapter interface{}, mods queries.Applicator) error {
	var slice []*Chapter
	var object *Chapter

	if singular {
		var ok bool
		object, ok = maybeChapter.(*Chapter)
		if !ok {
			object = new(Chapter)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChapter)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChapter))
			}
		}
	} else {
		s, ok := maybeChapter.(*[]*Chapter)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChapter)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChapter))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chapterR{}
		}
		args = append(args, object.DynamicID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chapterR{}
			}

			for _, a := range args {
				if a == obj.DynamicID {
					continue Outer
				}
			}

			args = append(args, obj.DynamicID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dynamics`),
		qm.WhereIn(`dynamics.dynamic_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Dynamic")
	}

	var resultSlice []*Dynamic
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Dynamic")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dynamics")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dynamics")
	}

	if len(dynamicAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Dynamic = foreign
		if foreign.R == nil {
			foreign.R = &dynamicR{}
		}
		foreign.R.Chapters = append(foreign.R.Chapters, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DynamicID == foreign.DynamicID {
				local.R.Dynamic = foreign
				if foreign.R == nil {
					foreign.R = &dynamicR{}
				}
				foreign.R.Chapters = append(foreign.R.Chapters, local)
				break
			}
		}
	}

	return nil
}

// LoadChaperChapersOnTerms allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (chapterL) LoadChaperChapersOnTerms(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChapter interface{}, mods queries.Applicator) error {
	var slice []*Chapter
	var object *Chapter

	if singular {
		var ok bool
		object, ok = maybeChapter.(*Chapter)
		if !ok {
			object = new(Chapter)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChapter)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChapter))
			}
		}
	} else {
		s, ok := maybeChapter.(*[]*Chapter)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChapter)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChapter))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chapterR{}
		}
		args = append(args, object.ChapterID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chapterR{}
			}

			for _, a := range args {
				if a == obj.ChapterID {
					continue Outer
				}
			}

			args = append(args, obj.ChapterID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chapers_on_terms`),
		qm.WhereIn(`chapers_on_terms.chapers_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load chapers_on_terms")
	}

	var resultSlice []*ChapersOnTerm
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice chapers_on_terms")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on chapers_on_terms")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chapers_on_terms")
	}

	if len(chapersOnTermAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChaperChapersOnTerms = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &chapersOnTermR{}
			}
			foreign.R.Chaper = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ChapterID == foreign.ChapersID {
				local.R.ChaperChapersOnTerms = append(local.R.ChaperChapersOnTerms, foreign)
				if foreign.R == nil {
					foreign.R = &chapersOnTermR{}
				}
				foreign.R.Chaper = local
				break
			}
		}
	}

	return nil
}

// LoadPages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (chapterL) LoadPages(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChapter interface{}, mods queries.Applicator) error {
	var slice []*Chapter
	var object *Chapter

	if singular {
		var ok bool
		object, ok = maybeChapter.(*Chapter)
		if !ok {
			object = new(Chapter)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChapter)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChapter))
			}
		}
	} else {
		s, ok := maybeChapter.(*[]*Chapter)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChapter)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChapter))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chapterR{}
		}
		args = append(args, object.ChapterID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chapterR{}
			}

			for _, a := range args {
				if a == obj.ChapterID {
					continue Outer
				}
			}

			args = append(args, obj.ChapterID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`pages`),
		qm.WhereIn(`pages.chapter_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load pages")
	}

	var resultSlice []*Page
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice pages")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on pages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pages")
	}

	if len(pageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Pages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pageR{}
			}
			foreign.R.Chapter = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ChapterID == foreign.ChapterID {
				local.R.Pages = append(local.R.Pages, foreign)
				if foreign.R == nil {
					foreign.R = &pageR{}
				}
				foreign.R.Chapter = local
				break
			}
		}
	}

	return nil
}

// SetDynamic of the chapter to the related item.
// Sets o.R.Dynamic to related.
// Adds o to related.R.Chapters.
func (o *Chapter) SetDynamic(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Dynamic) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chapters\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"dynamic_id"}),
		strmangle.WhereClause("\"", "\"", 2, chapterPrimaryKeyColumns),
	)
	values := []interface{}{related.DynamicID, o.ChapterID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DynamicID = related.DynamicID
	if o.R == nil {
		o.R = &chapterR{
			Dynamic: related,
		}
	} else {
		o.R.Dynamic = related
	}

	if related.R == nil {
		related.R = &dynamicR{
			Chapters: ChapterSlice{o},
		}
	} else {
		related.R.Chapters = append(related.R.Chapters, o)
	}

	return nil
}

// AddChaperChapersOnTerms adds the given related objects to the existing relationships
// of the chapter, optionally inserting them as new records.
// Appends related to o.R.ChaperChapersOnTerms.
// Sets related.R.Chaper appropriately.
func (o *Chapter) AddChaperChapersOnTerms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ChapersOnTerm) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChapersID = o.ChapterID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"chapers_on_terms\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"chapers_id"}),
				strmangle.WhereClause("\"", "\"", 2, chapersOnTermPrimaryKeyColumns),
			)
			values := []interface{}{o.ChapterID, rel.ChapersOnTermsID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChapersID = o.ChapterID
		}
	}

	if o.R == nil {
		o.R = &chapterR{
			ChaperChapersOnTerms: related,
		}
	} else {
		o.R.ChaperChapersOnTerms = append(o.R.ChaperChapersOnTerms, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &chapersOnTermR{
				Chaper: o,
			}
		} else {
			rel.R.Chaper = o
		}
	}
	return nil
}

// AddPages adds the given related objects to the existing relationships
// of the chapter, optionally inserting them as new records.
// Appends related to o.R.Pages.
// Sets related.R.Chapter appropriately.
func (o *Chapter) AddPages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Page) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChapterID = o.ChapterID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"pages\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"chapter_id"}),
				strmangle.WhereClause("\"", "\"", 2, pagePrimaryKeyColumns),
			)
			values := []interface{}{o.ChapterID, rel.PageID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChapterID = o.ChapterID
		}
	}

	if o.R == nil {
		o.R = &chapterR{
			Pages: related,
		}
	} else {
		o.R.Pages = append(o.R.Pages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pageR{
				Chapter: o,
			}
		} else {
			rel.R.Chapter = o
		}
	}
	return nil
}

// Chapters retrieves all the records using an executor.
func Chapters(mods ...qm.QueryMod) chapterQuery {
	mods = append(mods, qm.From("\"chapters\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"chapters\".*"})
	}

	return chapterQuery{q}
}

// FindChapter retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChapter(ctx context.Context, exec boil.ContextExecutor, chapterID int, selectCols ...string) (*Chapter, error) {
	chapterObj := &Chapter{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"chapters\" where \"chapter_id\"=$1", sel,
	)

	q := queries.Raw(query, chapterID)

	err := q.Bind(ctx, exec, chapterObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from chapters")
	}

	if err = chapterObj.doAfterSelectHooks(ctx, exec); err != nil {
		return chapterObj, err
	}

	return chapterObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Chapter) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no chapters provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chapterColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	chapterInsertCacheMut.RLock()
	cache, cached := chapterInsertCache[key]
	chapterInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			chapterAllColumns,
			chapterColumnsWithDefault,
			chapterColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(chapterType, chapterMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(chapterType, chapterMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"chapters\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"chapters\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into chapters")
	}

	if !cached {
		chapterInsertCacheMut.Lock()
		chapterInsertCache[key] = cache
		chapterInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Chapter.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Chapter) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	chapterUpdateCacheMut.RLock()
	cache, cached := chapterUpdateCache[key]
	chapterUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			chapterAllColumns,
			chapterPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update chapters, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"chapters\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, chapterPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(chapterType, chapterMapping, append(wl, chapterPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update chapters row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for chapters")
	}

	if !cached {
		chapterUpdateCacheMut.Lock()
		chapterUpdateCache[key] = cache
		chapterUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q chapterQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for chapters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for chapters")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChapterSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chapterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"chapters\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, chapterPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in chapter slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all chapter")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Chapter) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no chapters provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chapterColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	chapterUpsertCacheMut.RLock()
	cache, cached := chapterUpsertCache[key]
	chapterUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			chapterAllColumns,
			chapterColumnsWithDefault,
			chapterColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			chapterAllColumns,
			chapterPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert chapters, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(chapterPrimaryKeyColumns))
			copy(conflict, chapterPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"chapters\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(chapterType, chapterMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(chapterType, chapterMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert chapters")
	}

	if !cached {
		chapterUpsertCacheMut.Lock()
		chapterUpsertCache[key] = cache
		chapterUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Chapter record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Chapter) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Chapter provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), chapterPrimaryKeyMapping)
	sql := "DELETE FROM \"chapters\" WHERE \"chapter_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from chapters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for chapters")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q chapterQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no chapterQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from chapters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for chapters")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChapterSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(chapterBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chapterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"chapters\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chapterPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from chapter slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for chapters")
	}

	if len(chapterAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Chapter) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindChapter(ctx, exec, o.ChapterID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChapterSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChapterSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chapterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"chapters\".* FROM \"chapters\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chapterPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ChapterSlice")
	}

	*o = slice

	return nil
}

// ChapterExists checks if the Chapter row exists.
func ChapterExists(ctx context.Context, exec boil.ContextExecutor, chapterID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"chapters\" where \"chapter_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, chapterID)
	}
	row := exec.QueryRowContext(ctx, sql, chapterID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if chapters exists")
	}

	return exists, nil
}

// Exists checks if the Chapter row exists.
func (o *Chapter) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ChapterExists(ctx, exec, o.ChapterID)
}
