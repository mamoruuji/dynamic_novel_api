// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Term is an object representing the database table.
type Term struct {
	TermID    int         `boil:"term_id" json:"term_id" toml:"term_id" yaml:"term_id"`
	Name      null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Text      string      `boil:"text" json:"text" toml:"text" yaml:"text"`
	UserID    string      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Order     int         `boil:"order" json:"order" toml:"order" yaml:"order"`
	DynamicID null.Int    `boil:"dynamic_id" json:"dynamic_id,omitempty" toml:"dynamic_id" yaml:"dynamic_id,omitempty"`
	ChapterID null.Int    `boil:"chapter_id" json:"chapter_id,omitempty" toml:"chapter_id" yaml:"chapter_id,omitempty"`
	SectionID null.Int    `boil:"section_id" json:"section_id,omitempty" toml:"section_id" yaml:"section_id,omitempty"`
	ImageID   null.Int    `boil:"image_id" json:"image_id,omitempty" toml:"image_id" yaml:"image_id,omitempty"`
	CreatedAt time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *termR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L termL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TermColumns = struct {
	TermID    string
	Name      string
	Text      string
	UserID    string
	Order     string
	DynamicID string
	ChapterID string
	SectionID string
	ImageID   string
	CreatedAt string
	UpdatedAt string
}{
	TermID:    "term_id",
	Name:      "name",
	Text:      "text",
	UserID:    "user_id",
	Order:     "order",
	DynamicID: "dynamic_id",
	ChapterID: "chapter_id",
	SectionID: "section_id",
	ImageID:   "image_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var TermTableColumns = struct {
	TermID    string
	Name      string
	Text      string
	UserID    string
	Order     string
	DynamicID string
	ChapterID string
	SectionID string
	ImageID   string
	CreatedAt string
	UpdatedAt string
}{
	TermID:    "terms.term_id",
	Name:      "terms.name",
	Text:      "terms.text",
	UserID:    "terms.user_id",
	Order:     "terms.order",
	DynamicID: "terms.dynamic_id",
	ChapterID: "terms.chapter_id",
	SectionID: "terms.section_id",
	ImageID:   "terms.image_id",
	CreatedAt: "terms.created_at",
	UpdatedAt: "terms.updated_at",
}

// Generated where

var TermWhere = struct {
	TermID    whereHelperint
	Name      whereHelpernull_String
	Text      whereHelperstring
	UserID    whereHelperstring
	Order     whereHelperint
	DynamicID whereHelpernull_Int
	ChapterID whereHelpernull_Int
	SectionID whereHelpernull_Int
	ImageID   whereHelpernull_Int
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	TermID:    whereHelperint{field: "\"terms\".\"term_id\""},
	Name:      whereHelpernull_String{field: "\"terms\".\"name\""},
	Text:      whereHelperstring{field: "\"terms\".\"text\""},
	UserID:    whereHelperstring{field: "\"terms\".\"user_id\""},
	Order:     whereHelperint{field: "\"terms\".\"order\""},
	DynamicID: whereHelpernull_Int{field: "\"terms\".\"dynamic_id\""},
	ChapterID: whereHelpernull_Int{field: "\"terms\".\"chapter_id\""},
	SectionID: whereHelpernull_Int{field: "\"terms\".\"section_id\""},
	ImageID:   whereHelpernull_Int{field: "\"terms\".\"image_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"terms\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"terms\".\"updated_at\""},
}

// TermRels is where relationship names are stored.
var TermRels = struct {
	Image           string
	User            string
	ChapersOnTerms  string
	DynamicsOnTerms string
	Sections        string
}{
	Image:           "Image",
	User:            "User",
	ChapersOnTerms:  "ChapersOnTerms",
	DynamicsOnTerms: "DynamicsOnTerms",
	Sections:        "Sections",
}

// termR is where relationships are stored.
type termR struct {
	Image           *Image              `boil:"Image" json:"Image" toml:"Image" yaml:"Image"`
	User            *User               `boil:"User" json:"User" toml:"User" yaml:"User"`
	ChapersOnTerms  ChapersOnTermSlice  `boil:"ChapersOnTerms" json:"ChapersOnTerms" toml:"ChapersOnTerms" yaml:"ChapersOnTerms"`
	DynamicsOnTerms DynamicsOnTermSlice `boil:"DynamicsOnTerms" json:"DynamicsOnTerms" toml:"DynamicsOnTerms" yaml:"DynamicsOnTerms"`
	Sections        SectionSlice        `boil:"Sections" json:"Sections" toml:"Sections" yaml:"Sections"`
}

// NewStruct creates a new relationship struct
func (*termR) NewStruct() *termR {
	return &termR{}
}

func (r *termR) GetImage() *Image {
	if r == nil {
		return nil
	}
	return r.Image
}

func (r *termR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *termR) GetChapersOnTerms() ChapersOnTermSlice {
	if r == nil {
		return nil
	}
	return r.ChapersOnTerms
}

func (r *termR) GetDynamicsOnTerms() DynamicsOnTermSlice {
	if r == nil {
		return nil
	}
	return r.DynamicsOnTerms
}

func (r *termR) GetSections() SectionSlice {
	if r == nil {
		return nil
	}
	return r.Sections
}

// termL is where Load methods for each relationship are stored.
type termL struct{}

var (
	termAllColumns            = []string{"term_id", "name", "text", "user_id", "order", "dynamic_id", "chapter_id", "section_id", "image_id", "created_at", "updated_at"}
	termColumnsWithoutDefault = []string{"text", "user_id", "order", "updated_at"}
	termColumnsWithDefault    = []string{"term_id", "name", "dynamic_id", "chapter_id", "section_id", "image_id", "created_at"}
	termPrimaryKeyColumns     = []string{"term_id"}
	termGeneratedColumns      = []string{}
)

type (
	// TermSlice is an alias for a slice of pointers to Term.
	// This should almost always be used instead of []Term.
	TermSlice []*Term
	// TermHook is the signature for custom Term hook methods
	TermHook func(context.Context, boil.ContextExecutor, *Term) error

	termQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	termType                 = reflect.TypeOf(&Term{})
	termMapping              = queries.MakeStructMapping(termType)
	termPrimaryKeyMapping, _ = queries.BindMapping(termType, termMapping, termPrimaryKeyColumns)
	termInsertCacheMut       sync.RWMutex
	termInsertCache          = make(map[string]insertCache)
	termUpdateCacheMut       sync.RWMutex
	termUpdateCache          = make(map[string]updateCache)
	termUpsertCacheMut       sync.RWMutex
	termUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var termAfterSelectHooks []TermHook

var termBeforeInsertHooks []TermHook
var termAfterInsertHooks []TermHook

var termBeforeUpdateHooks []TermHook
var termAfterUpdateHooks []TermHook

var termBeforeDeleteHooks []TermHook
var termAfterDeleteHooks []TermHook

var termBeforeUpsertHooks []TermHook
var termAfterUpsertHooks []TermHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Term) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range termAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Term) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range termBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Term) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range termAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Term) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range termBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Term) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range termAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Term) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range termBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Term) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range termAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Term) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range termBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Term) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range termAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTermHook registers your hook function for all future operations.
func AddTermHook(hookPoint boil.HookPoint, termHook TermHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		termAfterSelectHooks = append(termAfterSelectHooks, termHook)
	case boil.BeforeInsertHook:
		termBeforeInsertHooks = append(termBeforeInsertHooks, termHook)
	case boil.AfterInsertHook:
		termAfterInsertHooks = append(termAfterInsertHooks, termHook)
	case boil.BeforeUpdateHook:
		termBeforeUpdateHooks = append(termBeforeUpdateHooks, termHook)
	case boil.AfterUpdateHook:
		termAfterUpdateHooks = append(termAfterUpdateHooks, termHook)
	case boil.BeforeDeleteHook:
		termBeforeDeleteHooks = append(termBeforeDeleteHooks, termHook)
	case boil.AfterDeleteHook:
		termAfterDeleteHooks = append(termAfterDeleteHooks, termHook)
	case boil.BeforeUpsertHook:
		termBeforeUpsertHooks = append(termBeforeUpsertHooks, termHook)
	case boil.AfterUpsertHook:
		termAfterUpsertHooks = append(termAfterUpsertHooks, termHook)
	}
}

// One returns a single term record from the query.
func (q termQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Term, error) {
	o := &Term{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for terms")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Term records from the query.
func (q termQuery) All(ctx context.Context, exec boil.ContextExecutor) (TermSlice, error) {
	var o []*Term

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Term slice")
	}

	if len(termAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Term records in the query.
func (q termQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count terms rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q termQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if terms exists")
	}

	return count > 0, nil
}

// Image pointed to by the foreign key.
func (o *Term) Image(mods ...qm.QueryMod) imageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"image_id\" = ?", o.ImageID),
	}

	queryMods = append(queryMods, mods...)

	return Images(queryMods...)
}

// User pointed to by the foreign key.
func (o *Term) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"user_id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// ChapersOnTerms retrieves all the chapers_on_term's ChapersOnTerms with an executor.
func (o *Term) ChapersOnTerms(mods ...qm.QueryMod) chapersOnTermQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"chapers_on_terms\".\"term_id\"=?", o.TermID),
	)

	return ChapersOnTerms(queryMods...)
}

// DynamicsOnTerms retrieves all the dynamics_on_term's DynamicsOnTerms with an executor.
func (o *Term) DynamicsOnTerms(mods ...qm.QueryMod) dynamicsOnTermQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dynamics_on_terms\".\"term_id\"=?", o.TermID),
	)

	return DynamicsOnTerms(queryMods...)
}

// Sections retrieves all the section's Sections with an executor.
func (o *Term) Sections(mods ...qm.QueryMod) sectionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"sections\".\"term_id\"=?", o.TermID),
	)

	return Sections(queryMods...)
}

// LoadImage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (termL) LoadImage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTerm interface{}, mods queries.Applicator) error {
	var slice []*Term
	var object *Term

	if singular {
		var ok bool
		object, ok = maybeTerm.(*Term)
		if !ok {
			object = new(Term)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTerm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTerm))
			}
		}
	} else {
		s, ok := maybeTerm.(*[]*Term)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTerm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTerm))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &termR{}
		}
		if !queries.IsNil(object.ImageID) {
			args = append(args, object.ImageID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &termR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ImageID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ImageID) {
				args = append(args, obj.ImageID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`images`),
		qm.WhereIn(`images.image_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Image")
	}

	var resultSlice []*Image
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Image")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for images")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for images")
	}

	if len(imageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Image = foreign
		if foreign.R == nil {
			foreign.R = &imageR{}
		}
		foreign.R.Terms = append(foreign.R.Terms, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ImageID, foreign.ImageID) {
				local.R.Image = foreign
				if foreign.R == nil {
					foreign.R = &imageR{}
				}
				foreign.R.Terms = append(foreign.R.Terms, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (termL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTerm interface{}, mods queries.Applicator) error {
	var slice []*Term
	var object *Term

	if singular {
		var ok bool
		object, ok = maybeTerm.(*Term)
		if !ok {
			object = new(Term)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTerm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTerm))
			}
		}
	} else {
		s, ok := maybeTerm.(*[]*Term)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTerm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTerm))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &termR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &termR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Terms = append(foreign.R.Terms, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.UserID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Terms = append(foreign.R.Terms, local)
				break
			}
		}
	}

	return nil
}

// LoadChapersOnTerms allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (termL) LoadChapersOnTerms(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTerm interface{}, mods queries.Applicator) error {
	var slice []*Term
	var object *Term

	if singular {
		var ok bool
		object, ok = maybeTerm.(*Term)
		if !ok {
			object = new(Term)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTerm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTerm))
			}
		}
	} else {
		s, ok := maybeTerm.(*[]*Term)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTerm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTerm))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &termR{}
		}
		args = append(args, object.TermID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &termR{}
			}

			for _, a := range args {
				if a == obj.TermID {
					continue Outer
				}
			}

			args = append(args, obj.TermID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chapers_on_terms`),
		qm.WhereIn(`chapers_on_terms.term_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load chapers_on_terms")
	}

	var resultSlice []*ChapersOnTerm
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice chapers_on_terms")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on chapers_on_terms")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chapers_on_terms")
	}

	if len(chapersOnTermAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChapersOnTerms = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &chapersOnTermR{}
			}
			foreign.R.Term = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.TermID == foreign.TermID {
				local.R.ChapersOnTerms = append(local.R.ChapersOnTerms, foreign)
				if foreign.R == nil {
					foreign.R = &chapersOnTermR{}
				}
				foreign.R.Term = local
				break
			}
		}
	}

	return nil
}

// LoadDynamicsOnTerms allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (termL) LoadDynamicsOnTerms(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTerm interface{}, mods queries.Applicator) error {
	var slice []*Term
	var object *Term

	if singular {
		var ok bool
		object, ok = maybeTerm.(*Term)
		if !ok {
			object = new(Term)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTerm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTerm))
			}
		}
	} else {
		s, ok := maybeTerm.(*[]*Term)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTerm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTerm))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &termR{}
		}
		args = append(args, object.TermID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &termR{}
			}

			for _, a := range args {
				if a == obj.TermID {
					continue Outer
				}
			}

			args = append(args, obj.TermID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dynamics_on_terms`),
		qm.WhereIn(`dynamics_on_terms.term_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dynamics_on_terms")
	}

	var resultSlice []*DynamicsOnTerm
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dynamics_on_terms")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dynamics_on_terms")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dynamics_on_terms")
	}

	if len(dynamicsOnTermAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DynamicsOnTerms = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dynamicsOnTermR{}
			}
			foreign.R.Term = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.TermID == foreign.TermID {
				local.R.DynamicsOnTerms = append(local.R.DynamicsOnTerms, foreign)
				if foreign.R == nil {
					foreign.R = &dynamicsOnTermR{}
				}
				foreign.R.Term = local
				break
			}
		}
	}

	return nil
}

// LoadSections allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (termL) LoadSections(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTerm interface{}, mods queries.Applicator) error {
	var slice []*Term
	var object *Term

	if singular {
		var ok bool
		object, ok = maybeTerm.(*Term)
		if !ok {
			object = new(Term)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTerm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTerm))
			}
		}
	} else {
		s, ok := maybeTerm.(*[]*Term)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTerm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTerm))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &termR{}
		}
		args = append(args, object.TermID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &termR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TermID) {
					continue Outer
				}
			}

			args = append(args, obj.TermID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sections`),
		qm.WhereIn(`sections.term_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sections")
	}

	var resultSlice []*Section
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sections")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sections")
	}

	if len(sectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Sections = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sectionR{}
			}
			foreign.R.Term = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.TermID, foreign.TermID) {
				local.R.Sections = append(local.R.Sections, foreign)
				if foreign.R == nil {
					foreign.R = &sectionR{}
				}
				foreign.R.Term = local
				break
			}
		}
	}

	return nil
}

// SetImage of the term to the related item.
// Sets o.R.Image to related.
// Adds o to related.R.Terms.
func (o *Term) SetImage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Image) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"terms\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"image_id"}),
		strmangle.WhereClause("\"", "\"", 2, termPrimaryKeyColumns),
	)
	values := []interface{}{related.ImageID, o.TermID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ImageID, related.ImageID)
	if o.R == nil {
		o.R = &termR{
			Image: related,
		}
	} else {
		o.R.Image = related
	}

	if related.R == nil {
		related.R = &imageR{
			Terms: TermSlice{o},
		}
	} else {
		related.R.Terms = append(related.R.Terms, o)
	}

	return nil
}

// RemoveImage relationship.
// Sets o.R.Image to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Term) RemoveImage(ctx context.Context, exec boil.ContextExecutor, related *Image) error {
	var err error

	queries.SetScanner(&o.ImageID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("image_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Image = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Terms {
		if queries.Equal(o.ImageID, ri.ImageID) {
			continue
		}

		ln := len(related.R.Terms)
		if ln > 1 && i < ln-1 {
			related.R.Terms[i] = related.R.Terms[ln-1]
		}
		related.R.Terms = related.R.Terms[:ln-1]
		break
	}
	return nil
}

// SetUser of the term to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Terms.
func (o *Term) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"terms\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, termPrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.TermID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.UserID
	if o.R == nil {
		o.R = &termR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Terms: TermSlice{o},
		}
	} else {
		related.R.Terms = append(related.R.Terms, o)
	}

	return nil
}

// AddChapersOnTerms adds the given related objects to the existing relationships
// of the term, optionally inserting them as new records.
// Appends related to o.R.ChapersOnTerms.
// Sets related.R.Term appropriately.
func (o *Term) AddChapersOnTerms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ChapersOnTerm) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TermID = o.TermID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"chapers_on_terms\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"term_id"}),
				strmangle.WhereClause("\"", "\"", 2, chapersOnTermPrimaryKeyColumns),
			)
			values := []interface{}{o.TermID, rel.ChapersOnTermsID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TermID = o.TermID
		}
	}

	if o.R == nil {
		o.R = &termR{
			ChapersOnTerms: related,
		}
	} else {
		o.R.ChapersOnTerms = append(o.R.ChapersOnTerms, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &chapersOnTermR{
				Term: o,
			}
		} else {
			rel.R.Term = o
		}
	}
	return nil
}

// AddDynamicsOnTerms adds the given related objects to the existing relationships
// of the term, optionally inserting them as new records.
// Appends related to o.R.DynamicsOnTerms.
// Sets related.R.Term appropriately.
func (o *Term) AddDynamicsOnTerms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DynamicsOnTerm) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TermID = o.TermID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dynamics_on_terms\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"term_id"}),
				strmangle.WhereClause("\"", "\"", 2, dynamicsOnTermPrimaryKeyColumns),
			)
			values := []interface{}{o.TermID, rel.DynamicsOnTermsID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TermID = o.TermID
		}
	}

	if o.R == nil {
		o.R = &termR{
			DynamicsOnTerms: related,
		}
	} else {
		o.R.DynamicsOnTerms = append(o.R.DynamicsOnTerms, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dynamicsOnTermR{
				Term: o,
			}
		} else {
			rel.R.Term = o
		}
	}
	return nil
}

// AddSections adds the given related objects to the existing relationships
// of the term, optionally inserting them as new records.
// Appends related to o.R.Sections.
// Sets related.R.Term appropriately.
func (o *Term) AddSections(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Section) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TermID, o.TermID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"sections\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"term_id"}),
				strmangle.WhereClause("\"", "\"", 2, sectionPrimaryKeyColumns),
			)
			values := []interface{}{o.TermID, rel.SectionID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TermID, o.TermID)
		}
	}

	if o.R == nil {
		o.R = &termR{
			Sections: related,
		}
	} else {
		o.R.Sections = append(o.R.Sections, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sectionR{
				Term: o,
			}
		} else {
			rel.R.Term = o
		}
	}
	return nil
}

// SetSections removes all previously related items of the
// term replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Term's Sections accordingly.
// Replaces o.R.Sections with related.
// Sets related.R.Term's Sections accordingly.
func (o *Term) SetSections(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Section) error {
	query := "update \"sections\" set \"term_id\" = null where \"term_id\" = $1"
	values := []interface{}{o.TermID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Sections {
			queries.SetScanner(&rel.TermID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Term = nil
		}
		o.R.Sections = nil
	}

	return o.AddSections(ctx, exec, insert, related...)
}

// RemoveSections relationships from objects passed in.
// Removes related items from R.Sections (uses pointer comparison, removal does not keep order)
// Sets related.R.Term.
func (o *Term) RemoveSections(ctx context.Context, exec boil.ContextExecutor, related ...*Section) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TermID, nil)
		if rel.R != nil {
			rel.R.Term = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("term_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Sections {
			if rel != ri {
				continue
			}

			ln := len(o.R.Sections)
			if ln > 1 && i < ln-1 {
				o.R.Sections[i] = o.R.Sections[ln-1]
			}
			o.R.Sections = o.R.Sections[:ln-1]
			break
		}
	}

	return nil
}

// Terms retrieves all the records using an executor.
func Terms(mods ...qm.QueryMod) termQuery {
	mods = append(mods, qm.From("\"terms\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"terms\".*"})
	}

	return termQuery{q}
}

// FindTerm retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTerm(ctx context.Context, exec boil.ContextExecutor, termID int, selectCols ...string) (*Term, error) {
	termObj := &Term{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"terms\" where \"term_id\"=$1", sel,
	)

	q := queries.Raw(query, termID)

	err := q.Bind(ctx, exec, termObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from terms")
	}

	if err = termObj.doAfterSelectHooks(ctx, exec); err != nil {
		return termObj, err
	}

	return termObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Term) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no terms provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(termColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	termInsertCacheMut.RLock()
	cache, cached := termInsertCache[key]
	termInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			termAllColumns,
			termColumnsWithDefault,
			termColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(termType, termMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(termType, termMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"terms\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"terms\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into terms")
	}

	if !cached {
		termInsertCacheMut.Lock()
		termInsertCache[key] = cache
		termInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Term.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Term) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	termUpdateCacheMut.RLock()
	cache, cached := termUpdateCache[key]
	termUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			termAllColumns,
			termPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update terms, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"terms\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, termPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(termType, termMapping, append(wl, termPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update terms row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for terms")
	}

	if !cached {
		termUpdateCacheMut.Lock()
		termUpdateCache[key] = cache
		termUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q termQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for terms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for terms")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TermSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), termPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"terms\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, termPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in term slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all term")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Term) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no terms provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(termColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	termUpsertCacheMut.RLock()
	cache, cached := termUpsertCache[key]
	termUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			termAllColumns,
			termColumnsWithDefault,
			termColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			termAllColumns,
			termPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert terms, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(termPrimaryKeyColumns))
			copy(conflict, termPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"terms\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(termType, termMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(termType, termMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert terms")
	}

	if !cached {
		termUpsertCacheMut.Lock()
		termUpsertCache[key] = cache
		termUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Term record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Term) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Term provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), termPrimaryKeyMapping)
	sql := "DELETE FROM \"terms\" WHERE \"term_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from terms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for terms")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q termQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no termQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from terms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for terms")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TermSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(termBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), termPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"terms\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, termPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from term slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for terms")
	}

	if len(termAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Term) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTerm(ctx, exec, o.TermID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TermSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TermSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), termPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"terms\".* FROM \"terms\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, termPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TermSlice")
	}

	*o = slice

	return nil
}

// TermExists checks if the Term row exists.
func TermExists(ctx context.Context, exec boil.ContextExecutor, termID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"terms\" where \"term_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, termID)
	}
	row := exec.QueryRowContext(ctx, sql, termID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if terms exists")
	}

	return exists, nil
}

// Exists checks if the Term row exists.
func (o *Term) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TermExists(ctx, exec, o.TermID)
}
