// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Dynamic is an object representing the database table.
type Dynamic struct {
	DynamicID int       `boil:"dynamic_id" json:"dynamic_id" toml:"dynamic_id" yaml:"dynamic_id"`
	Title     string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	Overview  string    `boil:"overview" json:"overview" toml:"overview" yaml:"overview"`
	Published bool      `boil:"published" json:"published" toml:"published" yaml:"published"`
	UserID    string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *dynamicR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dynamicL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DynamicColumns = struct {
	DynamicID string
	Title     string
	Overview  string
	Published string
	UserID    string
	CreatedAt string
	UpdatedAt string
}{
	DynamicID: "dynamic_id",
	Title:     "title",
	Overview:  "overview",
	Published: "published",
	UserID:    "user_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var DynamicTableColumns = struct {
	DynamicID string
	Title     string
	Overview  string
	Published string
	UserID    string
	CreatedAt string
	UpdatedAt string
}{
	DynamicID: "dynamics.dynamic_id",
	Title:     "dynamics.title",
	Overview:  "dynamics.overview",
	Published: "dynamics.published",
	UserID:    "dynamics.user_id",
	CreatedAt: "dynamics.created_at",
	UpdatedAt: "dynamics.updated_at",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var DynamicWhere = struct {
	DynamicID whereHelperint
	Title     whereHelperstring
	Overview  whereHelperstring
	Published whereHelperbool
	UserID    whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	DynamicID: whereHelperint{field: "\"dynamics\".\"dynamic_id\""},
	Title:     whereHelperstring{field: "\"dynamics\".\"title\""},
	Overview:  whereHelperstring{field: "\"dynamics\".\"overview\""},
	Published: whereHelperbool{field: "\"dynamics\".\"published\""},
	UserID:    whereHelperstring{field: "\"dynamics\".\"user_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"dynamics\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"dynamics\".\"updated_at\""},
}

// DynamicRels is where relationship names are stored.
var DynamicRels = struct {
	User            string
	Chapters        string
	DynamicsOnTerms string
	Impressions     string
	Marks           string
}{
	User:            "User",
	Chapters:        "Chapters",
	DynamicsOnTerms: "DynamicsOnTerms",
	Impressions:     "Impressions",
	Marks:           "Marks",
}

// dynamicR is where relationships are stored.
type dynamicR struct {
	User            *User               `boil:"User" json:"User" toml:"User" yaml:"User"`
	Chapters        ChapterSlice        `boil:"Chapters" json:"Chapters" toml:"Chapters" yaml:"Chapters"`
	DynamicsOnTerms DynamicsOnTermSlice `boil:"DynamicsOnTerms" json:"DynamicsOnTerms" toml:"DynamicsOnTerms" yaml:"DynamicsOnTerms"`
	Impressions     ImpressionSlice     `boil:"Impressions" json:"Impressions" toml:"Impressions" yaml:"Impressions"`
	Marks           MarkSlice           `boil:"Marks" json:"Marks" toml:"Marks" yaml:"Marks"`
}

// NewStruct creates a new relationship struct
func (*dynamicR) NewStruct() *dynamicR {
	return &dynamicR{}
}

func (r *dynamicR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *dynamicR) GetChapters() ChapterSlice {
	if r == nil {
		return nil
	}
	return r.Chapters
}

func (r *dynamicR) GetDynamicsOnTerms() DynamicsOnTermSlice {
	if r == nil {
		return nil
	}
	return r.DynamicsOnTerms
}

func (r *dynamicR) GetImpressions() ImpressionSlice {
	if r == nil {
		return nil
	}
	return r.Impressions
}

func (r *dynamicR) GetMarks() MarkSlice {
	if r == nil {
		return nil
	}
	return r.Marks
}

// dynamicL is where Load methods for each relationship are stored.
type dynamicL struct{}

var (
	dynamicAllColumns            = []string{"dynamic_id", "title", "overview", "published", "user_id", "created_at", "updated_at"}
	dynamicColumnsWithoutDefault = []string{"title", "overview", "user_id", "updated_at"}
	dynamicColumnsWithDefault    = []string{"dynamic_id", "published", "created_at"}
	dynamicPrimaryKeyColumns     = []string{"dynamic_id"}
	dynamicGeneratedColumns      = []string{}
)

type (
	// DynamicSlice is an alias for a slice of pointers to Dynamic.
	// This should almost always be used instead of []Dynamic.
	DynamicSlice []*Dynamic
	// DynamicHook is the signature for custom Dynamic hook methods
	DynamicHook func(context.Context, boil.ContextExecutor, *Dynamic) error

	dynamicQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dynamicType                 = reflect.TypeOf(&Dynamic{})
	dynamicMapping              = queries.MakeStructMapping(dynamicType)
	dynamicPrimaryKeyMapping, _ = queries.BindMapping(dynamicType, dynamicMapping, dynamicPrimaryKeyColumns)
	dynamicInsertCacheMut       sync.RWMutex
	dynamicInsertCache          = make(map[string]insertCache)
	dynamicUpdateCacheMut       sync.RWMutex
	dynamicUpdateCache          = make(map[string]updateCache)
	dynamicUpsertCacheMut       sync.RWMutex
	dynamicUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dynamicAfterSelectHooks []DynamicHook

var dynamicBeforeInsertHooks []DynamicHook
var dynamicAfterInsertHooks []DynamicHook

var dynamicBeforeUpdateHooks []DynamicHook
var dynamicAfterUpdateHooks []DynamicHook

var dynamicBeforeDeleteHooks []DynamicHook
var dynamicAfterDeleteHooks []DynamicHook

var dynamicBeforeUpsertHooks []DynamicHook
var dynamicAfterUpsertHooks []DynamicHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Dynamic) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Dynamic) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Dynamic) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Dynamic) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Dynamic) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Dynamic) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Dynamic) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Dynamic) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Dynamic) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDynamicHook registers your hook function for all future operations.
func AddDynamicHook(hookPoint boil.HookPoint, dynamicHook DynamicHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dynamicAfterSelectHooks = append(dynamicAfterSelectHooks, dynamicHook)
	case boil.BeforeInsertHook:
		dynamicBeforeInsertHooks = append(dynamicBeforeInsertHooks, dynamicHook)
	case boil.AfterInsertHook:
		dynamicAfterInsertHooks = append(dynamicAfterInsertHooks, dynamicHook)
	case boil.BeforeUpdateHook:
		dynamicBeforeUpdateHooks = append(dynamicBeforeUpdateHooks, dynamicHook)
	case boil.AfterUpdateHook:
		dynamicAfterUpdateHooks = append(dynamicAfterUpdateHooks, dynamicHook)
	case boil.BeforeDeleteHook:
		dynamicBeforeDeleteHooks = append(dynamicBeforeDeleteHooks, dynamicHook)
	case boil.AfterDeleteHook:
		dynamicAfterDeleteHooks = append(dynamicAfterDeleteHooks, dynamicHook)
	case boil.BeforeUpsertHook:
		dynamicBeforeUpsertHooks = append(dynamicBeforeUpsertHooks, dynamicHook)
	case boil.AfterUpsertHook:
		dynamicAfterUpsertHooks = append(dynamicAfterUpsertHooks, dynamicHook)
	}
}

// One returns a single dynamic record from the query.
func (q dynamicQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Dynamic, error) {
	o := &Dynamic{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for dynamics")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Dynamic records from the query.
func (q dynamicQuery) All(ctx context.Context, exec boil.ContextExecutor) (DynamicSlice, error) {
	var o []*Dynamic

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Dynamic slice")
	}

	if len(dynamicAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Dynamic records in the query.
func (q dynamicQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count dynamics rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dynamicQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if dynamics exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *Dynamic) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"user_id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Chapters retrieves all the chapter's Chapters with an executor.
func (o *Dynamic) Chapters(mods ...qm.QueryMod) chapterQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"chapters\".\"dynamic_id\"=?", o.DynamicID),
	)

	return Chapters(queryMods...)
}

// DynamicsOnTerms retrieves all the dynamics_on_term's DynamicsOnTerms with an executor.
func (o *Dynamic) DynamicsOnTerms(mods ...qm.QueryMod) dynamicsOnTermQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dynamics_on_terms\".\"dynamic_id\"=?", o.DynamicID),
	)

	return DynamicsOnTerms(queryMods...)
}

// Impressions retrieves all the impression's Impressions with an executor.
func (o *Dynamic) Impressions(mods ...qm.QueryMod) impressionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"impressions\".\"dynamic_id\"=?", o.DynamicID),
	)

	return Impressions(queryMods...)
}

// Marks retrieves all the mark's Marks with an executor.
func (o *Dynamic) Marks(mods ...qm.QueryMod) markQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"marks\".\"dynamic_id\"=?", o.DynamicID),
	)

	return Marks(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dynamicL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDynamic interface{}, mods queries.Applicator) error {
	var slice []*Dynamic
	var object *Dynamic

	if singular {
		var ok bool
		object, ok = maybeDynamic.(*Dynamic)
		if !ok {
			object = new(Dynamic)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDynamic)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDynamic))
			}
		}
	} else {
		s, ok := maybeDynamic.(*[]*Dynamic)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDynamic)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDynamic))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dynamicR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dynamicR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Dynamics = append(foreign.R.Dynamics, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.UserID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Dynamics = append(foreign.R.Dynamics, local)
				break
			}
		}
	}

	return nil
}

// LoadChapters allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dynamicL) LoadChapters(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDynamic interface{}, mods queries.Applicator) error {
	var slice []*Dynamic
	var object *Dynamic

	if singular {
		var ok bool
		object, ok = maybeDynamic.(*Dynamic)
		if !ok {
			object = new(Dynamic)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDynamic)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDynamic))
			}
		}
	} else {
		s, ok := maybeDynamic.(*[]*Dynamic)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDynamic)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDynamic))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dynamicR{}
		}
		args = append(args, object.DynamicID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dynamicR{}
			}

			for _, a := range args {
				if a == obj.DynamicID {
					continue Outer
				}
			}

			args = append(args, obj.DynamicID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chapters`),
		qm.WhereIn(`chapters.dynamic_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load chapters")
	}

	var resultSlice []*Chapter
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice chapters")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on chapters")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chapters")
	}

	if len(chapterAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Chapters = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &chapterR{}
			}
			foreign.R.Dynamic = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.DynamicID == foreign.DynamicID {
				local.R.Chapters = append(local.R.Chapters, foreign)
				if foreign.R == nil {
					foreign.R = &chapterR{}
				}
				foreign.R.Dynamic = local
				break
			}
		}
	}

	return nil
}

// LoadDynamicsOnTerms allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dynamicL) LoadDynamicsOnTerms(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDynamic interface{}, mods queries.Applicator) error {
	var slice []*Dynamic
	var object *Dynamic

	if singular {
		var ok bool
		object, ok = maybeDynamic.(*Dynamic)
		if !ok {
			object = new(Dynamic)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDynamic)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDynamic))
			}
		}
	} else {
		s, ok := maybeDynamic.(*[]*Dynamic)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDynamic)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDynamic))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dynamicR{}
		}
		args = append(args, object.DynamicID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dynamicR{}
			}

			for _, a := range args {
				if a == obj.DynamicID {
					continue Outer
				}
			}

			args = append(args, obj.DynamicID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dynamics_on_terms`),
		qm.WhereIn(`dynamics_on_terms.dynamic_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dynamics_on_terms")
	}

	var resultSlice []*DynamicsOnTerm
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dynamics_on_terms")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dynamics_on_terms")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dynamics_on_terms")
	}

	if len(dynamicsOnTermAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DynamicsOnTerms = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dynamicsOnTermR{}
			}
			foreign.R.Dynamic = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.DynamicID == foreign.DynamicID {
				local.R.DynamicsOnTerms = append(local.R.DynamicsOnTerms, foreign)
				if foreign.R == nil {
					foreign.R = &dynamicsOnTermR{}
				}
				foreign.R.Dynamic = local
				break
			}
		}
	}

	return nil
}

// LoadImpressions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dynamicL) LoadImpressions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDynamic interface{}, mods queries.Applicator) error {
	var slice []*Dynamic
	var object *Dynamic

	if singular {
		var ok bool
		object, ok = maybeDynamic.(*Dynamic)
		if !ok {
			object = new(Dynamic)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDynamic)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDynamic))
			}
		}
	} else {
		s, ok := maybeDynamic.(*[]*Dynamic)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDynamic)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDynamic))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dynamicR{}
		}
		args = append(args, object.DynamicID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dynamicR{}
			}

			for _, a := range args {
				if a == obj.DynamicID {
					continue Outer
				}
			}

			args = append(args, obj.DynamicID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`impressions`),
		qm.WhereIn(`impressions.dynamic_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load impressions")
	}

	var resultSlice []*Impression
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice impressions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on impressions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for impressions")
	}

	if len(impressionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Impressions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &impressionR{}
			}
			foreign.R.Dynamic = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.DynamicID == foreign.DynamicID {
				local.R.Impressions = append(local.R.Impressions, foreign)
				if foreign.R == nil {
					foreign.R = &impressionR{}
				}
				foreign.R.Dynamic = local
				break
			}
		}
	}

	return nil
}

// LoadMarks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dynamicL) LoadMarks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDynamic interface{}, mods queries.Applicator) error {
	var slice []*Dynamic
	var object *Dynamic

	if singular {
		var ok bool
		object, ok = maybeDynamic.(*Dynamic)
		if !ok {
			object = new(Dynamic)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDynamic)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDynamic))
			}
		}
	} else {
		s, ok := maybeDynamic.(*[]*Dynamic)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDynamic)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDynamic))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dynamicR{}
		}
		args = append(args, object.DynamicID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dynamicR{}
			}

			for _, a := range args {
				if a == obj.DynamicID {
					continue Outer
				}
			}

			args = append(args, obj.DynamicID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`marks`),
		qm.WhereIn(`marks.dynamic_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load marks")
	}

	var resultSlice []*Mark
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice marks")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on marks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for marks")
	}

	if len(markAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Marks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &markR{}
			}
			foreign.R.Dynamic = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.DynamicID == foreign.DynamicID {
				local.R.Marks = append(local.R.Marks, foreign)
				if foreign.R == nil {
					foreign.R = &markR{}
				}
				foreign.R.Dynamic = local
				break
			}
		}
	}

	return nil
}

// SetUser of the dynamic to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Dynamics.
func (o *Dynamic) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"dynamics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, dynamicPrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.DynamicID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.UserID
	if o.R == nil {
		o.R = &dynamicR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Dynamics: DynamicSlice{o},
		}
	} else {
		related.R.Dynamics = append(related.R.Dynamics, o)
	}

	return nil
}

// AddChapters adds the given related objects to the existing relationships
// of the dynamic, optionally inserting them as new records.
// Appends related to o.R.Chapters.
// Sets related.R.Dynamic appropriately.
func (o *Dynamic) AddChapters(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Chapter) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DynamicID = o.DynamicID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"chapters\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"dynamic_id"}),
				strmangle.WhereClause("\"", "\"", 2, chapterPrimaryKeyColumns),
			)
			values := []interface{}{o.DynamicID, rel.ChapterID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DynamicID = o.DynamicID
		}
	}

	if o.R == nil {
		o.R = &dynamicR{
			Chapters: related,
		}
	} else {
		o.R.Chapters = append(o.R.Chapters, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &chapterR{
				Dynamic: o,
			}
		} else {
			rel.R.Dynamic = o
		}
	}
	return nil
}

// AddDynamicsOnTerms adds the given related objects to the existing relationships
// of the dynamic, optionally inserting them as new records.
// Appends related to o.R.DynamicsOnTerms.
// Sets related.R.Dynamic appropriately.
func (o *Dynamic) AddDynamicsOnTerms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DynamicsOnTerm) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DynamicID = o.DynamicID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dynamics_on_terms\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"dynamic_id"}),
				strmangle.WhereClause("\"", "\"", 2, dynamicsOnTermPrimaryKeyColumns),
			)
			values := []interface{}{o.DynamicID, rel.DynamicsOnTermsID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DynamicID = o.DynamicID
		}
	}

	if o.R == nil {
		o.R = &dynamicR{
			DynamicsOnTerms: related,
		}
	} else {
		o.R.DynamicsOnTerms = append(o.R.DynamicsOnTerms, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dynamicsOnTermR{
				Dynamic: o,
			}
		} else {
			rel.R.Dynamic = o
		}
	}
	return nil
}

// AddImpressions adds the given related objects to the existing relationships
// of the dynamic, optionally inserting them as new records.
// Appends related to o.R.Impressions.
// Sets related.R.Dynamic appropriately.
func (o *Dynamic) AddImpressions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Impression) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DynamicID = o.DynamicID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"impressions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"dynamic_id"}),
				strmangle.WhereClause("\"", "\"", 2, impressionPrimaryKeyColumns),
			)
			values := []interface{}{o.DynamicID, rel.ImpressionID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DynamicID = o.DynamicID
		}
	}

	if o.R == nil {
		o.R = &dynamicR{
			Impressions: related,
		}
	} else {
		o.R.Impressions = append(o.R.Impressions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &impressionR{
				Dynamic: o,
			}
		} else {
			rel.R.Dynamic = o
		}
	}
	return nil
}

// AddMarks adds the given related objects to the existing relationships
// of the dynamic, optionally inserting them as new records.
// Appends related to o.R.Marks.
// Sets related.R.Dynamic appropriately.
func (o *Dynamic) AddMarks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Mark) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DynamicID = o.DynamicID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"marks\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"dynamic_id"}),
				strmangle.WhereClause("\"", "\"", 2, markPrimaryKeyColumns),
			)
			values := []interface{}{o.DynamicID, rel.MarkID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DynamicID = o.DynamicID
		}
	}

	if o.R == nil {
		o.R = &dynamicR{
			Marks: related,
		}
	} else {
		o.R.Marks = append(o.R.Marks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &markR{
				Dynamic: o,
			}
		} else {
			rel.R.Dynamic = o
		}
	}
	return nil
}

// Dynamics retrieves all the records using an executor.
func Dynamics(mods ...qm.QueryMod) dynamicQuery {
	mods = append(mods, qm.From("\"dynamics\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"dynamics\".*"})
	}

	return dynamicQuery{q}
}

// FindDynamic retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDynamic(ctx context.Context, exec boil.ContextExecutor, dynamicID int, selectCols ...string) (*Dynamic, error) {
	dynamicObj := &Dynamic{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"dynamics\" where \"dynamic_id\"=$1", sel,
	)

	q := queries.Raw(query, dynamicID)

	err := q.Bind(ctx, exec, dynamicObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from dynamics")
	}

	if err = dynamicObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dynamicObj, err
	}

	return dynamicObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Dynamic) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dynamics provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dynamicColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dynamicInsertCacheMut.RLock()
	cache, cached := dynamicInsertCache[key]
	dynamicInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dynamicAllColumns,
			dynamicColumnsWithDefault,
			dynamicColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dynamicType, dynamicMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dynamicType, dynamicMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"dynamics\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"dynamics\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into dynamics")
	}

	if !cached {
		dynamicInsertCacheMut.Lock()
		dynamicInsertCache[key] = cache
		dynamicInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Dynamic.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Dynamic) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dynamicUpdateCacheMut.RLock()
	cache, cached := dynamicUpdateCache[key]
	dynamicUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dynamicAllColumns,
			dynamicPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update dynamics, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"dynamics\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, dynamicPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dynamicType, dynamicMapping, append(wl, dynamicPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update dynamics row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for dynamics")
	}

	if !cached {
		dynamicUpdateCacheMut.Lock()
		dynamicUpdateCache[key] = cache
		dynamicUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dynamicQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for dynamics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for dynamics")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DynamicSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dynamicPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"dynamics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, dynamicPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dynamic slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dynamic")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Dynamic) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dynamics provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dynamicColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dynamicUpsertCacheMut.RLock()
	cache, cached := dynamicUpsertCache[key]
	dynamicUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dynamicAllColumns,
			dynamicColumnsWithDefault,
			dynamicColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dynamicAllColumns,
			dynamicPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert dynamics, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(dynamicPrimaryKeyColumns))
			copy(conflict, dynamicPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"dynamics\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(dynamicType, dynamicMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dynamicType, dynamicMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert dynamics")
	}

	if !cached {
		dynamicUpsertCacheMut.Lock()
		dynamicUpsertCache[key] = cache
		dynamicUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Dynamic record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Dynamic) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Dynamic provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dynamicPrimaryKeyMapping)
	sql := "DELETE FROM \"dynamics\" WHERE \"dynamic_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from dynamics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for dynamics")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dynamicQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dynamicQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dynamics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dynamics")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DynamicSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dynamicBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dynamicPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"dynamics\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dynamicPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dynamic slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dynamics")
	}

	if len(dynamicAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Dynamic) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDynamic(ctx, exec, o.DynamicID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DynamicSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DynamicSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dynamicPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"dynamics\".* FROM \"dynamics\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dynamicPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DynamicSlice")
	}

	*o = slice

	return nil
}

// DynamicExists checks if the Dynamic row exists.
func DynamicExists(ctx context.Context, exec boil.ContextExecutor, dynamicID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"dynamics\" where \"dynamic_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, dynamicID)
	}
	row := exec.QueryRowContext(ctx, sql, dynamicID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if dynamics exists")
	}

	return exists, nil
}

// Exists checks if the Dynamic row exists.
func (o *Dynamic) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DynamicExists(ctx, exec, o.DynamicID)
}
