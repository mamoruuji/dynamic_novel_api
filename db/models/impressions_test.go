// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testImpressions(t *testing.T) {
	t.Parallel()

	query := Impressions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testImpressionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Impression{}
	if err = randomize.Struct(seed, o, impressionDBTypes, true, impressionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Impression struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Impressions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testImpressionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Impression{}
	if err = randomize.Struct(seed, o, impressionDBTypes, true, impressionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Impression struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Impressions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Impressions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testImpressionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Impression{}
	if err = randomize.Struct(seed, o, impressionDBTypes, true, impressionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Impression struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ImpressionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Impressions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testImpressionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Impression{}
	if err = randomize.Struct(seed, o, impressionDBTypes, true, impressionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Impression struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ImpressionExists(ctx, tx, o.ImpressionID)
	if err != nil {
		t.Errorf("Unable to check if Impression exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ImpressionExists to return true, but got false.")
	}
}

func testImpressionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Impression{}
	if err = randomize.Struct(seed, o, impressionDBTypes, true, impressionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Impression struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	impressionFound, err := FindImpression(ctx, tx, o.ImpressionID)
	if err != nil {
		t.Error(err)
	}

	if impressionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testImpressionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Impression{}
	if err = randomize.Struct(seed, o, impressionDBTypes, true, impressionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Impression struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Impressions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testImpressionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Impression{}
	if err = randomize.Struct(seed, o, impressionDBTypes, true, impressionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Impression struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Impressions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testImpressionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	impressionOne := &Impression{}
	impressionTwo := &Impression{}
	if err = randomize.Struct(seed, impressionOne, impressionDBTypes, false, impressionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Impression struct: %s", err)
	}
	if err = randomize.Struct(seed, impressionTwo, impressionDBTypes, false, impressionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Impression struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = impressionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = impressionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Impressions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testImpressionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	impressionOne := &Impression{}
	impressionTwo := &Impression{}
	if err = randomize.Struct(seed, impressionOne, impressionDBTypes, false, impressionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Impression struct: %s", err)
	}
	if err = randomize.Struct(seed, impressionTwo, impressionDBTypes, false, impressionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Impression struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = impressionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = impressionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Impressions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func impressionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Impression) error {
	*o = Impression{}
	return nil
}

func impressionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Impression) error {
	*o = Impression{}
	return nil
}

func impressionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Impression) error {
	*o = Impression{}
	return nil
}

func impressionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Impression) error {
	*o = Impression{}
	return nil
}

func impressionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Impression) error {
	*o = Impression{}
	return nil
}

func impressionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Impression) error {
	*o = Impression{}
	return nil
}

func impressionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Impression) error {
	*o = Impression{}
	return nil
}

func impressionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Impression) error {
	*o = Impression{}
	return nil
}

func impressionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Impression) error {
	*o = Impression{}
	return nil
}

func testImpressionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Impression{}
	o := &Impression{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, impressionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Impression object: %s", err)
	}

	AddImpressionHook(boil.BeforeInsertHook, impressionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	impressionBeforeInsertHooks = []ImpressionHook{}

	AddImpressionHook(boil.AfterInsertHook, impressionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	impressionAfterInsertHooks = []ImpressionHook{}

	AddImpressionHook(boil.AfterSelectHook, impressionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	impressionAfterSelectHooks = []ImpressionHook{}

	AddImpressionHook(boil.BeforeUpdateHook, impressionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	impressionBeforeUpdateHooks = []ImpressionHook{}

	AddImpressionHook(boil.AfterUpdateHook, impressionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	impressionAfterUpdateHooks = []ImpressionHook{}

	AddImpressionHook(boil.BeforeDeleteHook, impressionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	impressionBeforeDeleteHooks = []ImpressionHook{}

	AddImpressionHook(boil.AfterDeleteHook, impressionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	impressionAfterDeleteHooks = []ImpressionHook{}

	AddImpressionHook(boil.BeforeUpsertHook, impressionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	impressionBeforeUpsertHooks = []ImpressionHook{}

	AddImpressionHook(boil.AfterUpsertHook, impressionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	impressionAfterUpsertHooks = []ImpressionHook{}
}

func testImpressionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Impression{}
	if err = randomize.Struct(seed, o, impressionDBTypes, true, impressionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Impression struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Impressions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testImpressionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Impression{}
	if err = randomize.Struct(seed, o, impressionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Impression struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(impressionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Impressions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testImpressionToOneDynamicUsingDynamic(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Impression
	var foreign Dynamic

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, impressionDBTypes, false, impressionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Impression struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dynamicDBTypes, false, dynamicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dynamic struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DynamicID = foreign.DynamicID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Dynamic().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.DynamicID != foreign.DynamicID {
		t.Errorf("want: %v, got %v", foreign.DynamicID, check.DynamicID)
	}

	ranAfterSelectHook := false
	AddDynamicHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Dynamic) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ImpressionSlice{&local}
	if err = local.L.LoadDynamic(ctx, tx, false, (*[]*Impression)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Dynamic == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Dynamic = nil
	if err = local.L.LoadDynamic(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Dynamic == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testImpressionToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Impression
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, impressionDBTypes, false, impressionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Impression struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.UserID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.UserID != foreign.UserID {
		t.Errorf("want: %v, got %v", foreign.UserID, check.UserID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ImpressionSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*Impression)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testImpressionToOneSetOpDynamicUsingDynamic(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Impression
	var b, c Dynamic

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, impressionDBTypes, false, strmangle.SetComplement(impressionPrimaryKeyColumns, impressionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dynamicDBTypes, false, strmangle.SetComplement(dynamicPrimaryKeyColumns, dynamicColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dynamicDBTypes, false, strmangle.SetComplement(dynamicPrimaryKeyColumns, dynamicColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Dynamic{&b, &c} {
		err = a.SetDynamic(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Dynamic != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Impressions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DynamicID != x.DynamicID {
			t.Error("foreign key was wrong value", a.DynamicID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DynamicID))
		reflect.Indirect(reflect.ValueOf(&a.DynamicID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DynamicID != x.DynamicID {
			t.Error("foreign key was wrong value", a.DynamicID, x.DynamicID)
		}
	}
}
func testImpressionToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Impression
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, impressionDBTypes, false, strmangle.SetComplement(impressionPrimaryKeyColumns, impressionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Impressions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.UserID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.UserID {
			t.Error("foreign key was wrong value", a.UserID, x.UserID)
		}
	}
}

func testImpressionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Impression{}
	if err = randomize.Struct(seed, o, impressionDBTypes, true, impressionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Impression struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testImpressionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Impression{}
	if err = randomize.Struct(seed, o, impressionDBTypes, true, impressionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Impression struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ImpressionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testImpressionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Impression{}
	if err = randomize.Struct(seed, o, impressionDBTypes, true, impressionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Impression struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Impressions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	impressionDBTypes = map[string]string{`ImpressionID`: `integer`, `Rate`: `integer`, `Title`: `character varying`, `Text`: `character varying`, `UserID`: `text`, `DynamicID`: `integer`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_                 = bytes.MinRead
)

func testImpressionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(impressionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(impressionAllColumns) == len(impressionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Impression{}
	if err = randomize.Struct(seed, o, impressionDBTypes, true, impressionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Impression struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Impressions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, impressionDBTypes, true, impressionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Impression struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testImpressionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(impressionAllColumns) == len(impressionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Impression{}
	if err = randomize.Struct(seed, o, impressionDBTypes, true, impressionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Impression struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Impressions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, impressionDBTypes, true, impressionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Impression struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(impressionAllColumns, impressionPrimaryKeyColumns) {
		fields = impressionAllColumns
	} else {
		fields = strmangle.SetComplement(
			impressionAllColumns,
			impressionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ImpressionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testImpressionsUpsert(t *testing.T) {
	t.Parallel()

	if len(impressionAllColumns) == len(impressionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Impression{}
	if err = randomize.Struct(seed, &o, impressionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Impression struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Impression: %s", err)
	}

	count, err := Impressions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, impressionDBTypes, false, impressionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Impression struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Impression: %s", err)
	}

	count, err = Impressions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
