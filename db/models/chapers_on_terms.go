// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ChapersOnTerm is an object representing the database table.
type ChapersOnTerm struct {
	ChapersOnTermsID int       `boil:"chapers_on_terms_id" json:"chapers_on_terms_id" toml:"chapers_on_terms_id" yaml:"chapers_on_terms_id"`
	ChapersID        int       `boil:"chapers_id" json:"chapers_id" toml:"chapers_id" yaml:"chapers_id"`
	TermID           int       `boil:"term_id" json:"term_id" toml:"term_id" yaml:"term_id"`
	CreatedAt        time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt        time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *chapersOnTermR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L chapersOnTermL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChapersOnTermColumns = struct {
	ChapersOnTermsID string
	ChapersID        string
	TermID           string
	CreatedAt        string
	UpdatedAt        string
}{
	ChapersOnTermsID: "chapers_on_terms_id",
	ChapersID:        "chapers_id",
	TermID:           "term_id",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
}

var ChapersOnTermTableColumns = struct {
	ChapersOnTermsID string
	ChapersID        string
	TermID           string
	CreatedAt        string
	UpdatedAt        string
}{
	ChapersOnTermsID: "chapers_on_terms.chapers_on_terms_id",
	ChapersID:        "chapers_on_terms.chapers_id",
	TermID:           "chapers_on_terms.term_id",
	CreatedAt:        "chapers_on_terms.created_at",
	UpdatedAt:        "chapers_on_terms.updated_at",
}

// Generated where

var ChapersOnTermWhere = struct {
	ChapersOnTermsID whereHelperint
	ChapersID        whereHelperint
	TermID           whereHelperint
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
}{
	ChapersOnTermsID: whereHelperint{field: "\"chapers_on_terms\".\"chapers_on_terms_id\""},
	ChapersID:        whereHelperint{field: "\"chapers_on_terms\".\"chapers_id\""},
	TermID:           whereHelperint{field: "\"chapers_on_terms\".\"term_id\""},
	CreatedAt:        whereHelpertime_Time{field: "\"chapers_on_terms\".\"created_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"chapers_on_terms\".\"updated_at\""},
}

// ChapersOnTermRels is where relationship names are stored.
var ChapersOnTermRels = struct {
	Chaper string
	Term   string
}{
	Chaper: "Chaper",
	Term:   "Term",
}

// chapersOnTermR is where relationships are stored.
type chapersOnTermR struct {
	Chaper *Chapter `boil:"Chaper" json:"Chaper" toml:"Chaper" yaml:"Chaper"`
	Term   *Term    `boil:"Term" json:"Term" toml:"Term" yaml:"Term"`
}

// NewStruct creates a new relationship struct
func (*chapersOnTermR) NewStruct() *chapersOnTermR {
	return &chapersOnTermR{}
}

func (r *chapersOnTermR) GetChaper() *Chapter {
	if r == nil {
		return nil
	}
	return r.Chaper
}

func (r *chapersOnTermR) GetTerm() *Term {
	if r == nil {
		return nil
	}
	return r.Term
}

// chapersOnTermL is where Load methods for each relationship are stored.
type chapersOnTermL struct{}

var (
	chapersOnTermAllColumns            = []string{"chapers_on_terms_id", "chapers_id", "term_id", "created_at", "updated_at"}
	chapersOnTermColumnsWithoutDefault = []string{"chapers_id", "term_id", "updated_at"}
	chapersOnTermColumnsWithDefault    = []string{"chapers_on_terms_id", "created_at"}
	chapersOnTermPrimaryKeyColumns     = []string{"chapers_on_terms_id"}
	chapersOnTermGeneratedColumns      = []string{}
)

type (
	// ChapersOnTermSlice is an alias for a slice of pointers to ChapersOnTerm.
	// This should almost always be used instead of []ChapersOnTerm.
	ChapersOnTermSlice []*ChapersOnTerm
	// ChapersOnTermHook is the signature for custom ChapersOnTerm hook methods
	ChapersOnTermHook func(context.Context, boil.ContextExecutor, *ChapersOnTerm) error

	chapersOnTermQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	chapersOnTermType                 = reflect.TypeOf(&ChapersOnTerm{})
	chapersOnTermMapping              = queries.MakeStructMapping(chapersOnTermType)
	chapersOnTermPrimaryKeyMapping, _ = queries.BindMapping(chapersOnTermType, chapersOnTermMapping, chapersOnTermPrimaryKeyColumns)
	chapersOnTermInsertCacheMut       sync.RWMutex
	chapersOnTermInsertCache          = make(map[string]insertCache)
	chapersOnTermUpdateCacheMut       sync.RWMutex
	chapersOnTermUpdateCache          = make(map[string]updateCache)
	chapersOnTermUpsertCacheMut       sync.RWMutex
	chapersOnTermUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var chapersOnTermAfterSelectHooks []ChapersOnTermHook

var chapersOnTermBeforeInsertHooks []ChapersOnTermHook
var chapersOnTermAfterInsertHooks []ChapersOnTermHook

var chapersOnTermBeforeUpdateHooks []ChapersOnTermHook
var chapersOnTermAfterUpdateHooks []ChapersOnTermHook

var chapersOnTermBeforeDeleteHooks []ChapersOnTermHook
var chapersOnTermAfterDeleteHooks []ChapersOnTermHook

var chapersOnTermBeforeUpsertHooks []ChapersOnTermHook
var chapersOnTermAfterUpsertHooks []ChapersOnTermHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ChapersOnTerm) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapersOnTermAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ChapersOnTerm) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapersOnTermBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ChapersOnTerm) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapersOnTermAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ChapersOnTerm) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapersOnTermBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ChapersOnTerm) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapersOnTermAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ChapersOnTerm) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapersOnTermBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ChapersOnTerm) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapersOnTermAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ChapersOnTerm) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapersOnTermBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ChapersOnTerm) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapersOnTermAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChapersOnTermHook registers your hook function for all future operations.
func AddChapersOnTermHook(hookPoint boil.HookPoint, chapersOnTermHook ChapersOnTermHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		chapersOnTermAfterSelectHooks = append(chapersOnTermAfterSelectHooks, chapersOnTermHook)
	case boil.BeforeInsertHook:
		chapersOnTermBeforeInsertHooks = append(chapersOnTermBeforeInsertHooks, chapersOnTermHook)
	case boil.AfterInsertHook:
		chapersOnTermAfterInsertHooks = append(chapersOnTermAfterInsertHooks, chapersOnTermHook)
	case boil.BeforeUpdateHook:
		chapersOnTermBeforeUpdateHooks = append(chapersOnTermBeforeUpdateHooks, chapersOnTermHook)
	case boil.AfterUpdateHook:
		chapersOnTermAfterUpdateHooks = append(chapersOnTermAfterUpdateHooks, chapersOnTermHook)
	case boil.BeforeDeleteHook:
		chapersOnTermBeforeDeleteHooks = append(chapersOnTermBeforeDeleteHooks, chapersOnTermHook)
	case boil.AfterDeleteHook:
		chapersOnTermAfterDeleteHooks = append(chapersOnTermAfterDeleteHooks, chapersOnTermHook)
	case boil.BeforeUpsertHook:
		chapersOnTermBeforeUpsertHooks = append(chapersOnTermBeforeUpsertHooks, chapersOnTermHook)
	case boil.AfterUpsertHook:
		chapersOnTermAfterUpsertHooks = append(chapersOnTermAfterUpsertHooks, chapersOnTermHook)
	}
}

// One returns a single chapersOnTerm record from the query.
func (q chapersOnTermQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ChapersOnTerm, error) {
	o := &ChapersOnTerm{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for chapers_on_terms")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ChapersOnTerm records from the query.
func (q chapersOnTermQuery) All(ctx context.Context, exec boil.ContextExecutor) (ChapersOnTermSlice, error) {
	var o []*ChapersOnTerm

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ChapersOnTerm slice")
	}

	if len(chapersOnTermAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ChapersOnTerm records in the query.
func (q chapersOnTermQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count chapers_on_terms rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q chapersOnTermQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if chapers_on_terms exists")
	}

	return count > 0, nil
}

// Chaper pointed to by the foreign key.
func (o *ChapersOnTerm) Chaper(mods ...qm.QueryMod) chapterQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"chapter_id\" = ?", o.ChapersID),
	}

	queryMods = append(queryMods, mods...)

	return Chapters(queryMods...)
}

// Term pointed to by the foreign key.
func (o *ChapersOnTerm) Term(mods ...qm.QueryMod) termQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"term_id\" = ?", o.TermID),
	}

	queryMods = append(queryMods, mods...)

	return Terms(queryMods...)
}

// LoadChaper allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chapersOnTermL) LoadChaper(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChapersOnTerm interface{}, mods queries.Applicator) error {
	var slice []*ChapersOnTerm
	var object *ChapersOnTerm

	if singular {
		var ok bool
		object, ok = maybeChapersOnTerm.(*ChapersOnTerm)
		if !ok {
			object = new(ChapersOnTerm)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChapersOnTerm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChapersOnTerm))
			}
		}
	} else {
		s, ok := maybeChapersOnTerm.(*[]*ChapersOnTerm)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChapersOnTerm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChapersOnTerm))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chapersOnTermR{}
		}
		args = append(args, object.ChapersID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chapersOnTermR{}
			}

			for _, a := range args {
				if a == obj.ChapersID {
					continue Outer
				}
			}

			args = append(args, obj.ChapersID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chapters`),
		qm.WhereIn(`chapters.chapter_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Chapter")
	}

	var resultSlice []*Chapter
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Chapter")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for chapters")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chapters")
	}

	if len(chapterAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Chaper = foreign
		if foreign.R == nil {
			foreign.R = &chapterR{}
		}
		foreign.R.ChaperChapersOnTerms = append(foreign.R.ChaperChapersOnTerms, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChapersID == foreign.ChapterID {
				local.R.Chaper = foreign
				if foreign.R == nil {
					foreign.R = &chapterR{}
				}
				foreign.R.ChaperChapersOnTerms = append(foreign.R.ChaperChapersOnTerms, local)
				break
			}
		}
	}

	return nil
}

// LoadTerm allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chapersOnTermL) LoadTerm(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChapersOnTerm interface{}, mods queries.Applicator) error {
	var slice []*ChapersOnTerm
	var object *ChapersOnTerm

	if singular {
		var ok bool
		object, ok = maybeChapersOnTerm.(*ChapersOnTerm)
		if !ok {
			object = new(ChapersOnTerm)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChapersOnTerm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChapersOnTerm))
			}
		}
	} else {
		s, ok := maybeChapersOnTerm.(*[]*ChapersOnTerm)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChapersOnTerm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChapersOnTerm))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chapersOnTermR{}
		}
		args = append(args, object.TermID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chapersOnTermR{}
			}

			for _, a := range args {
				if a == obj.TermID {
					continue Outer
				}
			}

			args = append(args, obj.TermID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`terms`),
		qm.WhereIn(`terms.term_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Term")
	}

	var resultSlice []*Term
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Term")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for terms")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for terms")
	}

	if len(termAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Term = foreign
		if foreign.R == nil {
			foreign.R = &termR{}
		}
		foreign.R.ChapersOnTerms = append(foreign.R.ChapersOnTerms, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TermID == foreign.TermID {
				local.R.Term = foreign
				if foreign.R == nil {
					foreign.R = &termR{}
				}
				foreign.R.ChapersOnTerms = append(foreign.R.ChapersOnTerms, local)
				break
			}
		}
	}

	return nil
}

// SetChaper of the chapersOnTerm to the related item.
// Sets o.R.Chaper to related.
// Adds o to related.R.ChaperChapersOnTerms.
func (o *ChapersOnTerm) SetChaper(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Chapter) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chapers_on_terms\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"chapers_id"}),
		strmangle.WhereClause("\"", "\"", 2, chapersOnTermPrimaryKeyColumns),
	)
	values := []interface{}{related.ChapterID, o.ChapersOnTermsID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChapersID = related.ChapterID
	if o.R == nil {
		o.R = &chapersOnTermR{
			Chaper: related,
		}
	} else {
		o.R.Chaper = related
	}

	if related.R == nil {
		related.R = &chapterR{
			ChaperChapersOnTerms: ChapersOnTermSlice{o},
		}
	} else {
		related.R.ChaperChapersOnTerms = append(related.R.ChaperChapersOnTerms, o)
	}

	return nil
}

// SetTerm of the chapersOnTerm to the related item.
// Sets o.R.Term to related.
// Adds o to related.R.ChapersOnTerms.
func (o *ChapersOnTerm) SetTerm(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Term) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chapers_on_terms\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"term_id"}),
		strmangle.WhereClause("\"", "\"", 2, chapersOnTermPrimaryKeyColumns),
	)
	values := []interface{}{related.TermID, o.ChapersOnTermsID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TermID = related.TermID
	if o.R == nil {
		o.R = &chapersOnTermR{
			Term: related,
		}
	} else {
		o.R.Term = related
	}

	if related.R == nil {
		related.R = &termR{
			ChapersOnTerms: ChapersOnTermSlice{o},
		}
	} else {
		related.R.ChapersOnTerms = append(related.R.ChapersOnTerms, o)
	}

	return nil
}

// ChapersOnTerms retrieves all the records using an executor.
func ChapersOnTerms(mods ...qm.QueryMod) chapersOnTermQuery {
	mods = append(mods, qm.From("\"chapers_on_terms\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"chapers_on_terms\".*"})
	}

	return chapersOnTermQuery{q}
}

// FindChapersOnTerm retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChapersOnTerm(ctx context.Context, exec boil.ContextExecutor, chapersOnTermsID int, selectCols ...string) (*ChapersOnTerm, error) {
	chapersOnTermObj := &ChapersOnTerm{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"chapers_on_terms\" where \"chapers_on_terms_id\"=$1", sel,
	)

	q := queries.Raw(query, chapersOnTermsID)

	err := q.Bind(ctx, exec, chapersOnTermObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from chapers_on_terms")
	}

	if err = chapersOnTermObj.doAfterSelectHooks(ctx, exec); err != nil {
		return chapersOnTermObj, err
	}

	return chapersOnTermObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ChapersOnTerm) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no chapers_on_terms provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chapersOnTermColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	chapersOnTermInsertCacheMut.RLock()
	cache, cached := chapersOnTermInsertCache[key]
	chapersOnTermInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			chapersOnTermAllColumns,
			chapersOnTermColumnsWithDefault,
			chapersOnTermColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(chapersOnTermType, chapersOnTermMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(chapersOnTermType, chapersOnTermMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"chapers_on_terms\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"chapers_on_terms\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into chapers_on_terms")
	}

	if !cached {
		chapersOnTermInsertCacheMut.Lock()
		chapersOnTermInsertCache[key] = cache
		chapersOnTermInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ChapersOnTerm.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ChapersOnTerm) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	chapersOnTermUpdateCacheMut.RLock()
	cache, cached := chapersOnTermUpdateCache[key]
	chapersOnTermUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			chapersOnTermAllColumns,
			chapersOnTermPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update chapers_on_terms, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"chapers_on_terms\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, chapersOnTermPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(chapersOnTermType, chapersOnTermMapping, append(wl, chapersOnTermPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update chapers_on_terms row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for chapers_on_terms")
	}

	if !cached {
		chapersOnTermUpdateCacheMut.Lock()
		chapersOnTermUpdateCache[key] = cache
		chapersOnTermUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q chapersOnTermQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for chapers_on_terms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for chapers_on_terms")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChapersOnTermSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chapersOnTermPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"chapers_on_terms\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, chapersOnTermPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in chapersOnTerm slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all chapersOnTerm")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ChapersOnTerm) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no chapers_on_terms provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chapersOnTermColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	chapersOnTermUpsertCacheMut.RLock()
	cache, cached := chapersOnTermUpsertCache[key]
	chapersOnTermUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			chapersOnTermAllColumns,
			chapersOnTermColumnsWithDefault,
			chapersOnTermColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			chapersOnTermAllColumns,
			chapersOnTermPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert chapers_on_terms, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(chapersOnTermPrimaryKeyColumns))
			copy(conflict, chapersOnTermPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"chapers_on_terms\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(chapersOnTermType, chapersOnTermMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(chapersOnTermType, chapersOnTermMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert chapers_on_terms")
	}

	if !cached {
		chapersOnTermUpsertCacheMut.Lock()
		chapersOnTermUpsertCache[key] = cache
		chapersOnTermUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ChapersOnTerm record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ChapersOnTerm) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ChapersOnTerm provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), chapersOnTermPrimaryKeyMapping)
	sql := "DELETE FROM \"chapers_on_terms\" WHERE \"chapers_on_terms_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from chapers_on_terms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for chapers_on_terms")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q chapersOnTermQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no chapersOnTermQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from chapers_on_terms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for chapers_on_terms")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChapersOnTermSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(chapersOnTermBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chapersOnTermPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"chapers_on_terms\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chapersOnTermPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from chapersOnTerm slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for chapers_on_terms")
	}

	if len(chapersOnTermAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ChapersOnTerm) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindChapersOnTerm(ctx, exec, o.ChapersOnTermsID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChapersOnTermSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChapersOnTermSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chapersOnTermPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"chapers_on_terms\".* FROM \"chapers_on_terms\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chapersOnTermPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ChapersOnTermSlice")
	}

	*o = slice

	return nil
}

// ChapersOnTermExists checks if the ChapersOnTerm row exists.
func ChapersOnTermExists(ctx context.Context, exec boil.ContextExecutor, chapersOnTermsID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"chapers_on_terms\" where \"chapers_on_terms_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, chapersOnTermsID)
	}
	row := exec.QueryRowContext(ctx, sql, chapersOnTermsID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if chapers_on_terms exists")
	}

	return exists, nil
}

// Exists checks if the ChapersOnTerm row exists.
func (o *ChapersOnTerm) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ChapersOnTermExists(ctx, exec, o.ChapersOnTermsID)
}
