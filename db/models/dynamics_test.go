// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDynamics(t *testing.T) {
	t.Parallel()

	query := Dynamics()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDynamicsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dynamic{}
	if err = randomize.Struct(seed, o, dynamicDBTypes, true, dynamicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dynamic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Dynamics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDynamicsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dynamic{}
	if err = randomize.Struct(seed, o, dynamicDBTypes, true, dynamicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dynamic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Dynamics().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Dynamics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDynamicsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dynamic{}
	if err = randomize.Struct(seed, o, dynamicDBTypes, true, dynamicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dynamic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DynamicSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Dynamics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDynamicsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dynamic{}
	if err = randomize.Struct(seed, o, dynamicDBTypes, true, dynamicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dynamic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DynamicExists(ctx, tx, o.DynamicID)
	if err != nil {
		t.Errorf("Unable to check if Dynamic exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DynamicExists to return true, but got false.")
	}
}

func testDynamicsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dynamic{}
	if err = randomize.Struct(seed, o, dynamicDBTypes, true, dynamicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dynamic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dynamicFound, err := FindDynamic(ctx, tx, o.DynamicID)
	if err != nil {
		t.Error(err)
	}

	if dynamicFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDynamicsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dynamic{}
	if err = randomize.Struct(seed, o, dynamicDBTypes, true, dynamicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dynamic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Dynamics().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDynamicsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dynamic{}
	if err = randomize.Struct(seed, o, dynamicDBTypes, true, dynamicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dynamic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Dynamics().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDynamicsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dynamicOne := &Dynamic{}
	dynamicTwo := &Dynamic{}
	if err = randomize.Struct(seed, dynamicOne, dynamicDBTypes, false, dynamicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dynamic struct: %s", err)
	}
	if err = randomize.Struct(seed, dynamicTwo, dynamicDBTypes, false, dynamicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dynamic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dynamicOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dynamicTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Dynamics().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDynamicsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dynamicOne := &Dynamic{}
	dynamicTwo := &Dynamic{}
	if err = randomize.Struct(seed, dynamicOne, dynamicDBTypes, false, dynamicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dynamic struct: %s", err)
	}
	if err = randomize.Struct(seed, dynamicTwo, dynamicDBTypes, false, dynamicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dynamic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dynamicOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dynamicTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Dynamics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dynamicBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Dynamic) error {
	*o = Dynamic{}
	return nil
}

func dynamicAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Dynamic) error {
	*o = Dynamic{}
	return nil
}

func dynamicAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Dynamic) error {
	*o = Dynamic{}
	return nil
}

func dynamicBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Dynamic) error {
	*o = Dynamic{}
	return nil
}

func dynamicAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Dynamic) error {
	*o = Dynamic{}
	return nil
}

func dynamicBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Dynamic) error {
	*o = Dynamic{}
	return nil
}

func dynamicAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Dynamic) error {
	*o = Dynamic{}
	return nil
}

func dynamicBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Dynamic) error {
	*o = Dynamic{}
	return nil
}

func dynamicAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Dynamic) error {
	*o = Dynamic{}
	return nil
}

func testDynamicsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Dynamic{}
	o := &Dynamic{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dynamicDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Dynamic object: %s", err)
	}

	AddDynamicHook(boil.BeforeInsertHook, dynamicBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dynamicBeforeInsertHooks = []DynamicHook{}

	AddDynamicHook(boil.AfterInsertHook, dynamicAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dynamicAfterInsertHooks = []DynamicHook{}

	AddDynamicHook(boil.AfterSelectHook, dynamicAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dynamicAfterSelectHooks = []DynamicHook{}

	AddDynamicHook(boil.BeforeUpdateHook, dynamicBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dynamicBeforeUpdateHooks = []DynamicHook{}

	AddDynamicHook(boil.AfterUpdateHook, dynamicAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dynamicAfterUpdateHooks = []DynamicHook{}

	AddDynamicHook(boil.BeforeDeleteHook, dynamicBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dynamicBeforeDeleteHooks = []DynamicHook{}

	AddDynamicHook(boil.AfterDeleteHook, dynamicAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dynamicAfterDeleteHooks = []DynamicHook{}

	AddDynamicHook(boil.BeforeUpsertHook, dynamicBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dynamicBeforeUpsertHooks = []DynamicHook{}

	AddDynamicHook(boil.AfterUpsertHook, dynamicAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dynamicAfterUpsertHooks = []DynamicHook{}
}

func testDynamicsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dynamic{}
	if err = randomize.Struct(seed, o, dynamicDBTypes, true, dynamicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dynamic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Dynamics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDynamicsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dynamic{}
	if err = randomize.Struct(seed, o, dynamicDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Dynamic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dynamicColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Dynamics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDynamicOneToOneImageOfCoverUsingImageOfCover(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign ImageOfCover
	var local Dynamic

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, imageOfCoverDBTypes, true, imageOfCoverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageOfCover struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, dynamicDBTypes, true, dynamicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dynamic struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.DynamicID = local.DynamicID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ImageOfCover().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.DynamicID != foreign.DynamicID {
		t.Errorf("want: %v, got %v", foreign.DynamicID, check.DynamicID)
	}

	ranAfterSelectHook := false
	AddImageOfCoverHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *ImageOfCover) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := DynamicSlice{&local}
	if err = local.L.LoadImageOfCover(ctx, tx, false, (*[]*Dynamic)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ImageOfCover == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ImageOfCover = nil
	if err = local.L.LoadImageOfCover(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ImageOfCover == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testDynamicOneToOneSetOpImageOfCoverUsingImageOfCover(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dynamic
	var b, c ImageOfCover

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dynamicDBTypes, false, strmangle.SetComplement(dynamicPrimaryKeyColumns, dynamicColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, imageOfCoverDBTypes, false, strmangle.SetComplement(imageOfCoverPrimaryKeyColumns, imageOfCoverColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, imageOfCoverDBTypes, false, strmangle.SetComplement(imageOfCoverPrimaryKeyColumns, imageOfCoverColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ImageOfCover{&b, &c} {
		err = a.SetImageOfCover(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ImageOfCover != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Dynamic != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.DynamicID != x.DynamicID {
			t.Error("foreign key was wrong value", a.DynamicID)
		}

		zero := reflect.Zero(reflect.TypeOf(x.DynamicID))
		reflect.Indirect(reflect.ValueOf(&x.DynamicID)).Set(zero)

		if err = x.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DynamicID != x.DynamicID {
			t.Error("foreign key was wrong value", a.DynamicID, x.DynamicID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testDynamicToManyChapters(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dynamic
	var b, c Chapter

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dynamicDBTypes, true, dynamicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dynamic struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, chapterDBTypes, false, chapterColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, chapterDBTypes, false, chapterColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.DynamicID = a.DynamicID
	c.DynamicID = a.DynamicID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Chapters().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.DynamicID == b.DynamicID {
			bFound = true
		}
		if v.DynamicID == c.DynamicID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DynamicSlice{&a}
	if err = a.L.LoadChapters(ctx, tx, false, (*[]*Dynamic)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Chapters); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Chapters = nil
	if err = a.L.LoadChapters(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Chapters); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDynamicToManyDynamicsOnTags(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dynamic
	var b, c DynamicsOnTag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dynamicDBTypes, true, dynamicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dynamic struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dynamicsOnTagDBTypes, false, dynamicsOnTagColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dynamicsOnTagDBTypes, false, dynamicsOnTagColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.DynamicID = a.DynamicID
	c.DynamicID = a.DynamicID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DynamicsOnTags().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.DynamicID == b.DynamicID {
			bFound = true
		}
		if v.DynamicID == c.DynamicID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DynamicSlice{&a}
	if err = a.L.LoadDynamicsOnTags(ctx, tx, false, (*[]*Dynamic)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DynamicsOnTags); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DynamicsOnTags = nil
	if err = a.L.LoadDynamicsOnTags(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DynamicsOnTags); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDynamicToManyImpressions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dynamic
	var b, c Impression

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dynamicDBTypes, true, dynamicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dynamic struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, impressionDBTypes, false, impressionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, impressionDBTypes, false, impressionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.DynamicID = a.DynamicID
	c.DynamicID = a.DynamicID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Impressions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.DynamicID == b.DynamicID {
			bFound = true
		}
		if v.DynamicID == c.DynamicID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DynamicSlice{&a}
	if err = a.L.LoadImpressions(ctx, tx, false, (*[]*Dynamic)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Impressions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Impressions = nil
	if err = a.L.LoadImpressions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Impressions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDynamicToManyMarks(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dynamic
	var b, c Mark

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dynamicDBTypes, true, dynamicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dynamic struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, markDBTypes, false, markColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, markDBTypes, false, markColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.DynamicID = a.DynamicID
	c.DynamicID = a.DynamicID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Marks().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.DynamicID == b.DynamicID {
			bFound = true
		}
		if v.DynamicID == c.DynamicID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DynamicSlice{&a}
	if err = a.L.LoadMarks(ctx, tx, false, (*[]*Dynamic)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Marks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Marks = nil
	if err = a.L.LoadMarks(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Marks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDynamicToManyTerms(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dynamic
	var b, c Term

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dynamicDBTypes, true, dynamicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dynamic struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, termDBTypes, false, termColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, termDBTypes, false, termColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.DynamicID, a.DynamicID)
	queries.Assign(&c.DynamicID, a.DynamicID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Terms().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.DynamicID, b.DynamicID) {
			bFound = true
		}
		if queries.Equal(v.DynamicID, c.DynamicID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DynamicSlice{&a}
	if err = a.L.LoadTerms(ctx, tx, false, (*[]*Dynamic)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Terms); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Terms = nil
	if err = a.L.LoadTerms(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Terms); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDynamicToManyAddOpChapters(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dynamic
	var b, c, d, e Chapter

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dynamicDBTypes, false, strmangle.SetComplement(dynamicPrimaryKeyColumns, dynamicColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Chapter{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, chapterDBTypes, false, strmangle.SetComplement(chapterPrimaryKeyColumns, chapterColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Chapter{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddChapters(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.DynamicID != first.DynamicID {
			t.Error("foreign key was wrong value", a.DynamicID, first.DynamicID)
		}
		if a.DynamicID != second.DynamicID {
			t.Error("foreign key was wrong value", a.DynamicID, second.DynamicID)
		}

		if first.R.Dynamic != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Dynamic != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Chapters[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Chapters[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Chapters().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDynamicToManyAddOpDynamicsOnTags(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dynamic
	var b, c, d, e DynamicsOnTag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dynamicDBTypes, false, strmangle.SetComplement(dynamicPrimaryKeyColumns, dynamicColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DynamicsOnTag{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dynamicsOnTagDBTypes, false, strmangle.SetComplement(dynamicsOnTagPrimaryKeyColumns, dynamicsOnTagColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DynamicsOnTag{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDynamicsOnTags(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.DynamicID != first.DynamicID {
			t.Error("foreign key was wrong value", a.DynamicID, first.DynamicID)
		}
		if a.DynamicID != second.DynamicID {
			t.Error("foreign key was wrong value", a.DynamicID, second.DynamicID)
		}

		if first.R.Dynamic != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Dynamic != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DynamicsOnTags[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DynamicsOnTags[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DynamicsOnTags().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDynamicToManyAddOpImpressions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dynamic
	var b, c, d, e Impression

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dynamicDBTypes, false, strmangle.SetComplement(dynamicPrimaryKeyColumns, dynamicColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Impression{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, impressionDBTypes, false, strmangle.SetComplement(impressionPrimaryKeyColumns, impressionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Impression{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddImpressions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.DynamicID != first.DynamicID {
			t.Error("foreign key was wrong value", a.DynamicID, first.DynamicID)
		}
		if a.DynamicID != second.DynamicID {
			t.Error("foreign key was wrong value", a.DynamicID, second.DynamicID)
		}

		if first.R.Dynamic != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Dynamic != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Impressions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Impressions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Impressions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDynamicToManyAddOpMarks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dynamic
	var b, c, d, e Mark

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dynamicDBTypes, false, strmangle.SetComplement(dynamicPrimaryKeyColumns, dynamicColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Mark{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, markDBTypes, false, strmangle.SetComplement(markPrimaryKeyColumns, markColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Mark{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMarks(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.DynamicID != first.DynamicID {
			t.Error("foreign key was wrong value", a.DynamicID, first.DynamicID)
		}
		if a.DynamicID != second.DynamicID {
			t.Error("foreign key was wrong value", a.DynamicID, second.DynamicID)
		}

		if first.R.Dynamic != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Dynamic != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Marks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Marks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Marks().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDynamicToManyAddOpTerms(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dynamic
	var b, c, d, e Term

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dynamicDBTypes, false, strmangle.SetComplement(dynamicPrimaryKeyColumns, dynamicColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Term{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, termDBTypes, false, strmangle.SetComplement(termPrimaryKeyColumns, termColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Term{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTerms(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.DynamicID, first.DynamicID) {
			t.Error("foreign key was wrong value", a.DynamicID, first.DynamicID)
		}
		if !queries.Equal(a.DynamicID, second.DynamicID) {
			t.Error("foreign key was wrong value", a.DynamicID, second.DynamicID)
		}

		if first.R.Dynamic != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Dynamic != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Terms[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Terms[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Terms().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDynamicToManySetOpTerms(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dynamic
	var b, c, d, e Term

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dynamicDBTypes, false, strmangle.SetComplement(dynamicPrimaryKeyColumns, dynamicColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Term{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, termDBTypes, false, strmangle.SetComplement(termPrimaryKeyColumns, termColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetTerms(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Terms().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetTerms(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Terms().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DynamicID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DynamicID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.DynamicID, d.DynamicID) {
		t.Error("foreign key was wrong value", a.DynamicID, d.DynamicID)
	}
	if !queries.Equal(a.DynamicID, e.DynamicID) {
		t.Error("foreign key was wrong value", a.DynamicID, e.DynamicID)
	}

	if b.R.Dynamic != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Dynamic != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Dynamic != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Dynamic != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Terms[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Terms[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDynamicToManyRemoveOpTerms(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dynamic
	var b, c, d, e Term

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dynamicDBTypes, false, strmangle.SetComplement(dynamicPrimaryKeyColumns, dynamicColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Term{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, termDBTypes, false, strmangle.SetComplement(termPrimaryKeyColumns, termColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddTerms(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Terms().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveTerms(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Terms().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DynamicID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DynamicID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Dynamic != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Dynamic != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Dynamic != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Dynamic != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Terms) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Terms[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Terms[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDynamicToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Dynamic
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dynamicDBTypes, false, dynamicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dynamic struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.UserID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.UserID != foreign.UserID {
		t.Errorf("want: %v, got %v", foreign.UserID, check.UserID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := DynamicSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*Dynamic)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testDynamicToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Dynamic
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dynamicDBTypes, false, strmangle.SetComplement(dynamicPrimaryKeyColumns, dynamicColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Dynamics[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.UserID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.UserID {
			t.Error("foreign key was wrong value", a.UserID, x.UserID)
		}
	}
}

func testDynamicsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dynamic{}
	if err = randomize.Struct(seed, o, dynamicDBTypes, true, dynamicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dynamic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDynamicsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dynamic{}
	if err = randomize.Struct(seed, o, dynamicDBTypes, true, dynamicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dynamic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DynamicSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDynamicsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dynamic{}
	if err = randomize.Struct(seed, o, dynamicDBTypes, true, dynamicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dynamic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Dynamics().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dynamicDBTypes = map[string]string{`DynamicID`: `integer`, `Title`: `character varying`, `Overview`: `character varying`, `Published`: `boolean`, `UserID`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_              = bytes.MinRead
)

func testDynamicsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dynamicPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dynamicAllColumns) == len(dynamicPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Dynamic{}
	if err = randomize.Struct(seed, o, dynamicDBTypes, true, dynamicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dynamic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Dynamics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dynamicDBTypes, true, dynamicPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Dynamic struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDynamicsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dynamicAllColumns) == len(dynamicPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Dynamic{}
	if err = randomize.Struct(seed, o, dynamicDBTypes, true, dynamicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dynamic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Dynamics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dynamicDBTypes, true, dynamicPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Dynamic struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dynamicAllColumns, dynamicPrimaryKeyColumns) {
		fields = dynamicAllColumns
	} else {
		fields = strmangle.SetComplement(
			dynamicAllColumns,
			dynamicPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DynamicSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDynamicsUpsert(t *testing.T) {
	t.Parallel()

	if len(dynamicAllColumns) == len(dynamicPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Dynamic{}
	if err = randomize.Struct(seed, &o, dynamicDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Dynamic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Dynamic: %s", err)
	}

	count, err := Dynamics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dynamicDBTypes, false, dynamicPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Dynamic struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Dynamic: %s", err)
	}

	count, err = Dynamics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
