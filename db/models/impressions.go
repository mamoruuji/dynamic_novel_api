// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Impression is an object representing the database table.
type Impression struct {
	ImpressionID int32     `boil:"impression_id" json:"impression_id" toml:"impression_id" yaml:"impression_id"`
	Rate         int32     `boil:"rate" json:"rate" toml:"rate" yaml:"rate"`
	Title        string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	Text         string    `boil:"text" json:"text" toml:"text" yaml:"text"`
	UserID       string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	DynamicID    int32     `boil:"dynamic_id" json:"dynamic_id" toml:"dynamic_id" yaml:"dynamic_id"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *impressionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L impressionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ImpressionColumns = struct {
	ImpressionID string
	Rate         string
	Title        string
	Text         string
	UserID       string
	DynamicID    string
	CreatedAt    string
	UpdatedAt    string
}{
	ImpressionID: "impression_id",
	Rate:         "rate",
	Title:        "title",
	Text:         "text",
	UserID:       "user_id",
	DynamicID:    "dynamic_id",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
}

var ImpressionTableColumns = struct {
	ImpressionID string
	Rate         string
	Title        string
	Text         string
	UserID       string
	DynamicID    string
	CreatedAt    string
	UpdatedAt    string
}{
	ImpressionID: "impressions.impression_id",
	Rate:         "impressions.rate",
	Title:        "impressions.title",
	Text:         "impressions.text",
	UserID:       "impressions.user_id",
	DynamicID:    "impressions.dynamic_id",
	CreatedAt:    "impressions.created_at",
	UpdatedAt:    "impressions.updated_at",
}

// Generated where

var ImpressionWhere = struct {
	ImpressionID whereHelperint32
	Rate         whereHelperint32
	Title        whereHelperstring
	Text         whereHelperstring
	UserID       whereHelperstring
	DynamicID    whereHelperint32
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
}{
	ImpressionID: whereHelperint32{field: "\"impressions\".\"impression_id\""},
	Rate:         whereHelperint32{field: "\"impressions\".\"rate\""},
	Title:        whereHelperstring{field: "\"impressions\".\"title\""},
	Text:         whereHelperstring{field: "\"impressions\".\"text\""},
	UserID:       whereHelperstring{field: "\"impressions\".\"user_id\""},
	DynamicID:    whereHelperint32{field: "\"impressions\".\"dynamic_id\""},
	CreatedAt:    whereHelpertime_Time{field: "\"impressions\".\"created_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"impressions\".\"updated_at\""},
}

// ImpressionRels is where relationship names are stored.
var ImpressionRels = struct {
	Dynamic string
	User    string
}{
	Dynamic: "Dynamic",
	User:    "User",
}

// impressionR is where relationships are stored.
type impressionR struct {
	Dynamic *Dynamic `boil:"Dynamic" json:"Dynamic" toml:"Dynamic" yaml:"Dynamic"`
	User    *User    `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*impressionR) NewStruct() *impressionR {
	return &impressionR{}
}

func (r *impressionR) GetDynamic() *Dynamic {
	if r == nil {
		return nil
	}
	return r.Dynamic
}

func (r *impressionR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// impressionL is where Load methods for each relationship are stored.
type impressionL struct{}

var (
	impressionAllColumns            = []string{"impression_id", "rate", "title", "text", "user_id", "dynamic_id", "created_at", "updated_at"}
	impressionColumnsWithoutDefault = []string{"title", "text", "user_id", "dynamic_id", "updated_at"}
	impressionColumnsWithDefault    = []string{"impression_id", "rate", "created_at"}
	impressionPrimaryKeyColumns     = []string{"impression_id"}
	impressionGeneratedColumns      = []string{}
)

type (
	// ImpressionSlice is an alias for a slice of pointers to Impression.
	// This should almost always be used instead of []Impression.
	ImpressionSlice []*Impression
	// ImpressionHook is the signature for custom Impression hook methods
	ImpressionHook func(context.Context, boil.ContextExecutor, *Impression) error

	impressionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	impressionType                 = reflect.TypeOf(&Impression{})
	impressionMapping              = queries.MakeStructMapping(impressionType)
	impressionPrimaryKeyMapping, _ = queries.BindMapping(impressionType, impressionMapping, impressionPrimaryKeyColumns)
	impressionInsertCacheMut       sync.RWMutex
	impressionInsertCache          = make(map[string]insertCache)
	impressionUpdateCacheMut       sync.RWMutex
	impressionUpdateCache          = make(map[string]updateCache)
	impressionUpsertCacheMut       sync.RWMutex
	impressionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var impressionAfterSelectHooks []ImpressionHook

var impressionBeforeInsertHooks []ImpressionHook
var impressionAfterInsertHooks []ImpressionHook

var impressionBeforeUpdateHooks []ImpressionHook
var impressionAfterUpdateHooks []ImpressionHook

var impressionBeforeDeleteHooks []ImpressionHook
var impressionAfterDeleteHooks []ImpressionHook

var impressionBeforeUpsertHooks []ImpressionHook
var impressionAfterUpsertHooks []ImpressionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Impression) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range impressionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Impression) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range impressionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Impression) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range impressionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Impression) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range impressionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Impression) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range impressionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Impression) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range impressionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Impression) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range impressionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Impression) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range impressionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Impression) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range impressionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddImpressionHook registers your hook function for all future operations.
func AddImpressionHook(hookPoint boil.HookPoint, impressionHook ImpressionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		impressionAfterSelectHooks = append(impressionAfterSelectHooks, impressionHook)
	case boil.BeforeInsertHook:
		impressionBeforeInsertHooks = append(impressionBeforeInsertHooks, impressionHook)
	case boil.AfterInsertHook:
		impressionAfterInsertHooks = append(impressionAfterInsertHooks, impressionHook)
	case boil.BeforeUpdateHook:
		impressionBeforeUpdateHooks = append(impressionBeforeUpdateHooks, impressionHook)
	case boil.AfterUpdateHook:
		impressionAfterUpdateHooks = append(impressionAfterUpdateHooks, impressionHook)
	case boil.BeforeDeleteHook:
		impressionBeforeDeleteHooks = append(impressionBeforeDeleteHooks, impressionHook)
	case boil.AfterDeleteHook:
		impressionAfterDeleteHooks = append(impressionAfterDeleteHooks, impressionHook)
	case boil.BeforeUpsertHook:
		impressionBeforeUpsertHooks = append(impressionBeforeUpsertHooks, impressionHook)
	case boil.AfterUpsertHook:
		impressionAfterUpsertHooks = append(impressionAfterUpsertHooks, impressionHook)
	}
}

// One returns a single impression record from the query.
func (q impressionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Impression, error) {
	o := &Impression{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for impressions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Impression records from the query.
func (q impressionQuery) All(ctx context.Context, exec boil.ContextExecutor) (ImpressionSlice, error) {
	var o []*Impression

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Impression slice")
	}

	if len(impressionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Impression records in the query.
func (q impressionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count impressions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q impressionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if impressions exists")
	}

	return count > 0, nil
}

// Dynamic pointed to by the foreign key.
func (o *Impression) Dynamic(mods ...qm.QueryMod) dynamicQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"dynamic_id\" = ?", o.DynamicID),
	}

	queryMods = append(queryMods, mods...)

	return Dynamics(queryMods...)
}

// User pointed to by the foreign key.
func (o *Impression) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"user_id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadDynamic allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (impressionL) LoadDynamic(ctx context.Context, e boil.ContextExecutor, singular bool, maybeImpression interface{}, mods queries.Applicator) error {
	var slice []*Impression
	var object *Impression

	if singular {
		var ok bool
		object, ok = maybeImpression.(*Impression)
		if !ok {
			object = new(Impression)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeImpression)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeImpression))
			}
		}
	} else {
		s, ok := maybeImpression.(*[]*Impression)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeImpression)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeImpression))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &impressionR{}
		}
		args = append(args, object.DynamicID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &impressionR{}
			}

			for _, a := range args {
				if a == obj.DynamicID {
					continue Outer
				}
			}

			args = append(args, obj.DynamicID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dynamics`),
		qm.WhereIn(`dynamics.dynamic_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Dynamic")
	}

	var resultSlice []*Dynamic
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Dynamic")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dynamics")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dynamics")
	}

	if len(dynamicAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Dynamic = foreign
		if foreign.R == nil {
			foreign.R = &dynamicR{}
		}
		foreign.R.Impressions = append(foreign.R.Impressions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DynamicID == foreign.DynamicID {
				local.R.Dynamic = foreign
				if foreign.R == nil {
					foreign.R = &dynamicR{}
				}
				foreign.R.Impressions = append(foreign.R.Impressions, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (impressionL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeImpression interface{}, mods queries.Applicator) error {
	var slice []*Impression
	var object *Impression

	if singular {
		var ok bool
		object, ok = maybeImpression.(*Impression)
		if !ok {
			object = new(Impression)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeImpression)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeImpression))
			}
		}
	} else {
		s, ok := maybeImpression.(*[]*Impression)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeImpression)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeImpression))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &impressionR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &impressionR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Impressions = append(foreign.R.Impressions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.UserID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Impressions = append(foreign.R.Impressions, local)
				break
			}
		}
	}

	return nil
}

// SetDynamic of the impression to the related item.
// Sets o.R.Dynamic to related.
// Adds o to related.R.Impressions.
func (o *Impression) SetDynamic(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Dynamic) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"impressions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"dynamic_id"}),
		strmangle.WhereClause("\"", "\"", 2, impressionPrimaryKeyColumns),
	)
	values := []interface{}{related.DynamicID, o.ImpressionID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DynamicID = related.DynamicID
	if o.R == nil {
		o.R = &impressionR{
			Dynamic: related,
		}
	} else {
		o.R.Dynamic = related
	}

	if related.R == nil {
		related.R = &dynamicR{
			Impressions: ImpressionSlice{o},
		}
	} else {
		related.R.Impressions = append(related.R.Impressions, o)
	}

	return nil
}

// SetUser of the impression to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Impressions.
func (o *Impression) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"impressions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, impressionPrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.ImpressionID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.UserID
	if o.R == nil {
		o.R = &impressionR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Impressions: ImpressionSlice{o},
		}
	} else {
		related.R.Impressions = append(related.R.Impressions, o)
	}

	return nil
}

// Impressions retrieves all the records using an executor.
func Impressions(mods ...qm.QueryMod) impressionQuery {
	mods = append(mods, qm.From("\"impressions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"impressions\".*"})
	}

	return impressionQuery{q}
}

// FindImpression retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindImpression(ctx context.Context, exec boil.ContextExecutor, impressionID int32, selectCols ...string) (*Impression, error) {
	impressionObj := &Impression{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"impressions\" where \"impression_id\"=$1", sel,
	)

	q := queries.Raw(query, impressionID)

	err := q.Bind(ctx, exec, impressionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from impressions")
	}

	if err = impressionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return impressionObj, err
	}

	return impressionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Impression) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no impressions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(impressionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	impressionInsertCacheMut.RLock()
	cache, cached := impressionInsertCache[key]
	impressionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			impressionAllColumns,
			impressionColumnsWithDefault,
			impressionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(impressionType, impressionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(impressionType, impressionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"impressions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"impressions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into impressions")
	}

	if !cached {
		impressionInsertCacheMut.Lock()
		impressionInsertCache[key] = cache
		impressionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Impression.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Impression) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	impressionUpdateCacheMut.RLock()
	cache, cached := impressionUpdateCache[key]
	impressionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			impressionAllColumns,
			impressionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update impressions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"impressions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, impressionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(impressionType, impressionMapping, append(wl, impressionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update impressions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for impressions")
	}

	if !cached {
		impressionUpdateCacheMut.Lock()
		impressionUpdateCache[key] = cache
		impressionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q impressionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for impressions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for impressions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ImpressionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), impressionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"impressions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, impressionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in impression slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all impression")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Impression) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no impressions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(impressionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	impressionUpsertCacheMut.RLock()
	cache, cached := impressionUpsertCache[key]
	impressionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			impressionAllColumns,
			impressionColumnsWithDefault,
			impressionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			impressionAllColumns,
			impressionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert impressions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(impressionPrimaryKeyColumns))
			copy(conflict, impressionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"impressions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(impressionType, impressionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(impressionType, impressionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert impressions")
	}

	if !cached {
		impressionUpsertCacheMut.Lock()
		impressionUpsertCache[key] = cache
		impressionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Impression record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Impression) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Impression provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), impressionPrimaryKeyMapping)
	sql := "DELETE FROM \"impressions\" WHERE \"impression_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from impressions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for impressions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q impressionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no impressionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from impressions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for impressions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ImpressionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(impressionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), impressionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"impressions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, impressionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from impression slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for impressions")
	}

	if len(impressionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Impression) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindImpression(ctx, exec, o.ImpressionID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ImpressionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ImpressionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), impressionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"impressions\".* FROM \"impressions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, impressionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ImpressionSlice")
	}

	*o = slice

	return nil
}

// ImpressionExists checks if the Impression row exists.
func ImpressionExists(ctx context.Context, exec boil.ContextExecutor, impressionID int32) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"impressions\" where \"impression_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, impressionID)
	}
	row := exec.QueryRowContext(ctx, sql, impressionID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if impressions exists")
	}

	return exists, nil
}

// Exists checks if the Impression row exists.
func (o *Impression) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ImpressionExists(ctx, exec, o.ImpressionID)
}
