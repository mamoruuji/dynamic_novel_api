// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTerms(t *testing.T) {
	t.Parallel()

	query := Terms()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTermsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Term{}
	if err = randomize.Struct(seed, o, termDBTypes, true, termColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Term struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Terms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTermsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Term{}
	if err = randomize.Struct(seed, o, termDBTypes, true, termColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Term struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Terms().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Terms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTermsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Term{}
	if err = randomize.Struct(seed, o, termDBTypes, true, termColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Term struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TermSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Terms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTermsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Term{}
	if err = randomize.Struct(seed, o, termDBTypes, true, termColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Term struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TermExists(ctx, tx, o.TermID)
	if err != nil {
		t.Errorf("Unable to check if Term exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TermExists to return true, but got false.")
	}
}

func testTermsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Term{}
	if err = randomize.Struct(seed, o, termDBTypes, true, termColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Term struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	termFound, err := FindTerm(ctx, tx, o.TermID)
	if err != nil {
		t.Error(err)
	}

	if termFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTermsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Term{}
	if err = randomize.Struct(seed, o, termDBTypes, true, termColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Term struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Terms().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTermsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Term{}
	if err = randomize.Struct(seed, o, termDBTypes, true, termColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Term struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Terms().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTermsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	termOne := &Term{}
	termTwo := &Term{}
	if err = randomize.Struct(seed, termOne, termDBTypes, false, termColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Term struct: %s", err)
	}
	if err = randomize.Struct(seed, termTwo, termDBTypes, false, termColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Term struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = termOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = termTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Terms().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTermsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	termOne := &Term{}
	termTwo := &Term{}
	if err = randomize.Struct(seed, termOne, termDBTypes, false, termColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Term struct: %s", err)
	}
	if err = randomize.Struct(seed, termTwo, termDBTypes, false, termColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Term struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = termOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = termTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Terms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func termBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Term) error {
	*o = Term{}
	return nil
}

func termAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Term) error {
	*o = Term{}
	return nil
}

func termAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Term) error {
	*o = Term{}
	return nil
}

func termBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Term) error {
	*o = Term{}
	return nil
}

func termAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Term) error {
	*o = Term{}
	return nil
}

func termBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Term) error {
	*o = Term{}
	return nil
}

func termAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Term) error {
	*o = Term{}
	return nil
}

func termBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Term) error {
	*o = Term{}
	return nil
}

func termAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Term) error {
	*o = Term{}
	return nil
}

func testTermsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Term{}
	o := &Term{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, termDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Term object: %s", err)
	}

	AddTermHook(boil.BeforeInsertHook, termBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	termBeforeInsertHooks = []TermHook{}

	AddTermHook(boil.AfterInsertHook, termAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	termAfterInsertHooks = []TermHook{}

	AddTermHook(boil.AfterSelectHook, termAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	termAfterSelectHooks = []TermHook{}

	AddTermHook(boil.BeforeUpdateHook, termBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	termBeforeUpdateHooks = []TermHook{}

	AddTermHook(boil.AfterUpdateHook, termAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	termAfterUpdateHooks = []TermHook{}

	AddTermHook(boil.BeforeDeleteHook, termBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	termBeforeDeleteHooks = []TermHook{}

	AddTermHook(boil.AfterDeleteHook, termAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	termAfterDeleteHooks = []TermHook{}

	AddTermHook(boil.BeforeUpsertHook, termBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	termBeforeUpsertHooks = []TermHook{}

	AddTermHook(boil.AfterUpsertHook, termAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	termAfterUpsertHooks = []TermHook{}
}

func testTermsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Term{}
	if err = randomize.Struct(seed, o, termDBTypes, true, termColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Term struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Terms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTermsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Term{}
	if err = randomize.Struct(seed, o, termDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Term struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(termColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Terms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTermToManyChapersOnTerms(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Term
	var b, c ChapersOnTerm

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, termDBTypes, true, termColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Term struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, chapersOnTermDBTypes, false, chapersOnTermColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, chapersOnTermDBTypes, false, chapersOnTermColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TermID = a.TermID
	c.TermID = a.TermID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ChapersOnTerms().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.TermID == b.TermID {
			bFound = true
		}
		if v.TermID == c.TermID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TermSlice{&a}
	if err = a.L.LoadChapersOnTerms(ctx, tx, false, (*[]*Term)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ChapersOnTerms); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ChapersOnTerms = nil
	if err = a.L.LoadChapersOnTerms(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ChapersOnTerms); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTermToManyDynamicsOnTerms(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Term
	var b, c DynamicsOnTerm

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, termDBTypes, true, termColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Term struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dynamicsOnTermDBTypes, false, dynamicsOnTermColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dynamicsOnTermDBTypes, false, dynamicsOnTermColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TermID = a.TermID
	c.TermID = a.TermID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DynamicsOnTerms().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.TermID == b.TermID {
			bFound = true
		}
		if v.TermID == c.TermID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TermSlice{&a}
	if err = a.L.LoadDynamicsOnTerms(ctx, tx, false, (*[]*Term)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DynamicsOnTerms); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DynamicsOnTerms = nil
	if err = a.L.LoadDynamicsOnTerms(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DynamicsOnTerms); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTermToManySections(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Term
	var b, c Section

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, termDBTypes, true, termColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Term struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, sectionDBTypes, false, sectionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sectionDBTypes, false, sectionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.TermID, a.TermID)
	queries.Assign(&c.TermID, a.TermID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Sections().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.TermID, b.TermID) {
			bFound = true
		}
		if queries.Equal(v.TermID, c.TermID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TermSlice{&a}
	if err = a.L.LoadSections(ctx, tx, false, (*[]*Term)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Sections); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Sections = nil
	if err = a.L.LoadSections(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Sections); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTermToManyAddOpChapersOnTerms(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Term
	var b, c, d, e ChapersOnTerm

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, termDBTypes, false, strmangle.SetComplement(termPrimaryKeyColumns, termColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ChapersOnTerm{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, chapersOnTermDBTypes, false, strmangle.SetComplement(chapersOnTermPrimaryKeyColumns, chapersOnTermColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ChapersOnTerm{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddChapersOnTerms(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.TermID != first.TermID {
			t.Error("foreign key was wrong value", a.TermID, first.TermID)
		}
		if a.TermID != second.TermID {
			t.Error("foreign key was wrong value", a.TermID, second.TermID)
		}

		if first.R.Term != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Term != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ChapersOnTerms[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ChapersOnTerms[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ChapersOnTerms().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTermToManyAddOpDynamicsOnTerms(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Term
	var b, c, d, e DynamicsOnTerm

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, termDBTypes, false, strmangle.SetComplement(termPrimaryKeyColumns, termColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DynamicsOnTerm{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dynamicsOnTermDBTypes, false, strmangle.SetComplement(dynamicsOnTermPrimaryKeyColumns, dynamicsOnTermColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DynamicsOnTerm{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDynamicsOnTerms(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.TermID != first.TermID {
			t.Error("foreign key was wrong value", a.TermID, first.TermID)
		}
		if a.TermID != second.TermID {
			t.Error("foreign key was wrong value", a.TermID, second.TermID)
		}

		if first.R.Term != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Term != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DynamicsOnTerms[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DynamicsOnTerms[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DynamicsOnTerms().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTermToManyAddOpSections(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Term
	var b, c, d, e Section

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, termDBTypes, false, strmangle.SetComplement(termPrimaryKeyColumns, termColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Section{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sectionDBTypes, false, strmangle.SetComplement(sectionPrimaryKeyColumns, sectionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Section{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSections(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.TermID, first.TermID) {
			t.Error("foreign key was wrong value", a.TermID, first.TermID)
		}
		if !queries.Equal(a.TermID, second.TermID) {
			t.Error("foreign key was wrong value", a.TermID, second.TermID)
		}

		if first.R.Term != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Term != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Sections[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Sections[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Sections().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTermToManySetOpSections(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Term
	var b, c, d, e Section

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, termDBTypes, false, strmangle.SetComplement(termPrimaryKeyColumns, termColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Section{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sectionDBTypes, false, strmangle.SetComplement(sectionPrimaryKeyColumns, sectionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetSections(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Sections().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetSections(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Sections().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TermID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TermID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.TermID, d.TermID) {
		t.Error("foreign key was wrong value", a.TermID, d.TermID)
	}
	if !queries.Equal(a.TermID, e.TermID) {
		t.Error("foreign key was wrong value", a.TermID, e.TermID)
	}

	if b.R.Term != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Term != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Term != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Term != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Sections[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Sections[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTermToManyRemoveOpSections(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Term
	var b, c, d, e Section

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, termDBTypes, false, strmangle.SetComplement(termPrimaryKeyColumns, termColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Section{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sectionDBTypes, false, strmangle.SetComplement(sectionPrimaryKeyColumns, sectionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddSections(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Sections().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveSections(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Sections().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TermID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TermID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Term != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Term != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Term != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Term != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Sections) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Sections[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Sections[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTermToOneImageUsingImage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Term
	var foreign Image

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, termDBTypes, true, termColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Term struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, imageDBTypes, false, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ImageID, foreign.ImageID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Image().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ImageID, foreign.ImageID) {
		t.Errorf("want: %v, got %v", foreign.ImageID, check.ImageID)
	}

	ranAfterSelectHook := false
	AddImageHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Image) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := TermSlice{&local}
	if err = local.L.LoadImage(ctx, tx, false, (*[]*Term)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Image == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Image = nil
	if err = local.L.LoadImage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Image == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testTermToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Term
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, termDBTypes, false, termColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Term struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.UserID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.UserID != foreign.UserID {
		t.Errorf("want: %v, got %v", foreign.UserID, check.UserID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := TermSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*Term)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testTermToOneSetOpImageUsingImage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Term
	var b, c Image

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, termDBTypes, false, strmangle.SetComplement(termPrimaryKeyColumns, termColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Image{&b, &c} {
		err = a.SetImage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Image != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Terms[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ImageID, x.ImageID) {
			t.Error("foreign key was wrong value", a.ImageID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ImageID))
		reflect.Indirect(reflect.ValueOf(&a.ImageID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ImageID, x.ImageID) {
			t.Error("foreign key was wrong value", a.ImageID, x.ImageID)
		}
	}
}

func testTermToOneRemoveOpImageUsingImage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Term
	var b Image

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, termDBTypes, false, strmangle.SetComplement(termPrimaryKeyColumns, termColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetImage(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveImage(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Image().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Image != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ImageID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Terms) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testTermToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Term
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, termDBTypes, false, strmangle.SetComplement(termPrimaryKeyColumns, termColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Terms[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.UserID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.UserID {
			t.Error("foreign key was wrong value", a.UserID, x.UserID)
		}
	}
}

func testTermsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Term{}
	if err = randomize.Struct(seed, o, termDBTypes, true, termColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Term struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTermsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Term{}
	if err = randomize.Struct(seed, o, termDBTypes, true, termColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Term struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TermSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTermsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Term{}
	if err = randomize.Struct(seed, o, termDBTypes, true, termColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Term struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Terms().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	termDBTypes = map[string]string{`TermID`: `integer`, `Name`: `character varying`, `Text`: `character varying`, `UserID`: `text`, `Order`: `integer`, `DynamicID`: `integer`, `ChapterID`: `integer`, `SectionID`: `integer`, `ImageID`: `integer`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_           = bytes.MinRead
)

func testTermsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(termPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(termAllColumns) == len(termPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Term{}
	if err = randomize.Struct(seed, o, termDBTypes, true, termColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Term struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Terms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, termDBTypes, true, termPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Term struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTermsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(termAllColumns) == len(termPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Term{}
	if err = randomize.Struct(seed, o, termDBTypes, true, termColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Term struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Terms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, termDBTypes, true, termPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Term struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(termAllColumns, termPrimaryKeyColumns) {
		fields = termAllColumns
	} else {
		fields = strmangle.SetComplement(
			termAllColumns,
			termPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TermSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTermsUpsert(t *testing.T) {
	t.Parallel()

	if len(termAllColumns) == len(termPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Term{}
	if err = randomize.Struct(seed, &o, termDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Term struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Term: %s", err)
	}

	count, err := Terms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, termDBTypes, false, termPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Term struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Term: %s", err)
	}

	count, err = Terms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
