// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFolders(t *testing.T) {
	t.Parallel()

	query := Folders()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFoldersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Folder{}
	if err = randomize.Struct(seed, o, folderDBTypes, true, folderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Folder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Folders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFoldersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Folder{}
	if err = randomize.Struct(seed, o, folderDBTypes, true, folderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Folder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Folders().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Folders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFoldersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Folder{}
	if err = randomize.Struct(seed, o, folderDBTypes, true, folderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Folder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FolderSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Folders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFoldersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Folder{}
	if err = randomize.Struct(seed, o, folderDBTypes, true, folderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Folder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FolderExists(ctx, tx, o.GroupID)
	if err != nil {
		t.Errorf("Unable to check if Folder exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FolderExists to return true, but got false.")
	}
}

func testFoldersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Folder{}
	if err = randomize.Struct(seed, o, folderDBTypes, true, folderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Folder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	folderFound, err := FindFolder(ctx, tx, o.GroupID)
	if err != nil {
		t.Error(err)
	}

	if folderFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFoldersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Folder{}
	if err = randomize.Struct(seed, o, folderDBTypes, true, folderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Folder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Folders().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFoldersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Folder{}
	if err = randomize.Struct(seed, o, folderDBTypes, true, folderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Folder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Folders().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFoldersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	folderOne := &Folder{}
	folderTwo := &Folder{}
	if err = randomize.Struct(seed, folderOne, folderDBTypes, false, folderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Folder struct: %s", err)
	}
	if err = randomize.Struct(seed, folderTwo, folderDBTypes, false, folderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Folder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = folderOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = folderTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Folders().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFoldersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	folderOne := &Folder{}
	folderTwo := &Folder{}
	if err = randomize.Struct(seed, folderOne, folderDBTypes, false, folderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Folder struct: %s", err)
	}
	if err = randomize.Struct(seed, folderTwo, folderDBTypes, false, folderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Folder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = folderOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = folderTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Folders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func folderBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Folder) error {
	*o = Folder{}
	return nil
}

func folderAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Folder) error {
	*o = Folder{}
	return nil
}

func folderAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Folder) error {
	*o = Folder{}
	return nil
}

func folderBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Folder) error {
	*o = Folder{}
	return nil
}

func folderAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Folder) error {
	*o = Folder{}
	return nil
}

func folderBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Folder) error {
	*o = Folder{}
	return nil
}

func folderAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Folder) error {
	*o = Folder{}
	return nil
}

func folderBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Folder) error {
	*o = Folder{}
	return nil
}

func folderAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Folder) error {
	*o = Folder{}
	return nil
}

func testFoldersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Folder{}
	o := &Folder{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, folderDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Folder object: %s", err)
	}

	AddFolderHook(boil.BeforeInsertHook, folderBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	folderBeforeInsertHooks = []FolderHook{}

	AddFolderHook(boil.AfterInsertHook, folderAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	folderAfterInsertHooks = []FolderHook{}

	AddFolderHook(boil.AfterSelectHook, folderAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	folderAfterSelectHooks = []FolderHook{}

	AddFolderHook(boil.BeforeUpdateHook, folderBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	folderBeforeUpdateHooks = []FolderHook{}

	AddFolderHook(boil.AfterUpdateHook, folderAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	folderAfterUpdateHooks = []FolderHook{}

	AddFolderHook(boil.BeforeDeleteHook, folderBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	folderBeforeDeleteHooks = []FolderHook{}

	AddFolderHook(boil.AfterDeleteHook, folderAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	folderAfterDeleteHooks = []FolderHook{}

	AddFolderHook(boil.BeforeUpsertHook, folderBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	folderBeforeUpsertHooks = []FolderHook{}

	AddFolderHook(boil.AfterUpsertHook, folderAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	folderAfterUpsertHooks = []FolderHook{}
}

func testFoldersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Folder{}
	if err = randomize.Struct(seed, o, folderDBTypes, true, folderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Folder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Folders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFoldersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Folder{}
	if err = randomize.Struct(seed, o, folderDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Folder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(folderColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Folders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFolderToManyParentIdFolders(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Folder
	var b, c Folder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, folderDBTypes, true, folderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Folder struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, folderDBTypes, false, folderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, folderDBTypes, false, folderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ParentId, a.GroupID)
	queries.Assign(&c.ParentId, a.GroupID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ParentIdFolders().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ParentId, b.ParentId) {
			bFound = true
		}
		if queries.Equal(v.ParentId, c.ParentId) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := FolderSlice{&a}
	if err = a.L.LoadParentIdFolders(ctx, tx, false, (*[]*Folder)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ParentIdFolders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ParentIdFolders = nil
	if err = a.L.LoadParentIdFolders(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ParentIdFolders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testFolderToManyImages(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Folder
	var b, c Image

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, folderDBTypes, true, folderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Folder struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, imageDBTypes, false, imageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, imageDBTypes, false, imageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.FolderID, a.GroupID)
	queries.Assign(&c.FolderID, a.GroupID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Images().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.FolderID, b.FolderID) {
			bFound = true
		}
		if queries.Equal(v.FolderID, c.FolderID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := FolderSlice{&a}
	if err = a.L.LoadImages(ctx, tx, false, (*[]*Folder)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Images); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Images = nil
	if err = a.L.LoadImages(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Images); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testFolderToManyAddOpParentIdFolders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Folder
	var b, c, d, e Folder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, folderDBTypes, false, strmangle.SetComplement(folderPrimaryKeyColumns, folderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Folder{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, folderDBTypes, false, strmangle.SetComplement(folderPrimaryKeyColumns, folderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Folder{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddParentIdFolders(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GroupID, first.ParentId) {
			t.Error("foreign key was wrong value", a.GroupID, first.ParentId)
		}
		if !queries.Equal(a.GroupID, second.ParentId) {
			t.Error("foreign key was wrong value", a.GroupID, second.ParentId)
		}

		if first.R.ParentIdFolder != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ParentIdFolder != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ParentIdFolders[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ParentIdFolders[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ParentIdFolders().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testFolderToManySetOpParentIdFolders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Folder
	var b, c, d, e Folder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, folderDBTypes, false, strmangle.SetComplement(folderPrimaryKeyColumns, folderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Folder{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, folderDBTypes, false, strmangle.SetComplement(folderPrimaryKeyColumns, folderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetParentIdFolders(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ParentIdFolders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetParentIdFolders(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ParentIdFolders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ParentId) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ParentId) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GroupID, d.ParentId) {
		t.Error("foreign key was wrong value", a.GroupID, d.ParentId)
	}
	if !queries.Equal(a.GroupID, e.ParentId) {
		t.Error("foreign key was wrong value", a.GroupID, e.ParentId)
	}

	if b.R.ParentIdFolder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ParentIdFolder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ParentIdFolder != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ParentIdFolder != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ParentIdFolders[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ParentIdFolders[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testFolderToManyRemoveOpParentIdFolders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Folder
	var b, c, d, e Folder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, folderDBTypes, false, strmangle.SetComplement(folderPrimaryKeyColumns, folderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Folder{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, folderDBTypes, false, strmangle.SetComplement(folderPrimaryKeyColumns, folderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddParentIdFolders(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ParentIdFolders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveParentIdFolders(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ParentIdFolders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ParentId) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ParentId) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ParentIdFolder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ParentIdFolder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ParentIdFolder != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ParentIdFolder != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ParentIdFolders) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ParentIdFolders[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ParentIdFolders[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testFolderToManyAddOpImages(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Folder
	var b, c, d, e Image

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, folderDBTypes, false, strmangle.SetComplement(folderPrimaryKeyColumns, folderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Image{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Image{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddImages(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GroupID, first.FolderID) {
			t.Error("foreign key was wrong value", a.GroupID, first.FolderID)
		}
		if !queries.Equal(a.GroupID, second.FolderID) {
			t.Error("foreign key was wrong value", a.GroupID, second.FolderID)
		}

		if first.R.Folder != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Folder != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Images[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Images[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Images().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testFolderToManySetOpImages(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Folder
	var b, c, d, e Image

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, folderDBTypes, false, strmangle.SetComplement(folderPrimaryKeyColumns, folderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Image{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetImages(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Images().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetImages(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Images().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FolderID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FolderID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GroupID, d.FolderID) {
		t.Error("foreign key was wrong value", a.GroupID, d.FolderID)
	}
	if !queries.Equal(a.GroupID, e.FolderID) {
		t.Error("foreign key was wrong value", a.GroupID, e.FolderID)
	}

	if b.R.Folder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Folder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Folder != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Folder != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Images[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Images[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testFolderToManyRemoveOpImages(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Folder
	var b, c, d, e Image

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, folderDBTypes, false, strmangle.SetComplement(folderPrimaryKeyColumns, folderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Image{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddImages(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Images().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveImages(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Images().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FolderID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FolderID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Folder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Folder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Folder != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Folder != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Images) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Images[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Images[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testFolderToOneFolderUsingParentIdFolder(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Folder
	var foreign Folder

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, folderDBTypes, true, folderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Folder struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, folderDBTypes, false, folderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Folder struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ParentId, foreign.GroupID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ParentIdFolder().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.GroupID, foreign.GroupID) {
		t.Errorf("want: %v, got %v", foreign.GroupID, check.GroupID)
	}

	ranAfterSelectHook := false
	AddFolderHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Folder) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := FolderSlice{&local}
	if err = local.L.LoadParentIdFolder(ctx, tx, false, (*[]*Folder)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ParentIdFolder == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ParentIdFolder = nil
	if err = local.L.LoadParentIdFolder(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ParentIdFolder == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testFolderToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Folder
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, folderDBTypes, false, folderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Folder struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.UserID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.UserID != foreign.UserID {
		t.Errorf("want: %v, got %v", foreign.UserID, check.UserID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := FolderSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*Folder)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testFolderToOneSetOpFolderUsingParentIdFolder(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Folder
	var b, c Folder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, folderDBTypes, false, strmangle.SetComplement(folderPrimaryKeyColumns, folderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, folderDBTypes, false, strmangle.SetComplement(folderPrimaryKeyColumns, folderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, folderDBTypes, false, strmangle.SetComplement(folderPrimaryKeyColumns, folderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Folder{&b, &c} {
		err = a.SetParentIdFolder(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ParentIdFolder != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ParentIdFolders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ParentId, x.GroupID) {
			t.Error("foreign key was wrong value", a.ParentId)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ParentId))
		reflect.Indirect(reflect.ValueOf(&a.ParentId)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ParentId, x.GroupID) {
			t.Error("foreign key was wrong value", a.ParentId, x.GroupID)
		}
	}
}

func testFolderToOneRemoveOpFolderUsingParentIdFolder(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Folder
	var b Folder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, folderDBTypes, false, strmangle.SetComplement(folderPrimaryKeyColumns, folderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, folderDBTypes, false, strmangle.SetComplement(folderPrimaryKeyColumns, folderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetParentIdFolder(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveParentIdFolder(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ParentIdFolder().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ParentIdFolder != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ParentId) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ParentIdFolders) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testFolderToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Folder
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, folderDBTypes, false, strmangle.SetComplement(folderPrimaryKeyColumns, folderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Folders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.UserID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.UserID {
			t.Error("foreign key was wrong value", a.UserID, x.UserID)
		}
	}
}

func testFoldersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Folder{}
	if err = randomize.Struct(seed, o, folderDBTypes, true, folderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Folder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFoldersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Folder{}
	if err = randomize.Struct(seed, o, folderDBTypes, true, folderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Folder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FolderSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFoldersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Folder{}
	if err = randomize.Struct(seed, o, folderDBTypes, true, folderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Folder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Folders().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	folderDBTypes = map[string]string{`GroupID`: `integer`, `Name`: `character varying`, `UserID`: `text`, `ParentId`: `integer`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_             = bytes.MinRead
)

func testFoldersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(folderPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(folderAllColumns) == len(folderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Folder{}
	if err = randomize.Struct(seed, o, folderDBTypes, true, folderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Folder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Folders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, folderDBTypes, true, folderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Folder struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFoldersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(folderAllColumns) == len(folderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Folder{}
	if err = randomize.Struct(seed, o, folderDBTypes, true, folderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Folder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Folders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, folderDBTypes, true, folderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Folder struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(folderAllColumns, folderPrimaryKeyColumns) {
		fields = folderAllColumns
	} else {
		fields = strmangle.SetComplement(
			folderAllColumns,
			folderPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FolderSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testFoldersUpsert(t *testing.T) {
	t.Parallel()

	if len(folderAllColumns) == len(folderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Folder{}
	if err = randomize.Struct(seed, &o, folderDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Folder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Folder: %s", err)
	}

	count, err := Folders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, folderDBTypes, false, folderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Folder struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Folder: %s", err)
	}

	count, err = Folders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
