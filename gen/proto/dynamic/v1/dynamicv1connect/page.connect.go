// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/dynamic/v1/page.proto

package dynamicv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/amomon/dynamic_novel_api/gen/proto/dynamic/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PageServiceName is the fully-qualified name of the PageService service.
	PageServiceName = "proto.dynamic.v1.PageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PageServiceListPagesProcedure is the fully-qualified name of the PageService's ListPages RPC.
	PageServiceListPagesProcedure = "/proto.dynamic.v1.PageService/ListPages"
	// PageServiceAddPageProcedure is the fully-qualified name of the PageService's AddPage RPC.
	PageServiceAddPageProcedure = "/proto.dynamic.v1.PageService/AddPage"
	// PageServiceDeletePageProcedure is the fully-qualified name of the PageService's DeletePage RPC.
	PageServiceDeletePageProcedure = "/proto.dynamic.v1.PageService/DeletePage"
	// PageServiceUpdatePageStatusProcedure is the fully-qualified name of the PageService's
	// UpdatePageStatus RPC.
	PageServiceUpdatePageStatusProcedure = "/proto.dynamic.v1.PageService/UpdatePageStatus"
)

// PageServiceClient is a client for the proto.dynamic.v1.PageService service.
type PageServiceClient interface {
	ListPages(context.Context, *connect_go.Request[v1.ListPagesRequest]) (*connect_go.Response[v1.ListPagesResponse], error)
	AddPage(context.Context, *connect_go.Request[v1.AddPageRequest]) (*connect_go.Response[v1.AddPageResponse], error)
	DeletePage(context.Context, *connect_go.Request[v1.DeletePageRequest]) (*connect_go.Response[v1.DeletePageResponse], error)
	UpdatePageStatus(context.Context, *connect_go.Request[v1.UpdatePageStatusRequest]) (*connect_go.Response[v1.UpdatePageStatusResponse], error)
}

// NewPageServiceClient constructs a client for the proto.dynamic.v1.PageService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPageServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &pageServiceClient{
		listPages: connect_go.NewClient[v1.ListPagesRequest, v1.ListPagesResponse](
			httpClient,
			baseURL+PageServiceListPagesProcedure,
			opts...,
		),
		addPage: connect_go.NewClient[v1.AddPageRequest, v1.AddPageResponse](
			httpClient,
			baseURL+PageServiceAddPageProcedure,
			opts...,
		),
		deletePage: connect_go.NewClient[v1.DeletePageRequest, v1.DeletePageResponse](
			httpClient,
			baseURL+PageServiceDeletePageProcedure,
			opts...,
		),
		updatePageStatus: connect_go.NewClient[v1.UpdatePageStatusRequest, v1.UpdatePageStatusResponse](
			httpClient,
			baseURL+PageServiceUpdatePageStatusProcedure,
			opts...,
		),
	}
}

// pageServiceClient implements PageServiceClient.
type pageServiceClient struct {
	listPages        *connect_go.Client[v1.ListPagesRequest, v1.ListPagesResponse]
	addPage          *connect_go.Client[v1.AddPageRequest, v1.AddPageResponse]
	deletePage       *connect_go.Client[v1.DeletePageRequest, v1.DeletePageResponse]
	updatePageStatus *connect_go.Client[v1.UpdatePageStatusRequest, v1.UpdatePageStatusResponse]
}

// ListPages calls proto.dynamic.v1.PageService.ListPages.
func (c *pageServiceClient) ListPages(ctx context.Context, req *connect_go.Request[v1.ListPagesRequest]) (*connect_go.Response[v1.ListPagesResponse], error) {
	return c.listPages.CallUnary(ctx, req)
}

// AddPage calls proto.dynamic.v1.PageService.AddPage.
func (c *pageServiceClient) AddPage(ctx context.Context, req *connect_go.Request[v1.AddPageRequest]) (*connect_go.Response[v1.AddPageResponse], error) {
	return c.addPage.CallUnary(ctx, req)
}

// DeletePage calls proto.dynamic.v1.PageService.DeletePage.
func (c *pageServiceClient) DeletePage(ctx context.Context, req *connect_go.Request[v1.DeletePageRequest]) (*connect_go.Response[v1.DeletePageResponse], error) {
	return c.deletePage.CallUnary(ctx, req)
}

// UpdatePageStatus calls proto.dynamic.v1.PageService.UpdatePageStatus.
func (c *pageServiceClient) UpdatePageStatus(ctx context.Context, req *connect_go.Request[v1.UpdatePageStatusRequest]) (*connect_go.Response[v1.UpdatePageStatusResponse], error) {
	return c.updatePageStatus.CallUnary(ctx, req)
}

// PageServiceHandler is an implementation of the proto.dynamic.v1.PageService service.
type PageServiceHandler interface {
	ListPages(context.Context, *connect_go.Request[v1.ListPagesRequest]) (*connect_go.Response[v1.ListPagesResponse], error)
	AddPage(context.Context, *connect_go.Request[v1.AddPageRequest]) (*connect_go.Response[v1.AddPageResponse], error)
	DeletePage(context.Context, *connect_go.Request[v1.DeletePageRequest]) (*connect_go.Response[v1.DeletePageResponse], error)
	UpdatePageStatus(context.Context, *connect_go.Request[v1.UpdatePageStatusRequest]) (*connect_go.Response[v1.UpdatePageStatusResponse], error)
}

// NewPageServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPageServiceHandler(svc PageServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	pageServiceListPagesHandler := connect_go.NewUnaryHandler(
		PageServiceListPagesProcedure,
		svc.ListPages,
		opts...,
	)
	pageServiceAddPageHandler := connect_go.NewUnaryHandler(
		PageServiceAddPageProcedure,
		svc.AddPage,
		opts...,
	)
	pageServiceDeletePageHandler := connect_go.NewUnaryHandler(
		PageServiceDeletePageProcedure,
		svc.DeletePage,
		opts...,
	)
	pageServiceUpdatePageStatusHandler := connect_go.NewUnaryHandler(
		PageServiceUpdatePageStatusProcedure,
		svc.UpdatePageStatus,
		opts...,
	)
	return "/proto.dynamic.v1.PageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PageServiceListPagesProcedure:
			pageServiceListPagesHandler.ServeHTTP(w, r)
		case PageServiceAddPageProcedure:
			pageServiceAddPageHandler.ServeHTTP(w, r)
		case PageServiceDeletePageProcedure:
			pageServiceDeletePageHandler.ServeHTTP(w, r)
		case PageServiceUpdatePageStatusProcedure:
			pageServiceUpdatePageStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPageServiceHandler struct{}

func (UnimplementedPageServiceHandler) ListPages(context.Context, *connect_go.Request[v1.ListPagesRequest]) (*connect_go.Response[v1.ListPagesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.dynamic.v1.PageService.ListPages is not implemented"))
}

func (UnimplementedPageServiceHandler) AddPage(context.Context, *connect_go.Request[v1.AddPageRequest]) (*connect_go.Response[v1.AddPageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.dynamic.v1.PageService.AddPage is not implemented"))
}

func (UnimplementedPageServiceHandler) DeletePage(context.Context, *connect_go.Request[v1.DeletePageRequest]) (*connect_go.Response[v1.DeletePageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.dynamic.v1.PageService.DeletePage is not implemented"))
}

func (UnimplementedPageServiceHandler) UpdatePageStatus(context.Context, *connect_go.Request[v1.UpdatePageStatusRequest]) (*connect_go.Response[v1.UpdatePageStatusResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.dynamic.v1.PageService.UpdatePageStatus is not implemented"))
}
