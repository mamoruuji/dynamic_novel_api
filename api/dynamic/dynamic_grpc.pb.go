// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: dynamic.proto

package dynamic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Dynamic_GetDynamics_FullMethodName         = "/dynamic.Dynamic/GetDynamics"
	Dynamic_AddDynamic_FullMethodName          = "/dynamic.Dynamic/AddDynamic"
	Dynamic_DeleteDynamic_FullMethodName       = "/dynamic.Dynamic/DeleteDynamic"
	Dynamic_UpdateDynamicStatus_FullMethodName = "/dynamic.Dynamic/UpdateDynamicStatus"
)

// DynamicClient is the client API for Dynamic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DynamicClient interface {
	GetDynamics(ctx context.Context, in *GetDynamicsRequest, opts ...grpc.CallOption) (*GetDynamicsResponse, error)
	AddDynamic(ctx context.Context, in *AddDynamicRequest, opts ...grpc.CallOption) (*AddDynamicResponse, error)
	DeleteDynamic(ctx context.Context, in *DeleteDynamicRequest, opts ...grpc.CallOption) (*DeleteDynamicResponse, error)
	UpdateDynamicStatus(ctx context.Context, in *UpdateDynamicStatusRequest, opts ...grpc.CallOption) (*UpdateDynamicStatusResponse, error)
}

type dynamicClient struct {
	cc grpc.ClientConnInterface
}

func NewDynamicClient(cc grpc.ClientConnInterface) DynamicClient {
	return &dynamicClient{cc}
}

func (c *dynamicClient) GetDynamics(ctx context.Context, in *GetDynamicsRequest, opts ...grpc.CallOption) (*GetDynamicsResponse, error) {
	out := new(GetDynamicsResponse)
	err := c.cc.Invoke(ctx, Dynamic_GetDynamics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) AddDynamic(ctx context.Context, in *AddDynamicRequest, opts ...grpc.CallOption) (*AddDynamicResponse, error) {
	out := new(AddDynamicResponse)
	err := c.cc.Invoke(ctx, Dynamic_AddDynamic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DeleteDynamic(ctx context.Context, in *DeleteDynamicRequest, opts ...grpc.CallOption) (*DeleteDynamicResponse, error) {
	out := new(DeleteDynamicResponse)
	err := c.cc.Invoke(ctx, Dynamic_DeleteDynamic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) UpdateDynamicStatus(ctx context.Context, in *UpdateDynamicStatusRequest, opts ...grpc.CallOption) (*UpdateDynamicStatusResponse, error) {
	out := new(UpdateDynamicStatusResponse)
	err := c.cc.Invoke(ctx, Dynamic_UpdateDynamicStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DynamicServer is the server API for Dynamic service.
// All implementations must embed UnimplementedDynamicServer
// for forward compatibility
type DynamicServer interface {
	GetDynamics(context.Context, *GetDynamicsRequest) (*GetDynamicsResponse, error)
	AddDynamic(context.Context, *AddDynamicRequest) (*AddDynamicResponse, error)
	DeleteDynamic(context.Context, *DeleteDynamicRequest) (*DeleteDynamicResponse, error)
	UpdateDynamicStatus(context.Context, *UpdateDynamicStatusRequest) (*UpdateDynamicStatusResponse, error)
	mustEmbedUnimplementedDynamicServer()
}

// UnimplementedDynamicServer must be embedded to have forward compatible implementations.
type UnimplementedDynamicServer struct {
}

func (UnimplementedDynamicServer) GetDynamics(context.Context, *GetDynamicsRequest) (*GetDynamicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDynamics not implemented")
}
func (UnimplementedDynamicServer) AddDynamic(context.Context, *AddDynamicRequest) (*AddDynamicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDynamic not implemented")
}
func (UnimplementedDynamicServer) DeleteDynamic(context.Context, *DeleteDynamicRequest) (*DeleteDynamicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDynamic not implemented")
}
func (UnimplementedDynamicServer) UpdateDynamicStatus(context.Context, *UpdateDynamicStatusRequest) (*UpdateDynamicStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDynamicStatus not implemented")
}
func (UnimplementedDynamicServer) mustEmbedUnimplementedDynamicServer() {}

// UnsafeDynamicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DynamicServer will
// result in compilation errors.
type UnsafeDynamicServer interface {
	mustEmbedUnimplementedDynamicServer()
}

func RegisterDynamicServer(s grpc.ServiceRegistrar, srv DynamicServer) {
	s.RegisterService(&Dynamic_ServiceDesc, srv)
}

func _Dynamic_GetDynamics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDynamicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).GetDynamics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_GetDynamics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).GetDynamics(ctx, req.(*GetDynamicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_AddDynamic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDynamicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).AddDynamic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_AddDynamic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).AddDynamic(ctx, req.(*AddDynamicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DeleteDynamic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDynamicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DeleteDynamic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_DeleteDynamic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DeleteDynamic(ctx, req.(*DeleteDynamicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_UpdateDynamicStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDynamicStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).UpdateDynamicStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_UpdateDynamicStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).UpdateDynamicStatus(ctx, req.(*UpdateDynamicStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dynamic_ServiceDesc is the grpc.ServiceDesc for Dynamic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dynamic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dynamic.Dynamic",
	HandlerType: (*DynamicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDynamics",
			Handler:    _Dynamic_GetDynamics_Handler,
		},
		{
			MethodName: "AddDynamic",
			Handler:    _Dynamic_AddDynamic_Handler,
		},
		{
			MethodName: "DeleteDynamic",
			Handler:    _Dynamic_DeleteDynamic_Handler,
		},
		{
			MethodName: "UpdateDynamicStatus",
			Handler:    _Dynamic_UpdateDynamicStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dynamic.proto",
}
