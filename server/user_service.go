package server

import (
	"context"
	"log"

	. "github.com/mamoruuji/dynamic_novel_api/config"

	"github.com/bufbuild/connect-go"
	dynamicv1 "github.com/mamoruuji/dynamic_novel_api/gen/proto/dynamic/v1"
	"github.com/mamoruuji/dynamic_novel_api/gen/proto/dynamic/v1/dynamicv1connect" // generated by protoc-gen-connect-go

	. "github.com/mamoruuji/dynamic_novel_api/db/models"
	"github.com/volatiletech/sqlboiler/boil"
	. "github.com/volatiletech/sqlboiler/v4/queries/qm"
)

type userServer struct {
	dynamicv1connect.UserServiceHandler
	db boil.ContextExecutor
}

func NewUserServer() *userServer {
	return &userServer{
		db: GetDB(),
	}
}

func (s *userServer) GetUser(
	ctx context.Context,
	req *connect.Request[dynamicv1.GetUserRequest],
) (*connect.Response[dynamicv1.GetUserResponse], error) {
	modifiers := []QueryMod{
		UserWhere.ID.EQ(req.Msg.UserId),
	}

	user, err := Users(modifiers...).One(ctx, s.db)

	if err != nil {
		log.Printf("failed to get user: %v", err)
		return nil, err
	}

	res := connect.NewResponse(&dynamicv1.GetUserResponse{
		UserId:   user.ID,
		Name:     user.Name,
		Email:    user.Email,
		PenName:  user.PenName,
		Text:     user.Text,
		ImageUrl: user.ImageURL,
	})

	return res, nil
}
