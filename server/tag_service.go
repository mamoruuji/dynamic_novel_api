package server

import (
	"context"
	"log"

	"github.com/bufbuild/connect-go"
	dynamicv1 "github.com/mamoruuji/dynamic_novel_api/gen/proto/dynamic/v1"
	"github.com/mamoruuji/dynamic_novel_api/gen/proto/dynamic/v1/dynamicv1connect" // generated by protoc-gen-connect-go

	. "github.com/mamoruuji/dynamic_novel_api/db/models"
	"github.com/volatiletech/sqlboiler/v4/boil"
	. "github.com/volatiletech/sqlboiler/v4/queries/qm"
)

type tagServer struct {
	dynamicv1connect.TagServiceHandler
	db boil.ContextExecutor
}

func NewTagServer(db boil.ContextExecutor) *tagServer {
	return &tagServer{
		db: db,
	}
}

func (s *tagServer) ListTags(
	ctx context.Context,
	req *connect.Request[dynamicv1.ListTagsRequest],
) (*connect.Response[dynamicv1.ListTagsResponse], error) {
	tags, err := Tags().All(ctx, s.db)
	if err != nil {
		log.Printf("failed to get tags: %v", err)
		return nil, err
	}

	var pbTags []*dynamicv1.TagData
	for _, tag := range tags {
		pbTag := &dynamicv1.TagData{
			TagId: tag.TagID,
			Name:  tag.Name,
		}
		pbTags = append(pbTags, pbTag)
	}

	res := connect.NewResponse(&dynamicv1.ListTagsResponse{
		Tags: pbTags,
	})

	return res, nil
}

func (s *dynamicServer) AddTag(
	ctx context.Context,
	req *connect.Request[dynamicv1.AddTagRequest],
) (*connect.Response[dynamicv1.AddTagResponse], error) {
	tag := Tag{
		Name: req.Msg.Name,
	}

	err := tag.Insert(ctx, s.db, boil.Infer())
	if err != nil {
		log.Printf("failed to add tag: %v", err)
		return nil, err
	}

	res := connect.NewResponse(&dynamicv1.AddTagResponse{
		TagId: tag.TagID,
	})

	return res, nil
}

func (s *tagServer) SetDynamicOnTag(
	ctx context.Context,
	req *connect.Request[dynamicv1.SetDynamicOnTagRequest],
) (*connect.Response[dynamicv1.SetDynamicOnTagResponse], error) {
	dynamicsOnTag := DynamicsOnTag{
		DynamicID: req.Msg.DynamicId,
		TagID:     req.Msg.TagId,
	}

	conflictColumns := []string{DynamicsOnTagColumns.DynamicID, DynamicsOnTagColumns.TagID}

	insertColumns := boil.Whitelist(
		DynamicsOnTagColumns.DynamicID,
		DynamicsOnTagColumns.TagID,
	)

	updateColumns := boil.Infer()

	err := dynamicsOnTag.Upsert(ctx, s.db, true, conflictColumns, insertColumns, updateColumns)
	if err != nil {
		log.Printf("failed to Set dynamicOntag: %v", err)
		return nil, err
	}

	return connect.NewResponse(&dynamicv1.SetDynamicOnTagResponse{}), nil
}

func (s *tagServer) UnsetDynamicOnTags(
	ctx context.Context,
	req *connect.Request[dynamicv1.UnsetDynamicOnTagRequest],
) (*connect.Response[dynamicv1.UnsetDynamicOnTagResponse], error) {
	modifiers := []QueryMod{
		DynamicsOnTagWhere.DynamicID.EQ(req.Msg.DynamicId),
		DynamicsOnTagWhere.TagID.EQ(req.Msg.TagId),
	}

	_, err := DynamicsOnTags(modifiers...).DeleteAll(ctx, s.db)
	if err != nil {
		log.Printf("failed to Unset dynamicOntag: %v", err)
		return nil, err
	}

	return connect.NewResponse(&dynamicv1.UnsetDynamicOnTagResponse{}), nil
}
