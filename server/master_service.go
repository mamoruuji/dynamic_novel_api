package server

import (
	"context"
	"log"

	. "github.com/mamoruuji/dynamic_novel_api/config"

	"github.com/bufbuild/connect-go"
	dynamicv1 "github.com/mamoruuji/dynamic_novel_api/gen/proto/dynamic/v1"
	"github.com/mamoruuji/dynamic_novel_api/gen/proto/dynamic/v1/dynamicv1connect" // generated by protoc-gen-connect-go

	. "github.com/mamoruuji/dynamic_novel_api/db/models"
	"github.com/volatiletech/sqlboiler/v4/boil"
	_ "github.com/volatiletech/sqlboiler/v4/queries/qm"
)

type masterServer struct {
	dynamicv1connect.MasterServiceHandler
	db boil.ContextExecutor
}

func NewMasterServer() *masterServer {
	return &masterServer{
		db: GetDB(),
	}
}

func (s *masterServer) ListSectionMasters(
	ctx context.Context,
	_ *connect.Request[dynamicv1.ListSectionMastersRequest],
) (*connect.Response[dynamicv1.ListSectionMastersResponse], error) {
	sectionMaster, err := fetchMaster(
		ctx,
		s.db,
		TypeSections().All)
	if err != nil {
		return nil, err
	}

	positionMaster, err := fetchMaster(
		ctx,
		s.db,
		TypePositions().All)
	if err != nil {
		return nil, err
	}

	colorMaster, err := fetchMaster(
		ctx,
		s.db,
		TypeColors().All)
	if err != nil {
		return nil, err
	}

	fontMaster, err := fetchMaster(
		ctx,
		s.db,
		TypeFonts().All)
	if err != nil {
		return nil, err
	}

	imageMaster, err := fetchMaster(
		ctx,
		s.db,
		TypeImages().All)
	if err != nil {
		return nil, err
	}

	animationMaster, err := fetchMaster(
		ctx,
		s.db,
		TypeAnimations().All)
	if err != nil {
		return nil, err
	}

	sizeMaster, err := fetchMaster(
		ctx,
		s.db,
		TypeSizes().All)
	if err != nil {
		return nil, err
	}

	res := connect.NewResponse(&dynamicv1.ListSectionMastersResponse{
		SectionTypeMaster:   sectionMaster,
		PositionTypeMaster:  positionMaster,
		ColorTypeMaster:     colorMaster,
		FontTypeMaster:      fontMaster,
		ImageTypeMaster:     imageMaster,
		AnimationTypeMaster: animationMaster,
		SizeTypeMaster:      sizeMaster,
	})

	return res, nil
}

func fetchMaster[T ~[]E, E TypeModel](
	ctx context.Context,
	db boil.ContextExecutor,
	getAll func(context.Context, boil.ContextExecutor) (T, error),
) ([]*dynamicv1.TypeMaster, error) {
	masters, err := getAll(ctx, db)
	if err != nil {
		log.Printf("failed to get masters: %v", err)
		return nil, err
	}

	var pbMasters []*dynamicv1.TypeMaster
	for _, master := range masters {
		pbMasters = append(pbMasters, &dynamicv1.TypeMaster{
			Id:    master.GetID(),
			Name:  master.GetName(),
			Value: master.GetValue(),
		})
	}
	return pbMasters, nil
}

func (s *masterServer) ListSortMaster(
	ctx context.Context,
	_ *connect.Request[dynamicv1.ListSortMasterRequest],
) (*connect.Response[dynamicv1.ListSortMasterResponse], error) {
	sortMaster, err := fetchMaster(
		ctx,
		s.db,
		TypeSorts().All)
	if err != nil {
		return nil, err
	}

	res := connect.NewResponse(&dynamicv1.ListSortMasterResponse{
		SortMaster: sortMaster,
	})

	return res, nil
}
