package server

import (
	"context"
	"log"

	. "github.com/mamoruuji/dynamic_novel_api/config"

	"github.com/bufbuild/connect-go"
	dynamicv1 "github.com/mamoruuji/dynamic_novel_api/gen/proto/dynamic/v1"
	"github.com/mamoruuji/dynamic_novel_api/gen/proto/dynamic/v1/dynamicv1connect" // generated by protoc-gen-connect-go

	. "github.com/mamoruuji/dynamic_novel_api/db/models"
	"github.com/volatiletech/sqlboiler/v4/boil"
	_ "github.com/volatiletech/sqlboiler/v4/queries/qm"
)

type pageServer struct {
	dynamicv1connect.PageServiceHandler
	db boil.ContextExecutor
}

func NewPageServer() *pageServer {
	return &pageServer{
		db: GetDB(),
	}
}

func (s *pageServer) ListPages(
	ctx context.Context,
	_ *connect.Request[dynamicv1.ListPagesRequest],
) (*connect.Response[dynamicv1.ListPagesResponse], error) {
	pages, err := Pages().All(ctx, s.db)
	if err != nil {
		log.Printf("failed to get pages: %v", err)
		return nil, err
	}

	var pbPages []*dynamicv1.ListPageData
	for _, page := range pages {
		pbPage := &dynamicv1.ListPageData{
			PageId:    page.PageID,
			Title:     page.Title,
			Order:     page.Order,
			ChapterId: page.ChapterID,
		}
		pbPages = append(pbPages, pbPage)
	}

	res := connect.NewResponse(&dynamicv1.ListPagesResponse{
		Pages: pbPages,
	})

	return res, nil
}
