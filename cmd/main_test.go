package main

import (
	"context"
	"net/http/httptest"
	"testing"

	dynamicv1 "github.com/amomon/dynamic_novel_api/gen/api/proto/dynamic/v1"        // generated by protoc-gen-go
	"github.com/amomon/dynamic_novel_api/gen/api/proto/dynamic/v1/dynamicv1connect" // generated by protoc-gen-connect-go
	"github.com/bufbuild/connect-go"
)

func TestGetDynamicsHandler(t *testing.T) {
	t.Parallel()
	mux := server()
	server := httptest.NewUnstartedServer(mux)
	server.EnableHTTP2 = true
	server.StartTLS()
	t.Cleanup(server.Close)
	cases := []struct {
		Id        int32
		Title     string
		Overview  string
		UserId    string
		Published bool
	}{
		{
			Id:        1,
			Title:     "hoge",
			Overview:  "hoge1",
			UserId:    "userId1",
			Published: true,
		},
		{
			Id:        2,
			Title:     "hogehoge",
			Overview:  "hoge2",
			UserId:    "userId2",
			Published: false,
		},
		{
			Id:        3,
			Title:     "hogehogehoge",
			Overview:  "hoge3",
			UserId:    "userId3",
			Published: true,
		},
	}
	for _, c := range cases {
		c := c
		t.Run(c.Title, func(t *testing.T) {
			t.Parallel()
			client := dynamicv1connect.NewDynamicServiceClient(
				server.Client(),
				server.URL,
			)
			res, err := client.GetDynamics(context.Background(), connect.NewRequest(&dynamicv1.GetDynamicsRequest{
				// Title: c.Title,
			}))
			if err != nil {
				t.Error(err)
			}
			if res.Msg.GetDynamics() != nil {
				t.Errorf("dynamics got: %s, want: %s", res.Msg.GetDynamics(), c.Title)
			}
		})
	}
}
