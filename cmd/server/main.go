package main

import (
	"context"
	"database/sql"
	"fmt"
	"log"
	"net/http"
	"reflect"
	"time"

	"google.golang.org/protobuf/types/known/timestamppb"

	_ "github.com/lib/pq"
	"github.com/mamoruuji/dynamic_novel_api/db/models"
	. "github.com/mamoruuji/dynamic_novel_api/db/models"

	"github.com/volatiletech/sqlboiler/v4/boil"
	. "github.com/volatiletech/sqlboiler/v4/queries/qm"

	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"

	"github.com/bufbuild/connect-go"
	dynamicv1 "github.com/mamoruuji/dynamic_novel_api/gen/proto/dynamic/v1"        // generated by protoc-gen-go
	"github.com/mamoruuji/dynamic_novel_api/gen/proto/dynamic/v1/dynamicv1connect" // generated by protoc-gen-connect-go
)

type dynamicServer struct {
	dynamicv1connect.DynamicServiceHandler
}

type pageServer struct {
	dynamicv1connect.PageServiceHandler
}

type sortServer struct {
	dynamicv1connect.SortServiceHandler
}

func (s *dynamicServer) GetDynamic(
	ctx context.Context,
	req *connect.Request[dynamicv1.GetDynamicRequest],
) (*connect.Response[dynamicv1.GetDynamicResponse], error) {

	// boil.DebugMode = true
	modifiers := []QueryMod{
		Load(DynamicRels.User),
		Load(DynamicRels.Image),
		Load(Rels(DynamicRels.Image, ImageRels.TypeOfImage)),
		Load(DynamicRels.Terms, OrderBy(TermTableColumns.Order)),
		Load(DynamicRels.Chapters, OrderBy(ChapterTableColumns.Order)),
		Load(Rels(DynamicRels.Chapters, ChapterRels.Pages), OrderBy(PageTableColumns.Order)),
		Load(Rels(DynamicRels.Chapters, ChapterRels.Terms), OrderBy(TermTableColumns.Order)),
		Load(Rels(DynamicRels.Chapters, ChapterRels.Pages, PageRels.Sections), OrderBy(SectionTableColumns.Order)),
		Load(Rels(DynamicRels.Chapters, ChapterRels.Pages, PageRels.Terms), OrderBy(TermTableColumns.Order)),
		Load(Rels(DynamicRels.Chapters, ChapterRels.Pages, PageRels.Sections, SectionRels.TypeOfSection)),
		Load(Rels(DynamicRels.Chapters, ChapterRels.Pages, PageRels.Sections, SectionRels.TypeOfAnimation)),
		Load(Rels(DynamicRels.Chapters, ChapterRels.Pages, PageRels.Sections, SectionRels.TypeOfPosition)),
		Load(Rels(DynamicRels.Chapters, ChapterRels.Pages, PageRels.Sections, SectionRels.Image)),
		Load(Rels(DynamicRels.Chapters, ChapterRels.Pages, PageRels.Sections, SectionRels.Image, ImageRels.TypeOfImage)),
		Load(Rels(DynamicRels.Chapters, ChapterRels.Pages, PageRels.Sections, SectionRels.TypeOfFont)),
		Load(Rels(DynamicRels.Chapters, ChapterRels.Pages, PageRels.Sections, SectionRels.FrameColor)),
		Load(Rels(DynamicRels.Chapters, ChapterRels.Pages, PageRels.Sections, SectionRels.TextColor)),
		Load(Rels(DynamicRels.Chapters, ChapterRels.Pages, PageRels.Sections, SectionRels.Terms), OrderBy(TermTableColumns.Order)),
		DynamicWhere.DynamicID.EQ(req.Msg.DynamicId),
	}

	dynamic, err := Dynamics(modifiers...).One(ctx, db)

	if err != nil {
		log.Printf("failed to get dynamics: %v", err)
		return nil, err
	}

	var pbChapters []*dynamicv1.ChapterData
	for _, chapter := range dynamic.R.Chapters {
		var pbPages []*dynamicv1.PageData
		for _, page := range chapter.R.Pages {
			var pbSections []*dynamicv1.SectionData
			for _, section := range page.R.Sections {

				pbImage := SetImageData(section.R.Image)
				pbTerms := SetTermData(section.R.Terms)

				pbSection := &dynamicv1.SectionData{
					SectionId:     section.SectionID,
					Name:          section.Name,
					Order:         section.Order,
					TypeSection:   section.R.TypeOfSection.Name,
					TypePosition:  section.R.TypeOfPosition.Name,
					TypeAnimation: section.R.TypeOfAnimation.Name,
					FrameColor:    section.R.FrameColor.Name,
					Text:          section.Text,
					TextColor:     section.R.TextColor.Name,
					TextSize:      section.TextSize,
					Font:          section.R.TypeOfFont.Name,
					Image:         pbImage,
					Terms:         pbTerms,
				}

				pbSections = append(pbSections, pbSection)
			}

			pbTerms := SetTermData(page.R.Terms)

			pbPage := &dynamicv1.PageData{
				PageId:   page.PageID,
				Title:    page.Title,
				Order:    page.Order,
				Sections: pbSections,
				Terms:    pbTerms,
			}
			pbPages = append(pbPages, pbPage)
		}

		pbTerms := SetTermData(chapter.R.Terms)

		pbChapter := &dynamicv1.ChapterData{
			ChapterId: chapter.ChapterID,
			Title:     chapter.Title,
			Order:     chapter.Order,
			Pages:     pbPages,
			Terms:     pbTerms,
		}
		pbChapters = append(pbChapters, pbChapter)
	}

	pbTerms := SetTermData(dynamic.R.Terms)
	createdAT := timestamppb.New(dynamic.CreatedAt)
	updatedAT := timestamppb.New(dynamic.UpdatedAt)

	modifiers = []QueryMod{
		Load(DynamicsOnTagRels.Tag),
		DynamicsOnTagWhere.DynamicID.EQ(req.Msg.DynamicId),
	}

	DynamicsOnTags, err := DynamicsOnTags(modifiers...).All(ctx, db)

	if err != nil {
		log.Printf("failed to get tags: %v", err)
		return nil, err
	}
	var pbTags []*dynamicv1.TagData
	for _, dynamicsOnTag := range DynamicsOnTags {

		pbTag := &dynamicv1.TagData{
			TagId: dynamicsOnTag.TagID,
			Name:  dynamicsOnTag.R.Tag.Name,
		}
		pbTags = append(pbTags, pbTag)
	}
	pbImage := SetImageData(dynamic.R.Image)

	res := connect.NewResponse(&dynamicv1.GetDynamicResponse{
		DynamicId:   dynamic.DynamicID,
		Title:       dynamic.Title,
		Overview:    dynamic.Overview,
		UserId:      dynamic.UserID,
		Published:   dynamic.Published,
		UserName:    dynamic.R.User.Name,
		Image:       pbImage,
		Chapters:    pbChapters,
		Terms:       pbTerms,
		Tags:        pbTags,
		CreatedTime: createdAT,
		UpdatedTime: updatedAT,
	})

	return res, nil
}

func (s *dynamicServer) ListDynamics(
	ctx context.Context,
	req *connect.Request[dynamicv1.ListDynamicsRequest],
) (*connect.Response[dynamicv1.ListDynamicsResponse], error) {
	sortCategory, err := FindTypeOfSort(ctx, db, req.Msg.SortCategory)

	if err != nil {
		log.Printf("failed to get sorts: %v", err)
		return nil, err
	}

	modifiers := []QueryMod{
		Load(DynamicRels.Image),
		DynamicWhere.Published.EQ(true),
		OrderBy(fmt.Sprintf("%s %s", sortCategory.SQL, req.Msg.SortOrder)),
		LeftOuterJoin(TableNames.Users + " on " + TableNames.Dynamics + "." + DynamicColumns.UserID + " = " + TableNames.Users + "." + UserColumns.UserID),
		LeftOuterJoin(TableNames.DynamicsOnTags + " on " + TableNames.Dynamics + "." + DynamicColumns.DynamicID + " = " + TableNames.DynamicsOnTags + "." + DynamicsOnTagColumns.DynamicID),
		LeftOuterJoin(TableNames.Tags + " on " + TableNames.DynamicsOnTags + "." + DynamicsOnTagColumns.DynamicID + " = " + TableNames.Tags + "." + TagColumns.TagID),
	}

	if len(req.Msg.SearchKeywords) != 0 {
		var orConditions, Dwhere, Uwhere, Twhere []QueryMod
		for key, searchKeyword := range req.Msg.SearchKeywords {
			keyword := "%" + searchKeyword + "%"
			if key == 0 {
				Dwhere = append(Dwhere, DynamicWhere.Title.ILIKE(keyword))
				Uwhere = append(Uwhere, UserWhere.Name.ILIKE(keyword))
				Twhere = append(Twhere, Expr(TagWhere.Name.ILIKE(keyword), Or2(Where(TagColumns.Name+" IS NULL"))))
			} else {
				Dwhere = append(Dwhere, Or2(DynamicWhere.Title.ILIKE(keyword)))
				Uwhere = append(Uwhere, Or2(UserWhere.Name.ILIKE(keyword)))
				Twhere = append(Twhere, Or2(TagWhere.Name.ILIKE(keyword)))
			}
			Dwhere = append(Dwhere, Or2(UserWhere.Name.ILIKE(keyword)))
			Dwhere = append(Dwhere, Or2(TagWhere.Name.ILIKE(keyword)))
		}
		orConditions = append(orConditions, Expr(Dwhere...))
		orConditions = append(orConditions, Load(DynamicRels.User, Expr(Uwhere...)))
		orConditions = append(orConditions, Load(Rels(DynamicRels.DynamicsOnTags, DynamicsOnTagRels.Tag), Expr(Twhere...)))
		modifiers = append(modifiers, orConditions...)
	}

	if len(req.Msg.FilterKeywords) != 0 {
		var orConditions, Dwhere, Uwhere, Twhere []QueryMod
		for _, filterKeyword := range req.Msg.FilterKeywords {
			keyword := "%" + filterKeyword + "%"
			Dwhere = append(Dwhere, DynamicWhere.Title.NILIKE(keyword))
			Uwhere = append(Uwhere, UserWhere.Name.NILIKE(keyword))
			Twhere = append(Twhere, TagWhere.Name.ILIKE(keyword))
			Dwhere = append(Dwhere, UserWhere.Name.NILIKE(keyword))
			Dwhere = append(Dwhere, Expr(TagWhere.Name.NILIKE(keyword), Or2(Where(TableNames.Tags+"."+TagColumns.Name+" IS NULL"))))
		}
		orConditions = append(orConditions, Expr(Dwhere...))
		orConditions = append(orConditions, Load(DynamicRels.User, Expr(Uwhere...)))
		orConditions = append(orConditions, Load(Rels(DynamicRels.DynamicsOnTags, DynamicsOnTagRels.Tag), Expr(Twhere...)))
		modifiers = append(modifiers, orConditions...)
	}

	if req.Msg.FilterStartDate != "" {
		condition := DynamicWhere.UpdatedAt.GTE(ConvertToPostgresTimestamp(req.Msg.FilterStartDate))
		modifiers = append(modifiers, condition)
	}

	if req.Msg.FilterEndDate != "" {
		condition := DynamicWhere.UpdatedAt.LT(ConvertToPostgresTimestamp(req.Msg.FilterStartDate))
		modifiers = append(modifiers, condition)
	}

	dynamics, err := Dynamics(modifiers...).All(ctx, db)

	if err != nil {
		log.Printf("failed to get dynamics: %v", err)
		return nil, err
	}

	var pbDynamics []*dynamicv1.ListDynamicData
	for _, dynamic := range dynamics {
		createdAT := timestamppb.New(dynamic.CreatedAt)
		updatedAT := timestamppb.New(dynamic.UpdatedAt)
		pbDynamic := &dynamicv1.ListDynamicData{
			DynamicId:      dynamic.DynamicID,
			Title:          dynamic.Title,
			Overview:       dynamic.Overview,
			UserName:       dynamic.R.User.Name,
			CoverImageName: dynamic.R.Image.Name,
			CreatedTime:    createdAT,
			UpdatedTime:    updatedAT,
		}
		pbDynamics = append(pbDynamics, pbDynamic)
	}

	res := connect.NewResponse(&dynamicv1.ListDynamicsResponse{
		Dynamics: pbDynamics,
	})

	return res, nil
}

func (s *pageServer) ListPages(
	ctx context.Context,
	_ *connect.Request[dynamicv1.ListPagesRequest],
) (*connect.Response[dynamicv1.ListPagesResponse], error) {
	pages, err := models.Pages().All(ctx, db)
	if err != nil {
		log.Printf("failed to get pages: %v", err)
		return nil, err
	}

	var pbPages []*dynamicv1.ListPageData
	for _, page := range pages {
		pbPage := &dynamicv1.ListPageData{
			PageId:    page.PageID,
			Title:     page.Title,
			Order:     page.Order,
			ChapterId: page.ChapterID,
		}
		pbPages = append(pbPages, pbPage)
	}

	res := connect.NewResponse(&dynamicv1.ListPagesResponse{
		Pages: pbPages,
	})

	return res, nil
}

func (s *sortServer) ListSorts(
	ctx context.Context,
	_ *connect.Request[dynamicv1.ListSortsRequest],
) (*connect.Response[dynamicv1.ListSortsResponse], error) {
	sorts, err := TypeOfSorts().All(ctx, db)
	if err != nil {
		log.Printf("failed to get sorts: %v", err)
		return nil, err
	}

	var pbSorts []*dynamicv1.SortData
	for _, sort := range sorts {
		pbSort := &dynamicv1.SortData{
			SortId: sort.TypeOfSortID,
			Name:   sort.Name,
		}
		pbSorts = append(pbSorts, pbSort)
	}

	res := connect.NewResponse(&dynamicv1.ListSortsResponse{
		Sorts: pbSorts,
	})

	return res, nil
}

func (s *dynamicServer) AddDynamic(
	ctx context.Context,
	req *connect.Request[dynamicv1.AddDynamicRequest],
) (*connect.Response[dynamicv1.AddDynamicResponse], error) {
	dynamic := models.Dynamic{
		Title:     req.Msg.Title,
		UserID:    req.Msg.UserId,
		Published: false,
	}
	err := dynamic.Insert(ctx, db, boil.Infer())
	if err != nil {
		log.Printf("failed to add dynamic: %v", err)
		return nil, err
	}

	res := connect.NewResponse(&dynamicv1.AddDynamicResponse{
		DynamicId: dynamic.DynamicID,
	})

	return res, nil
}

func (s *dynamicServer) DeleteDynamic(
	ctx context.Context,
	req *connect.Request[dynamicv1.DeleteDynamicRequest],
) (*connect.Response[dynamicv1.DeleteDynamicResponse], error) {
	dynamic := models.Dynamic{
		DynamicID: req.Msg.DynamicId,
	}

	_, err := dynamic.Delete(ctx, db)
	if err != nil {
		log.Printf("failed to delete dynamic: %v", err)
		return nil, err
	}

	return connect.NewResponse(&dynamicv1.DeleteDynamicResponse{}), nil
}

func (s *dynamicServer) UpdateDynamicStatus(
	ctx context.Context,
	req *connect.Request[dynamicv1.UpdateDynamicStatusRequest],
) (*connect.Response[dynamicv1.UpdateDynamicStatusResponse], error) {
	dynamic := models.Dynamic{
		DynamicID: req.Msg.DynamicId,
		Title:     req.Msg.Title,
		Overview:  req.Msg.Overview,
		Published: req.Msg.Published,
	}

	_, err := dynamic.Update(ctx, db, boil.Infer())
	if err != nil {
		log.Printf("failed to update dynamic status: %v", err)
		return nil, err
	}

	return connect.NewResponse(&dynamicv1.UpdateDynamicStatusResponse{}), nil
}

var db boil.ContextExecutor

func InitDB() {
	db = boil.GetContextDB()
}

func server() http.Handler {
	InitDB()

	mux := http.NewServeMux()
	path, handler := dynamicv1connect.NewDynamicServiceHandler(&dynamicServer{})
	mux.Handle(path, handler)
	path, handler = dynamicv1connect.NewPageServiceHandler(&pageServer{})
	mux.Handle(path, handler)
	path, handler = dynamicv1connect.NewSortServiceHandler(&sortServer{})
	mux.Handle(path, handler)
	return mux
}

func ConvertToPostgresTimestamp(date string) time.Time {
	layout := "2006/01/02"
	datetime, _ := time.Parse(layout, date)
	return datetime
}

func NullStringToEmptyString(str string) string {
	if reflect.ValueOf(str).IsNil() {
		return ""
	}
	return str
}

func SetImageData(image *Image) *dynamicv1.ImageData {
	var pbImage *dynamicv1.ImageData
	if image != nil {
		imagePath := image.Path + image.Name
		pbImage = &dynamicv1.ImageData{
			ImageId:   image.ImageID,
			ImagePath: imagePath,
			Type:      image.R.TypeOfImage.Name,
		}
	}
	return pbImage
}

func SetTermData(terms []*Term) []*dynamicv1.TermData {
	var pbTerms []*dynamicv1.TermData
	for _, term := range terms {

		pbTermImage := SetImageData(term.R.Image)

		pbTerm := &dynamicv1.TermData{
			TermId: term.TermID,
			Name:   term.Name,
			Text:   term.Text,
			Order:  term.Order,
			Image:  pbTermImage,
		}

		pbTerms = append(pbTerms, pbTerm)
	}

	return pbTerms
}

func main() {
	db, err := sql.Open("postgres", "host=db port=5432 user=postgres password=pass dbname=dynamic_novel sslmode=disable")
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	err = db.Ping()
	if err != nil {
		log.Fatal(err)
	}

	boil.SetDB(db)

	mux := server()

	err = http.ListenAndServe(
		":8080",
		h2c.NewHandler(mux, &http2.Server{}),
	)

	if err != nil {
		log.Fatalf("failed to listen(tcp, :8080)")
	}

}
