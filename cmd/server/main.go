package main

import (
	"context"
	"database/sql"
	"fmt"
	"log"
	"net/http"
	"time"

	"google.golang.org/protobuf/types/known/timestamppb"

	_ "github.com/lib/pq"
	"github.com/mamoruuji/dynamic_novel_api/db/models"
	. "github.com/mamoruuji/dynamic_novel_api/db/models"

	"github.com/volatiletech/sqlboiler/v4/boil"
	. "github.com/volatiletech/sqlboiler/v4/queries/qm"

	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"

	"github.com/bufbuild/connect-go"
	// "github.com/davecgh/go-spew/spew"
	dynamicv1 "github.com/mamoruuji/dynamic_novel_api/gen/proto/dynamic/v1"        // generated by protoc-gen-go
	"github.com/mamoruuji/dynamic_novel_api/gen/proto/dynamic/v1/dynamicv1connect" // generated by protoc-gen-connect-go
)

type dynamicServer struct {
	dynamicv1connect.DynamicServiceHandler
}

type pageServer struct {
	dynamicv1connect.PageServiceHandler
}

type sortServer struct {
	dynamicv1connect.SortServiceHandler
}

func (s *dynamicServer) ListDynamics(
	ctx context.Context,
	req *connect.Request[dynamicv1.ListDynamicsRequest],
) (*connect.Response[dynamicv1.ListDynamicsResponse], error) {
	sortCategory, err := FindSort(ctx, db, int(req.Msg.SortCategory))

	if err != nil {
		log.Printf("failed to get sorts: %v", err)
		return nil, err
	}

	// boil.DebugMode = true
	modifiers := []QueryMod{
		DynamicWhere.Published.EQ(true),
		OrderBy(fmt.Sprintf("%s %s", sortCategory.SQL, req.Msg.SortOrder)),
		LeftOuterJoin(TableNames.Users + " on " + TableNames.Dynamics + "." + DynamicColumns.UserID + " = " + TableNames.Users + "." + UserColumns.UserID),
		LeftOuterJoin(TableNames.DynamicsOnTags + " on " + TableNames.Dynamics + "." + DynamicColumns.DynamicID + " = " + TableNames.DynamicsOnTags + "." + DynamicsOnTagColumns.DynamicID),
		LeftOuterJoin(TableNames.Tags + " on " + TableNames.DynamicsOnTags + "." + DynamicsOnTagColumns.DynamicID + " = " + TableNames.Tags + "." + TagColumns.TagID),
	}

	if len(req.Msg.SearchKeywords) != 0 {
		var orConditions, Dwhere, Uwhere, Twhere []QueryMod
		for key, searchKeyword := range req.Msg.SearchKeywords {
			keyword := "%" + searchKeyword + "%"
			if key == 0 {
				Dwhere = append(Dwhere, DynamicWhere.Title.ILIKE(keyword))
				Uwhere = append(Uwhere, UserWhere.Name.ILIKE(keyword))
				Twhere = append(Twhere, Expr(TagWhere.Name.ILIKE(keyword), Or2(Where(TagColumns.Name+" IS NULL"))))
			} else {
				Dwhere = append(Dwhere, Or2(DynamicWhere.Title.ILIKE(keyword)))
				Uwhere = append(Uwhere, Or2(UserWhere.Name.ILIKE(keyword)))
				Twhere = append(Twhere, Or2(TagWhere.Name.ILIKE(keyword)))
				// spew.Dump(modifiers)
			}
			Dwhere = append(Dwhere, Or2(UserWhere.Name.ILIKE(keyword)))
			Dwhere = append(Dwhere, Or2(TagWhere.Name.ILIKE(keyword)))
		}
		orConditions = append(orConditions, Expr(Dwhere...))
		orConditions = append(orConditions, Load(DynamicRels.User, Expr(Uwhere...)))
		orConditions = append(orConditions, Load(Rels(DynamicRels.DynamicsOnTags, DynamicsOnTagRels.Tag), Expr(Twhere...)))
		modifiers = append(modifiers, orConditions...)
	}

	if len(req.Msg.FilterKeywords) != 0 {
		var orConditions, Dwhere, Uwhere, Twhere []QueryMod
		for _, filterKeyword := range req.Msg.FilterKeywords {
			keyword := "%" + filterKeyword + "%"
			Dwhere = append(Dwhere, DynamicWhere.Title.NILIKE(keyword))
			Uwhere = append(Uwhere, UserWhere.Name.NILIKE(keyword))
			Twhere = append(Twhere, TagWhere.Name.ILIKE(keyword))
			Dwhere = append(Dwhere, UserWhere.Name.NILIKE(keyword))
			Dwhere = append(Dwhere, Expr(TagWhere.Name.NILIKE(keyword), Or2(Where(TableNames.Tags+"."+TagColumns.Name+" IS NULL"))))
		}
		orConditions = append(orConditions, Expr(Dwhere...))
		orConditions = append(orConditions, Load(DynamicRels.User, Expr(Uwhere...)))
		orConditions = append(orConditions, Load(Rels(DynamicRels.DynamicsOnTags, DynamicsOnTagRels.Tag), Expr(Twhere...)))
		modifiers = append(modifiers, orConditions...)
	}

	if req.Msg.FilterStartDate != "" {
		condition := DynamicWhere.UpdatedAt.GTE(ConvertToPostgresTimestamp(req.Msg.FilterStartDate))
		modifiers = append(modifiers, condition)
	}

	if req.Msg.FilterEndDate != "" {
		condition := DynamicWhere.UpdatedAt.LT(ConvertToPostgresTimestamp(req.Msg.FilterStartDate))
		modifiers = append(modifiers, condition)
	}

	dynamics, err := Dynamics(modifiers...).All(ctx, db)

	if err != nil {
		log.Printf("failed to get dynamics: %v", err)
		return nil, err
	}

	var pbDynamics []*dynamicv1.DynamicData
	for _, d := range dynamics {
		dynamicID := int32(d.DynamicID)
		createdAT := timestamppb.New(d.CreatedAt)
		updatedAT := timestamppb.New(d.UpdatedAt)
		pbDynamic := &dynamicv1.DynamicData{
			DynamicId:   dynamicID,
			Title:       d.Title,
			Overview:    d.Overview,
			UserId:      d.UserID,
			Published:   d.Published,
			CreatedTime: createdAT,
			UpdatedTime: updatedAT,
		}
		pbDynamics = append(pbDynamics, pbDynamic)
	}

	res := connect.NewResponse(&dynamicv1.ListDynamicsResponse{
		Dynamics: pbDynamics,
	})

	return res, nil
}

func (s *pageServer) ListPages(
	ctx context.Context,
	_ *connect.Request[dynamicv1.ListPagesRequest],
) (*connect.Response[dynamicv1.ListPagesResponse], error) {
	pages, err := models.Pages().All(ctx, db)
	if err != nil {
		log.Printf("failed to get pages: %v", err)
		return nil, err
	}

	var pbPages []*dynamicv1.PageData
	for _, p := range pages {
		pageID := int32(p.PageID)
		order := int32(p.Order)
		chapterID := int32(p.ChapterID)
		pbPage := &dynamicv1.PageData{
			PageId:    pageID,
			Title:     p.Title,
			Order:     order,
			ChapterId: chapterID,
		}
		pbPages = append(pbPages, pbPage)
	}

	res := connect.NewResponse(&dynamicv1.ListPagesResponse{
		Pages: pbPages,
	})

	return res, nil
}

func (s *sortServer) ListSorts(
	ctx context.Context,
	_ *connect.Request[dynamicv1.ListSortsRequest],
) (*connect.Response[dynamicv1.ListSortsResponse], error) {
	sorts, err := Sorts().All(ctx, db)
	if err != nil {
		log.Printf("failed to get sorts: %v", err)
		return nil, err
	}

	var pbSorts []*dynamicv1.SortData
	for _, s := range sorts {
		sortID := int32(s.SortID)
		pbSort := &dynamicv1.SortData{
			SortId: sortID,
			Name:   s.Name,
		}
		pbSorts = append(pbSorts, pbSort)
	}

	res := connect.NewResponse(&dynamicv1.ListSortsResponse{
		Sorts: pbSorts,
	})

	return res, nil
}

func (s *dynamicServer) AddDynamic(
	ctx context.Context,
	req *connect.Request[dynamicv1.AddDynamicRequest],
) (*connect.Response[dynamicv1.AddDynamicResponse], error) {
	d := models.Dynamic{
		Title:     req.Msg.Title,
		UserID:    req.Msg.UserId,
		Published: false,
	}
	err := d.Insert(ctx, db, boil.Infer())
	if err != nil {
		log.Printf("failed to add dynamic: %v", err)
		return nil, err
	}

	dynamicID := int32(d.DynamicID)
	res := connect.NewResponse(&dynamicv1.AddDynamicResponse{
		DynamicId: dynamicID,
	})

	return res, nil
}

func (s *dynamicServer) DeleteDynamic(
	ctx context.Context,
	req *connect.Request[dynamicv1.DeleteDynamicRequest],
) (*connect.Response[dynamicv1.DeleteDynamicResponse], error) {
	dynamicID := int(req.Msg.DynamicId)
	d := models.Dynamic{
		DynamicID: dynamicID,
	}

	_, err := d.Delete(ctx, db)
	if err != nil {
		log.Printf("failed to delete dynamic: %v", err)
		return nil, err
	}

	return connect.NewResponse(&dynamicv1.DeleteDynamicResponse{}), nil
}

func (s *dynamicServer) UpdateDynamicStatus(
	ctx context.Context,
	req *connect.Request[dynamicv1.UpdateDynamicStatusRequest],
) (*connect.Response[dynamicv1.UpdateDynamicStatusResponse], error) {
	dynamicID := int(req.Msg.DynamicId)
	d := models.Dynamic{
		DynamicID: dynamicID,
	}

	d.Title = req.Msg.Title
	d.Overview = req.Msg.Overview
	d.Published = req.Msg.Published
	_, err := d.Update(ctx, db, boil.Infer())
	if err != nil {
		log.Printf("failed to update dynamic status: %v", err)
		return nil, err
	}

	return connect.NewResponse(&dynamicv1.UpdateDynamicStatusResponse{}), nil
}

var db boil.ContextExecutor

func InitDB() {
	db = boil.GetContextDB()
}

func server() http.Handler {
	InitDB()

	mux := http.NewServeMux()
	path, handler := dynamicv1connect.NewDynamicServiceHandler(&dynamicServer{})
	mux.Handle(path, handler)
	path, handler = dynamicv1connect.NewPageServiceHandler(&pageServer{})
	mux.Handle(path, handler)
	path, handler = dynamicv1connect.NewSortServiceHandler(&sortServer{})
	mux.Handle(path, handler)
	return mux
}

func ConvertToPostgresTimestamp(date string) time.Time {
	layout := "2006/01/02"
	datetime, _ := time.Parse(layout, date)
	return datetime
}

func main() {
	db, err := sql.Open("postgres", "host=db port=5432 user=postgres password=pass dbname=dynamic_novel sslmode=disable")
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	err = db.Ping()
	if err != nil {
		log.Fatal(err)
	}

	boil.SetDB(db)

	mux := server()

	err = http.ListenAndServe(
		":8080",
		h2c.NewHandler(mux, &http2.Server{}),
	)

	if err != nil {
		log.Fatalf("failed to listen(tcp, :8080)")
	}

}
